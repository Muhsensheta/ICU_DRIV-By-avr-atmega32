
ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  00004b32  00004bc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800190  00800190  00004cf6  2**0
                  ALLOC
  3 .stab         00004260  00000000  00000000  00004cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017be  00000000  00000000  00008f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a716  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000a8b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000aaa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000ceb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000e239  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f410  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000f5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000f8c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010234  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__vector_1>
       8:	0c 94 98 0b 	jmp	0x1730	; 0x1730 <__vector_2>
       c:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__vector_10>
      2c:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3a       	cpi	r26, 0xA8	; 168
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c4 24 	call	0x4988	; 0x4988 <main>
      8a:	0c 94 97 25 	jmp	0x4b2e	; 0x4b2e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7c 25 	jmp	0x4af8	; 0x4af8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6c 25 	jmp	0x4ad8	; 0x4ad8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 88 25 	jmp	0x4b10	; 0x4b10 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6c 25 	jmp	0x4ad8	; 0x4ad8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 88 25 	jmp	0x4b10	; 0x4b10 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7c 25 	jmp	0x4af8	; 0x4af8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 68 25 	jmp	0x4ad0	; 0x4ad0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e6       	ldi	r22, 0x63	; 99
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 84 25 	jmp	0x4b08	; 0x4b08 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6c 25 	jmp	0x4ad8	; 0x4ad8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 88 25 	jmp	0x4b10	; 0x4b10 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6c 25 	jmp	0x4ad8	; 0x4ad8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 88 25 	jmp	0x4b10	; 0x4b10 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6c 25 	jmp	0x4ad8	; 0x4ad8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 88 25 	jmp	0x4b10	; 0x4b10 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 70 25 	jmp	0x4ae0	; 0x4ae0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 8c 25 	jmp	0x4b18	; 0x4b18 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 68 25 	jmp	0x4ad0	; 0x4ad0 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 84 25 	jmp	0x4b08	; 0x4b08 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e5 59       	subi	r30, 0x95	; 149
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <M_TIMER1_void_Init>:
#include "TIMER1_int.h"

static void (*ICU_CallBackPtr)(void)=NULL;

void M_TIMER1_void_Init()//mode normal  ,prescaler
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	//set mood   as normal

	CLR_BIT(TCCR1A_REG,WGM10_BIT);
     e36:	af e4       	ldi	r26, 0x4F	; 79
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ef e4       	ldi	r30, 0x4F	; 79
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8e 7f       	andi	r24, 0xFE	; 254
     e42:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_REG,WGM11_BIT);
     e44:	af e4       	ldi	r26, 0x4F	; 79
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	ef e4       	ldi	r30, 0x4F	; 79
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8d 7f       	andi	r24, 0xFD	; 253
     e50:	8c 93       	st	X, r24

	CLR_BIT(TCCR1B_REG,WGM12_BIT );
     e52:	ae e4       	ldi	r26, 0x4E	; 78
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ee e4       	ldi	r30, 0x4E	; 78
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	87 7f       	andi	r24, 0xF7	; 247
     e5e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,WGM13_BIT);
     e60:	ae e4       	ldi	r26, 0x4E	; 78
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	ee e4       	ldi	r30, 0x4E	; 78
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8f 7e       	andi	r24, 0xEF	; 239
     e6c:	8c 93       	st	X, r24

	//step 2: set prescaler as 256
	CLR_BIT(TCCR1B_REG ,CS10_BIT);
     e6e:	ae e4       	ldi	r26, 0x4E	; 78
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	ee e4       	ldi	r30, 0x4E	; 78
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8e 7f       	andi	r24, 0xFE	; 254
     e7a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG ,CS11_BIT);
     e7c:	ae e4       	ldi	r26, 0x4E	; 78
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	ee e4       	ldi	r30, 0x4E	; 78
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8d 7f       	andi	r24, 0xFD	; 253
     e88:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG ,CS12_BIT);
     e8a:	ae e4       	ldi	r26, 0x4E	; 78
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	ee e4       	ldi	r30, 0x4E	; 78
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	84 60       	ori	r24, 0x04	; 4
     e96:	8c 93       	st	X, r24

}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <M_TIMER1_ICU_void_Init>:
void M_TIMER1_ICU_void_Init()//setup initial trigger for ICU
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
	//set initial trigger as  rising
 SET_BIT(TCCR1B_REG,ICES1_BIT);
     ea6:	ae e4       	ldi	r26, 0x4E	; 78
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	ee e4       	ldi	r30, 0x4E	; 78
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	80 64       	ori	r24, 0x40	; 64
     eb2:	8c 93       	st	X, r24
}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <M_TIMER1_ICU_void_INTEnable>:
void M_TIMER1_ICU_void_INTEnable(void)
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
//set interrupt
	SET_BIT(TIMSK_REG,TICIE1_BIT);
     ec2:	a9 e5       	ldi	r26, 0x59	; 89
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e9 e5       	ldi	r30, 0x59	; 89
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	80 62       	ori	r24, 0x20	; 32
     ece:	8c 93       	st	X, r24
}
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <M_TIMER1_ICU_void_INTDisable>:
void M_TIMER1_ICU_void_INTDisable(void)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(TIMSK_REG,TICIE1_BIT);
     ede:	a9 e5       	ldi	r26, 0x59	; 89
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e9 e5       	ldi	r30, 0x59	; 89
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	8f 7d       	andi	r24, 0xDF	; 223
     eea:	8c 93       	st	X, r24
}
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <M_TIMER1_ICU_void_setTrigg>:
void M_TIMER1_ICU_void_setTrigg(u8 copy_u8Trigg)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <M_TIMER1_ICU_void_setTrigg+0x6>
     ef8:	0f 92       	push	r0
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	89 83       	std	Y+1, r24	; 0x01
   switch (copy_u8Trigg)
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	3b 83       	std	Y+3, r19	; 0x03
     f08:	2a 83       	std	Y+2, r18	; 0x02
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	9b 81       	ldd	r25, Y+3	; 0x03
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	31 f0       	breq	.+12     	; 0xf1e <M_TIMER1_ICU_void_setTrigg+0x2c>
     f12:	2a 81       	ldd	r18, Y+2	; 0x02
     f14:	3b 81       	ldd	r19, Y+3	; 0x03
     f16:	21 30       	cpi	r18, 0x01	; 1
     f18:	31 05       	cpc	r19, r1
     f1a:	49 f0       	breq	.+18     	; 0xf2e <M_TIMER1_ICU_void_setTrigg+0x3c>
     f1c:	0f c0       	rjmp	.+30     	; 0xf3c <M_TIMER1_ICU_void_setTrigg+0x4a>
   {
   case TIMER1_ICU_FALL_TRIGG:
   CLR_BIT(TCCR1B_REG,ICES1_BIT);
     f1e:	ae e4       	ldi	r26, 0x4E	; 78
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	ee e4       	ldi	r30, 0x4E	; 78
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	8f 7b       	andi	r24, 0xBF	; 191
     f2a:	8c 93       	st	X, r24
     f2c:	07 c0       	rjmp	.+14     	; 0xf3c <M_TIMER1_ICU_void_setTrigg+0x4a>
	    break;
   case TIMER1_ICU_RISING_TRIGG:
	   SET_BIT(TCCR1B_REG,ICES1_BIT);
     f2e:	ae e4       	ldi	r26, 0x4E	; 78
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	ee e4       	ldi	r30, 0x4E	; 78
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	80 64       	ori	r24, 0x40	; 64
     f3a:	8c 93       	st	X, r24
   	   break;
   }
}
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <M_TIMER1_ICU_u16_takeReading>:
u16 M_TIMER1_ICU_u16_takeReading(void)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
	return ICR1_REG;
     f50:	e6 e4       	ldi	r30, 0x46	; 70
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	91 81       	ldd	r25, Z+1	; 0x01
}
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <M_TIMER1_ICU_void_setCallback>:
void M_TIMER1_ICU_void_setCallback(void(*ptrfn)(void))
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	00 d0       	rcall	.+0      	; 0xf64 <M_TIMER1_ICU_void_setCallback+0x6>
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
	if(ptrfn != NULL)
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	31 f0       	breq	.+12     	; 0xf80 <M_TIMER1_ICU_void_setCallback+0x22>
	{
		ICU_CallBackPtr=ptrfn;
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	9a 81       	ldd	r25, Y+2	; 0x02
     f78:	90 93 91 01 	sts	0x0191, r25
     f7c:	80 93 90 01 	sts	0x0190, r24
	}

}
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
     f8a:	1f 92       	push	r1
     f8c:	0f 92       	push	r0
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	0f 92       	push	r0
     f92:	11 24       	eor	r1, r1
     f94:	2f 93       	push	r18
     f96:	3f 93       	push	r19
     f98:	4f 93       	push	r20
     f9a:	5f 93       	push	r21
     f9c:	6f 93       	push	r22
     f9e:	7f 93       	push	r23
     fa0:	8f 93       	push	r24
     fa2:	9f 93       	push	r25
     fa4:	af 93       	push	r26
     fa6:	bf 93       	push	r27
     fa8:	ef 93       	push	r30
     faa:	ff 93       	push	r31
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
	if(ICU_CallBackPtr!=NULL)
     fb4:	80 91 90 01 	lds	r24, 0x0190
     fb8:	90 91 91 01 	lds	r25, 0x0191
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	29 f0       	breq	.+10     	; 0xfca <__vector_7+0x40>
	{
		ICU_CallBackPtr();
     fc0:	e0 91 90 01 	lds	r30, 0x0190
     fc4:	f0 91 91 01 	lds	r31, 0x0191
     fc8:	09 95       	icall
	}
}
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	ff 91       	pop	r31
     fd0:	ef 91       	pop	r30
     fd2:	bf 91       	pop	r27
     fd4:	af 91       	pop	r26
     fd6:	9f 91       	pop	r25
     fd8:	8f 91       	pop	r24
     fda:	7f 91       	pop	r23
     fdc:	6f 91       	pop	r22
     fde:	5f 91       	pop	r21
     fe0:	4f 91       	pop	r20
     fe2:	3f 91       	pop	r19
     fe4:	2f 91       	pop	r18
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	0f 90       	pop	r0
     fec:	1f 90       	pop	r1
     fee:	18 95       	reti

00000ff0 <M_TIMER0_void_Init>:

static u32 NumberOfOverflows=0;
static u32  NumberOfRemainingTicks=0;
static void(*Arr_Call_Back[2])(void)={NULL,NULL};
void M_TIMER0_void_Init(void)//set timer mood,set OC0 pin mood
{
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
       #else
          #error ("wrong insert node")
       #endif
 #elif  (TIMER0_MODE==TIMER0_FAST_PWM_MODE)

	SET_BIT(TCCR0_REG,WGM00_BIT);
     ff8:	a3 e5       	ldi	r26, 0x53	; 83
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e3 e5       	ldi	r30, 0x53	; 83
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	80 64       	ori	r24, 0x40	; 64
    1004:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,WGM01_BIT);
    1006:	a3 e5       	ldi	r26, 0x53	; 83
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e3 e5       	ldi	r30, 0x53	; 83
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	88 60       	ori	r24, 0x08	; 8
    1012:	8c 93       	st	X, r24
    #if(TIMER0_OC0_MODE==TIMER0_PWM_NON_INVERTED||TIMER0_OC0_MODE== TIMER0_PWM_INVERTED)
	//step1 apply mask
	TCCR0_REG&= TIMER0_OC0_MASK;
    1014:	a3 e5       	ldi	r26, 0x53	; 83
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e3 e5       	ldi	r30, 0x53	; 83
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	8f 7c       	andi	r24, 0xCF	; 207
    1020:	8c 93       	st	X, r24
	 TCCR0_REG|=TIMER0_OC0_MODE;
    1022:	a3 e5       	ldi	r26, 0x53	; 83
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e3 e5       	ldi	r30, 0x53	; 83
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	80 62       	ori	r24, 0x20	; 32
    102e:	8c 93       	st	X, r24


#else
#error();
#endif
}
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <M_TIMER0_void_start>:
void M_TIMER0_void_start(void)//set clock prescaler
{
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
#if(TIMER0_PRESCALER>=TIMER0_PRESCALER_NO_CLK&&TIMER0_PRESCALER<=TIMER0_PRESCALER_EXTCLK_RAIS_EDGE)
	TCCR0_REG &=TIMER0_PRESCALER_MASK;
    103e:	a3 e5       	ldi	r26, 0x53	; 83
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e3 e5       	ldi	r30, 0x53	; 83
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	88 7f       	andi	r24, 0xF8	; 248
    104a:	8c 93       	st	X, r24
	TCCR0_REG |=TIMER0_PRESCALER;
    104c:	a3 e5       	ldi	r26, 0x53	; 83
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e3 e5       	ldi	r30, 0x53	; 83
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	84 60       	ori	r24, 0x04	; 4
    1058:	8c 93       	st	X, r24
#else
#error("invalid prescaler")
#endif
}
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <M_TIMER0_void_stop>:
void M_TIMER0_void_stop(void)// NO CLOCK
{
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG &=TIMER0_PRESCALER_MASK;
    1068:	a3 e5       	ldi	r26, 0x53	; 83
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e3 e5       	ldi	r30, 0x53	; 83
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	88 7f       	andi	r24, 0xF8	; 248
    1074:	8c 93       	st	X, r24
}
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <M_TIMER0_void_setTime>:
void M_TIMER0_void_setTime(u32 copy_u32timeMS)//time in milli seconds;
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	a5 97       	sbiw	r28, 0x25	; 37
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	6d 8f       	std	Y+29, r22	; 0x1d
    1092:	7e 8f       	std	Y+30, r23	; 0x1e
    1094:	8f 8f       	std	Y+31, r24	; 0x1f
    1096:	98 a3       	std	Y+32, r25	; 0x20
	u32 Loc_prescalerArr[]={1,8,64,256,1024};
    1098:	ce 01       	movw	r24, r28
    109a:	09 96       	adiw	r24, 0x09	; 9
    109c:	9a a3       	std	Y+34, r25	; 0x22
    109e:	89 a3       	std	Y+33, r24	; 0x21
    10a0:	eb e6       	ldi	r30, 0x6B	; 107
    10a2:	f1 e0       	ldi	r31, 0x01	; 1
    10a4:	fc a3       	std	Y+36, r31	; 0x24
    10a6:	eb a3       	std	Y+35, r30	; 0x23
    10a8:	f4 e1       	ldi	r31, 0x14	; 20
    10aa:	fd a3       	std	Y+37, r31	; 0x25
    10ac:	eb a1       	ldd	r30, Y+35	; 0x23
    10ae:	fc a1       	ldd	r31, Y+36	; 0x24
    10b0:	00 80       	ld	r0, Z
    10b2:	8b a1       	ldd	r24, Y+35	; 0x23
    10b4:	9c a1       	ldd	r25, Y+36	; 0x24
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	9c a3       	std	Y+36, r25	; 0x24
    10ba:	8b a3       	std	Y+35, r24	; 0x23
    10bc:	e9 a1       	ldd	r30, Y+33	; 0x21
    10be:	fa a1       	ldd	r31, Y+34	; 0x22
    10c0:	00 82       	st	Z, r0
    10c2:	89 a1       	ldd	r24, Y+33	; 0x21
    10c4:	9a a1       	ldd	r25, Y+34	; 0x22
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	9a a3       	std	Y+34, r25	; 0x22
    10ca:	89 a3       	std	Y+33, r24	; 0x21
    10cc:	9d a1       	ldd	r25, Y+37	; 0x25
    10ce:	91 50       	subi	r25, 0x01	; 1
    10d0:	9d a3       	std	Y+37, r25	; 0x25
    10d2:	ed a1       	ldd	r30, Y+37	; 0x25
    10d4:	ee 23       	and	r30, r30
    10d6:	51 f7       	brne	.-44     	; 0x10ac <M_TIMER0_void_setTime+0x30>
	f32 Locticktime=(f32)Loc_prescalerArr[TIMER0_PRESCALER-1]/FCPU;
    10d8:	8d 89       	ldd	r24, Y+21	; 0x15
    10da:	9e 89       	ldd	r25, Y+22	; 0x16
    10dc:	af 89       	ldd	r26, Y+23	; 0x17
    10de:	b8 8d       	ldd	r27, Y+24	; 0x18
    10e0:	bc 01       	movw	r22, r24
    10e2:	cd 01       	movw	r24, r26
    10e4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	bc 01       	movw	r22, r24
    10ee:	cd 01       	movw	r24, r26
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	40 e8       	ldi	r20, 0x80	; 128
    10f6:	51 e4       	ldi	r21, 0x41	; 65
    10f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	8d 83       	std	Y+5, r24	; 0x05
    1102:	9e 83       	std	Y+6, r25	; 0x06
    1104:	af 83       	std	Y+7, r26	; 0x07
    1106:	b8 87       	std	Y+8, r27	; 0x08
	u32  NoOfDesiredTicks=(copy_u32timeMS*1000)/Locticktime;
    1108:	8d 8d       	ldd	r24, Y+29	; 0x1d
    110a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    110c:	af 8d       	ldd	r26, Y+31	; 0x1f
    110e:	b8 a1       	ldd	r27, Y+32	; 0x20
    1110:	28 ee       	ldi	r18, 0xE8	; 232
    1112:	33 e0       	ldi	r19, 0x03	; 3
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <__mulsi3>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	bc 01       	movw	r22, r24
    1126:	cd 01       	movw	r24, r26
    1128:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	bc 01       	movw	r22, r24
    1132:	cd 01       	movw	r24, r26
    1134:	2d 81       	ldd	r18, Y+5	; 0x05
    1136:	3e 81       	ldd	r19, Y+6	; 0x06
    1138:	4f 81       	ldd	r20, Y+7	; 0x07
    113a:	58 85       	ldd	r21, Y+8	; 0x08
    113c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	bc 01       	movw	r22, r24
    1146:	cd 01       	movw	r24, r26
    1148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	9a 83       	std	Y+2, r25	; 0x02
    1154:	ab 83       	std	Y+3, r26	; 0x03
    1156:	bc 83       	std	Y+4, r27	; 0x04
		NumberOfOverflows++;
	}
#elif  (TIMER0_MODE == TIMER0_CTC_MODE)

#endif
}
    1158:	a5 96       	adiw	r28, 0x25	; 37
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <M_TIMER0_void_EnableInt>:
void M_TIMER0_void_EnableInt(u32 copy_u8IntID)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	28 97       	sbiw	r28, 0x08	; 8
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	69 83       	std	Y+1, r22	; 0x01
    1180:	7a 83       	std	Y+2, r23	; 0x02
    1182:	8b 83       	std	Y+3, r24	; 0x03
    1184:	9c 83       	std	Y+4, r25	; 0x04
	switch(copy_u8IntID)
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
    118a:	ab 81       	ldd	r26, Y+3	; 0x03
    118c:	bc 81       	ldd	r27, Y+4	; 0x04
    118e:	8d 83       	std	Y+5, r24	; 0x05
    1190:	9e 83       	std	Y+6, r25	; 0x06
    1192:	af 83       	std	Y+7, r26	; 0x07
    1194:	b8 87       	std	Y+8, r27	; 0x08
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	9e 81       	ldd	r25, Y+6	; 0x06
    119a:	af 81       	ldd	r26, Y+7	; 0x07
    119c:	b8 85       	ldd	r27, Y+8	; 0x08
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	a1 05       	cpc	r26, r1
    11a2:	b1 05       	cpc	r27, r1
    11a4:	51 f0       	breq	.+20     	; 0x11ba <M_TIMER0_void_EnableInt+0x50>
    11a6:	8d 81       	ldd	r24, Y+5	; 0x05
    11a8:	9e 81       	ldd	r25, Y+6	; 0x06
    11aa:	af 81       	ldd	r26, Y+7	; 0x07
    11ac:	b8 85       	ldd	r27, Y+8	; 0x08
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	91 05       	cpc	r25, r1
    11b2:	a1 05       	cpc	r26, r1
    11b4:	b1 05       	cpc	r27, r1
    11b6:	49 f0       	breq	.+18     	; 0x11ca <M_TIMER0_void_EnableInt+0x60>
    11b8:	0f c0       	rjmp	.+30     	; 0x11d8 <M_TIMER0_void_EnableInt+0x6e>
	{
	case TIMER0_OVF_INT_ID:
		SET_BIT(TIMSK_REG,TOIE0_BIT);
    11ba:	a9 e5       	ldi	r26, 0x59	; 89
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e9 e5       	ldi	r30, 0x59	; 89
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	81 60       	ori	r24, 0x01	; 1
    11c6:	8c 93       	st	X, r24
    11c8:	07 c0       	rjmp	.+14     	; 0x11d8 <M_TIMER0_void_EnableInt+0x6e>
		break;
	case TIMER0_COMP_INT_ID:
	SET_BIT(TIMSK_REG,OCIE0_BIT);
    11ca:	a9 e5       	ldi	r26, 0x59	; 89
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e9 e5       	ldi	r30, 0x59	; 89
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	82 60       	ori	r24, 0x02	; 2
    11d6:	8c 93       	st	X, r24
			break;
	}
	//METHOD 2
	if(copy_u8IntID >= TIMER0_OVF_INT_ID && copy_u8IntID <= TIMER0_COMP_INT_ID )
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	9a 81       	ldd	r25, Y+2	; 0x02
    11dc:	ab 81       	ldd	r26, Y+3	; 0x03
    11de:	bc 81       	ldd	r27, Y+4	; 0x04
    11e0:	82 30       	cpi	r24, 0x02	; 2
    11e2:	91 05       	cpc	r25, r1
    11e4:	a1 05       	cpc	r26, r1
    11e6:	b1 05       	cpc	r27, r1
    11e8:	90 f4       	brcc	.+36     	; 0x120e <M_TIMER0_void_EnableInt+0xa4>
		{
			SET_BIT(TIMSK_REG,copy_u8IntID);
    11ea:	a9 e5       	ldi	r26, 0x59	; 89
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e9 e5       	ldi	r30, 0x59	; 89
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	48 2f       	mov	r20, r24
    11f6:	29 81       	ldd	r18, Y+1	; 0x01
    11f8:	3a 81       	ldd	r19, Y+2	; 0x02
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <M_TIMER0_void_EnableInt+0x9c>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <M_TIMER0_void_EnableInt+0x98>
    120a:	84 2b       	or	r24, r20
    120c:	8c 93       	st	X, r24
		}

}
    120e:	28 96       	adiw	r28, 0x08	; 8
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <M_TIMER0_void_DisableInt>:
void M_TIMER0_void_DisableInt(u32 copy_u8IntID)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <M_TIMER0_void_DisableInt+0x6>
    1226:	00 d0       	rcall	.+0      	; 0x1228 <M_TIMER0_void_DisableInt+0x8>
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	69 83       	std	Y+1, r22	; 0x01
    122e:	7a 83       	std	Y+2, r23	; 0x02
    1230:	8b 83       	std	Y+3, r24	; 0x03
    1232:	9c 83       	std	Y+4, r25	; 0x04
		CLR_BIT(TIMSK_REG;OCIE0_BIT)
				break;
		}*/
	//METHOD 2

	CLR_BIT(TIMSK_REG,copy_u8IntID);
    1234:	a9 e5       	ldi	r26, 0x59	; 89
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e9 e5       	ldi	r30, 0x59	; 89
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	29 81       	ldd	r18, Y+1	; 0x01
    1242:	3a 81       	ldd	r19, Y+2	; 0x02
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <M_TIMER0_void_DisableInt+0x30>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <M_TIMER0_void_DisableInt+0x2c>
    1254:	80 95       	com	r24
    1256:	84 23       	and	r24, r20
    1258:	8c 93       	st	X, r24
  }
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <M_TIMER0_void_setCallBack>:
void M_TIMER0_void_setCallBack(void(*ptrfn)(void),u8 copy_u8IntID)
{
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	00 d0       	rcall	.+0      	; 0x126e <M_TIMER0_void_setCallBack+0x6>
    126e:	00 d0       	rcall	.+0      	; 0x1270 <M_TIMER0_void_setCallBack+0x8>
    1270:	0f 92       	push	r0
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	9a 83       	std	Y+2, r25	; 0x02
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	6b 83       	std	Y+3, r22	; 0x03
	switch (copy_u8IntID)
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	3d 83       	std	Y+5, r19	; 0x05
    1284:	2c 83       	std	Y+4, r18	; 0x04
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	9d 81       	ldd	r25, Y+5	; 0x05
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	31 f0       	breq	.+12     	; 0x129a <M_TIMER0_void_setCallBack+0x32>
    128e:	2c 81       	ldd	r18, Y+4	; 0x04
    1290:	3d 81       	ldd	r19, Y+5	; 0x05
    1292:	21 30       	cpi	r18, 0x01	; 1
    1294:	31 05       	cpc	r19, r1
    1296:	41 f0       	breq	.+16     	; 0x12a8 <M_TIMER0_void_setCallBack+0x40>
    1298:	0d c0       	rjmp	.+26     	; 0x12b4 <M_TIMER0_void_setCallBack+0x4c>
	{
	case TIMER0_OVF_INT_ID:
		Arr_Call_Back[0]=ptrfn;
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	9a 81       	ldd	r25, Y+2	; 0x02
    129e:	90 93 9b 01 	sts	0x019B, r25
    12a2:	80 93 9a 01 	sts	0x019A, r24
    12a6:	06 c0       	rjmp	.+12     	; 0x12b4 <M_TIMER0_void_setCallBack+0x4c>
		break;
	case TIMER0_COMP_INT_ID:
		Arr_Call_Back[1]=ptrfn;
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	90 93 9d 01 	sts	0x019D, r25
    12b0:	80 93 9c 01 	sts	0x019C, r24
		break;
	}
	//method 2
	Arr_Call_Back[copy_u8IntID]=ptrfn;
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	fc 01       	movw	r30, r24
    12c0:	e6 56       	subi	r30, 0x66	; 102
    12c2:	fe 4f       	sbci	r31, 0xFE	; 254
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	9a 81       	ldd	r25, Y+2	; 0x02
    12c8:	91 83       	std	Z+1, r25	; 0x01
    12ca:	80 83       	st	Z, r24
}
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <M_TIMER0_void_setFastPWM>:
void M_TIMER0_void_setFastPWM(u8 copy_u8Duty)
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <M_TIMER0_void_setFastPWM+0x6>
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <M_TIMER0_void_setFastPWM+0x8>
    12e4:	0f 92       	push	r0
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	89 83       	std	Y+1, r24	; 0x01
#if(TIMER0_MODE ==TIMER0_FAST_PWM_MODE)
     #if(TIMER0_OC0_MODE ==TIMER0_PWM_NON_INVERTED)
	 OCR0_REG=abs(((copy_u8Duty*256)/100)-1);
    12ec:	8c e5       	ldi	r24, 0x5C	; 92
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	9d 83       	std	Y+5, r25	; 0x05
    12f2:	8c 83       	std	Y+4, r24	; 0x04
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	98 2f       	mov	r25, r24
    12fc:	88 27       	eor	r24, r24
    12fe:	24 e6       	ldi	r18, 0x64	; 100
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	b9 01       	movw	r22, r18
    1304:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <__divmodhi4>
    1308:	cb 01       	movw	r24, r22
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	9b 83       	std	Y+3, r25	; 0x03
    130e:	8a 83       	std	Y+2, r24	; 0x02
    1310:	ea 81       	ldd	r30, Y+2	; 0x02
    1312:	fb 81       	ldd	r31, Y+3	; 0x03
    1314:	ff 23       	and	r31, r31
    1316:	3c f4       	brge	.+14     	; 0x1326 <M_TIMER0_void_setFastPWM+0x4a>
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	9b 81       	ldd	r25, Y+3	; 0x03
    131c:	90 95       	com	r25
    131e:	81 95       	neg	r24
    1320:	9f 4f       	sbci	r25, 0xFF	; 255
    1322:	9b 83       	std	Y+3, r25	; 0x03
    1324:	8a 83       	std	Y+2, r24	; 0x02
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	ec 81       	ldd	r30, Y+4	; 0x04
    132a:	fd 81       	ldd	r31, Y+5	; 0x05
    132c:	80 83       	st	Z, r24
	 OCR0_REG=255-(((copy_u8Duty*256)/100)-1);
      #else
        #error("wrong insert mode")
      #endif
#endif
}
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <M_TIMER0_void_setPhasecorrectPWM>:
void M_TIMER0_void_setPhasecorrectPWM(u8 copy_u8Duty)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	0f 92       	push	r0
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	89 83       	std	Y+1, r24	; 0x01
	 OCR0_REG=(255-(copy_u8Duty*255)/100);
      #else
        #error("wrong insert mode")
      #endif
#endif
}
    134a:	0f 90       	pop	r0
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <__vector_11>:
ISR(TIMER0_OVF_vect)
{
    1352:	1f 92       	push	r1
    1354:	0f 92       	push	r0
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	0f 92       	push	r0
    135a:	11 24       	eor	r1, r1
    135c:	2f 93       	push	r18
    135e:	3f 93       	push	r19
    1360:	4f 93       	push	r20
    1362:	5f 93       	push	r21
    1364:	6f 93       	push	r22
    1366:	7f 93       	push	r23
    1368:	8f 93       	push	r24
    136a:	9f 93       	push	r25
    136c:	af 93       	push	r26
    136e:	bf 93       	push	r27
    1370:	ef 93       	push	r30
    1372:	ff 93       	push	r31
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
	static u32 Loc_Overflow_Count=0;
		Loc_Overflow_Count++;
    137c:	80 91 9e 01 	lds	r24, 0x019E
    1380:	90 91 9f 01 	lds	r25, 0x019F
    1384:	a0 91 a0 01 	lds	r26, 0x01A0
    1388:	b0 91 a1 01 	lds	r27, 0x01A1
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	a1 1d       	adc	r26, r1
    1390:	b1 1d       	adc	r27, r1
    1392:	80 93 9e 01 	sts	0x019E, r24
    1396:	90 93 9f 01 	sts	0x019F, r25
    139a:	a0 93 a0 01 	sts	0x01A0, r26
    139e:	b0 93 a1 01 	sts	0x01A1, r27
		if(Loc_Overflow_Count==NumberOfOverflows)
    13a2:	20 91 9e 01 	lds	r18, 0x019E
    13a6:	30 91 9f 01 	lds	r19, 0x019F
    13aa:	40 91 a0 01 	lds	r20, 0x01A0
    13ae:	50 91 a1 01 	lds	r21, 0x01A1
    13b2:	80 91 92 01 	lds	r24, 0x0192
    13b6:	90 91 93 01 	lds	r25, 0x0193
    13ba:	a0 91 94 01 	lds	r26, 0x0194
    13be:	b0 91 95 01 	lds	r27, 0x0195
    13c2:	28 17       	cp	r18, r24
    13c4:	39 07       	cpc	r19, r25
    13c6:	4a 07       	cpc	r20, r26
    13c8:	5b 07       	cpc	r21, r27
    13ca:	f9 f4       	brne	.+62     	; 0x140a <__vector_11+0xb8>
		{
			TCNT0_REG=256-NumberOfRemainingTicks;
    13cc:	e2 e5       	ldi	r30, 0x52	; 82
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 91 96 01 	lds	r24, 0x0196
    13d4:	90 91 97 01 	lds	r25, 0x0197
    13d8:	a0 91 98 01 	lds	r26, 0x0198
    13dc:	b0 91 99 01 	lds	r27, 0x0199
    13e0:	81 95       	neg	r24
    13e2:	80 83       	st	Z, r24
			Loc_Overflow_Count=0;
    13e4:	10 92 9e 01 	sts	0x019E, r1
    13e8:	10 92 9f 01 	sts	0x019F, r1
    13ec:	10 92 a0 01 	sts	0x01A0, r1
    13f0:	10 92 a1 01 	sts	0x01A1, r1
	       if(Arr_Call_Back[TIMER0_OVF_INT_ID]!=NULL)
    13f4:	80 91 9a 01 	lds	r24, 0x019A
    13f8:	90 91 9b 01 	lds	r25, 0x019B
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	29 f0       	breq	.+10     	; 0x140a <__vector_11+0xb8>
	         {
	            	Arr_Call_Back[TIMER0_OVF_INT_ID]();
    1400:	e0 91 9a 01 	lds	r30, 0x019A
    1404:	f0 91 9b 01 	lds	r31, 0x019B
    1408:	09 95       	icall
	         }
	}
}
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	ff 91       	pop	r31
    1410:	ef 91       	pop	r30
    1412:	bf 91       	pop	r27
    1414:	af 91       	pop	r26
    1416:	9f 91       	pop	r25
    1418:	8f 91       	pop	r24
    141a:	7f 91       	pop	r23
    141c:	6f 91       	pop	r22
    141e:	5f 91       	pop	r21
    1420:	4f 91       	pop	r20
    1422:	3f 91       	pop	r19
    1424:	2f 91       	pop	r18
    1426:	0f 90       	pop	r0
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	0f 90       	pop	r0
    142c:	1f 90       	pop	r1
    142e:	18 95       	reti

00001430 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    1430:	1f 92       	push	r1
    1432:	0f 92       	push	r0
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	0f 92       	push	r0
    1438:	11 24       	eor	r1, r1
    143a:	2f 93       	push	r18
    143c:	3f 93       	push	r19
    143e:	4f 93       	push	r20
    1440:	5f 93       	push	r21
    1442:	6f 93       	push	r22
    1444:	7f 93       	push	r23
    1446:	8f 93       	push	r24
    1448:	9f 93       	push	r25
    144a:	af 93       	push	r26
    144c:	bf 93       	push	r27
    144e:	ef 93       	push	r30
    1450:	ff 93       	push	r31
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62

	if(Arr_Call_Back[TIMER0_COMP_INT_ID]!=NULL)
    145a:	80 91 9c 01 	lds	r24, 0x019C
    145e:	90 91 9d 01 	lds	r25, 0x019D
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	29 f0       	breq	.+10     	; 0x1470 <__vector_10+0x40>
	{
		Arr_Call_Back[TIMER0_COMP_INT_ID]();
    1466:	e0 91 9c 01 	lds	r30, 0x019C
    146a:	f0 91 9d 01 	lds	r31, 0x019D
    146e:	09 95       	icall
	}

}
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	ff 91       	pop	r31
    1476:	ef 91       	pop	r30
    1478:	bf 91       	pop	r27
    147a:	af 91       	pop	r26
    147c:	9f 91       	pop	r25
    147e:	8f 91       	pop	r24
    1480:	7f 91       	pop	r23
    1482:	6f 91       	pop	r22
    1484:	5f 91       	pop	r21
    1486:	4f 91       	pop	r20
    1488:	3f 91       	pop	r19
    148a:	2f 91       	pop	r18
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	0f 90       	pop	r0
    1492:	1f 90       	pop	r1
    1494:	18 95       	reti

00001496 <M_GIE_void_enable>:
#include"GIE_priv.h"
#include"GIE_config.h"
#include"GIE_int.h"

void M_GIE_void_enable(void)
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
SET_BIT(SREG_REG,I_BIT);
    149e:	af e5       	ldi	r26, 0x5F	; 95
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	ef e5       	ldi	r30, 0x5F	; 95
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	80 68       	ori	r24, 0x80	; 128
    14aa:	8c 93       	st	X, r24
asm("SEI");
    14ac:	78 94       	sei

}
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <M_GIE_void_disable>:
void M_GIE_void_disable(void)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
	//CLR_BIT(SREG_REG ,I_BIt);
	asm("CLI");
    14bc:	f8 94       	cli
}
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <M_EXTI_void_Enable>:
#include"EXT1_int.h"

//arra of 3 pointers to function ( call back function )
static void (*Arr_CallBack[3]) (void)={NULL,NULL,NULL};
void M_EXTI_void_Enable(u8 copy_u8IntID,u8 copy_u8Sense)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <M_EXTI_void_Enable+0x6>
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <M_EXTI_void_Enable+0x8>
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8Sense>EXTI_TRIG_RAIS_EDGE &&copy_u8Sense<EXTI_TRIG_LOW_LEVEL)
	{
		return;
	}

	switch(copy_u8IntID)
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	3c 83       	std	Y+4, r19	; 0x04
    14dc:	2b 83       	std	Y+3, r18	; 0x03
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	9c 81       	ldd	r25, Y+4	; 0x04
    14e2:	86 30       	cpi	r24, 0x06	; 6
    14e4:	91 05       	cpc	r25, r1
    14e6:	59 f0       	breq	.+22     	; 0x14fe <M_EXTI_void_Enable+0x3a>
    14e8:	2b 81       	ldd	r18, Y+3	; 0x03
    14ea:	3c 81       	ldd	r19, Y+4	; 0x04
    14ec:	27 30       	cpi	r18, 0x07	; 7
    14ee:	31 05       	cpc	r19, r1
    14f0:	b1 f0       	breq	.+44     	; 0x151e <M_EXTI_void_Enable+0x5a>
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	9c 81       	ldd	r25, Y+4	; 0x04
    14f6:	85 30       	cpi	r24, 0x05	; 5
    14f8:	91 05       	cpc	r25, r1
    14fa:	41 f1       	breq	.+80     	; 0x154c <M_EXTI_void_Enable+0x88>
    14fc:	38 c0       	rjmp	.+112    	; 0x156e <M_EXTI_void_Enable+0xaa>
		{
		case EXTI_INT0_ID:
		 //step 1: apply mask
			 MCUCR_REG&=EXTI_INT0_TRIG_MASK ;
    14fe:	a5 e5       	ldi	r26, 0x55	; 85
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e5 e5       	ldi	r30, 0x55	; 85
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	8c 7f       	andi	r24, 0xFC	; 252
    150a:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= copy_u8Sense;
    150c:	a5 e5       	ldi	r26, 0x55	; 85
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e5 e5       	ldi	r30, 0x55	; 85
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	90 81       	ld	r25, Z
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	89 2b       	or	r24, r25
    151a:	8c 93       	st	X, r24
    151c:	28 c0       	rjmp	.+80     	; 0x156e <M_EXTI_void_Enable+0xaa>
		   break;
		case EXTI_INT1_ID:
			//step 1: apply mask
			 MCUCR_REG&=EXTI_INT1_TRIG_MASK ;
    151e:	a5 e5       	ldi	r26, 0x55	; 85
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e5 e5       	ldi	r30, 0x55	; 85
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	83 7f       	andi	r24, 0xF3	; 243
    152a:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= copy_u8Sense<<EXTI_INT1_TRIG_SHIFT;
    152c:	a5 e5       	ldi	r26, 0x55	; 85
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e5 e5       	ldi	r30, 0x55	; 85
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	28 2f       	mov	r18, r24
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	82 2b       	or	r24, r18
    1548:	8c 93       	st	X, r24
    154a:	11 c0       	rjmp	.+34     	; 0x156e <M_EXTI_void_Enable+0xaa>
			break;
		case EXTI_INT2_ID:
			//step 1: apply mask
			CLR_BIT(MCUSCR_REG,ISC2_BIT);
    154c:	a4 e5       	ldi	r26, 0x54	; 84
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e4 e5       	ldi	r30, 0x54	; 84
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	8f 7b       	andi	r24, 0xBF	; 191
    1558:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= GET_BIT(copy_u8Sense,0)<<EXTI_INT2_TRIG_SHIFT;
    155a:	a5 e5       	ldi	r26, 0x55	; 85
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e5 e5       	ldi	r30, 0x55	; 85
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	98 2f       	mov	r25, r24
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	80 74       	andi	r24, 0x40	; 64
    156a:	89 2b       	or	r24, r25
    156c:	8c 93       	st	X, r24
				break;
		}

	//step2 :enable PIE
	if (copy_u8IntID>=EXTI_INT2_ID&&copy_u8IntID<=EXTI_INT1_ID)
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	85 30       	cpi	r24, 0x05	; 5
    1572:	b0 f0       	brcs	.+44     	; 0x15a0 <M_EXTI_void_Enable+0xdc>
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	88 30       	cpi	r24, 0x08	; 8
    1578:	98 f4       	brcc	.+38     	; 0x15a0 <M_EXTI_void_Enable+0xdc>
		SET_BIT(GICR_REG,copy_u8IntID);
    157a:	ab e5       	ldi	r26, 0x5B	; 91
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	eb e5       	ldi	r30, 0x5B	; 91
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <M_EXTI_void_Enable+0xd4>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <M_EXTI_void_Enable+0xd0>
    159c:	84 2b       	or	r24, r20
    159e:	8c 93       	st	X, r24

}
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <M_EXTI_void_Disble>:
void M_EXTI_void_Disble(u8 copy_u8IntID)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <M_EXTI_void_Disble+0x6>
    15b4:	0f 92       	push	r0
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	89 83       	std	Y+1, r24	; 0x01
	//METHOD 1
	switch(copy_u8IntID)
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	3b 83       	std	Y+3, r19	; 0x03
    15c4:	2a 83       	std	Y+2, r18	; 0x02
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ca:	86 30       	cpi	r24, 0x06	; 6
    15cc:	91 05       	cpc	r25, r1
    15ce:	59 f0       	breq	.+22     	; 0x15e6 <M_EXTI_void_Disble+0x38>
    15d0:	2a 81       	ldd	r18, Y+2	; 0x02
    15d2:	3b 81       	ldd	r19, Y+3	; 0x03
    15d4:	27 30       	cpi	r18, 0x07	; 7
    15d6:	31 05       	cpc	r19, r1
    15d8:	71 f0       	breq	.+28     	; 0x15f6 <M_EXTI_void_Disble+0x48>
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	9b 81       	ldd	r25, Y+3	; 0x03
    15de:	85 30       	cpi	r24, 0x05	; 5
    15e0:	91 05       	cpc	r25, r1
    15e2:	89 f0       	breq	.+34     	; 0x1606 <M_EXTI_void_Disble+0x58>
    15e4:	17 c0       	rjmp	.+46     	; 0x1614 <M_EXTI_void_Disble+0x66>
	{
	case EXTI_INT0_ID:
	   CLR_BIT(GICR_REG,INT0_BIT);
    15e6:	ab e5       	ldi	r26, 0x5B	; 91
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	eb e5       	ldi	r30, 0x5B	; 91
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	8f 7b       	andi	r24, 0xBF	; 191
    15f2:	8c 93       	st	X, r24
    15f4:	0f c0       	rjmp	.+30     	; 0x1614 <M_EXTI_void_Disble+0x66>
	   break;
	case EXTI_INT1_ID:
		   CLR_BIT(GICR_REG,INT1_BIT);
    15f6:	ab e5       	ldi	r26, 0x5B	; 91
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	eb e5       	ldi	r30, 0x5B	; 91
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	8f 77       	andi	r24, 0x7F	; 127
    1602:	8c 93       	st	X, r24
    1604:	07 c0       	rjmp	.+14     	; 0x1614 <M_EXTI_void_Disble+0x66>
		   break;
	case EXTI_INT2_ID:
		   CLR_BIT(GICR_REG,INT2_BIT);
    1606:	ab e5       	ldi	r26, 0x5B	; 91
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	eb e5       	ldi	r30, 0x5B	; 91
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	8f 7d       	andi	r24, 0xDF	; 223
    1612:	8c 93       	st	X, r24
		   break;
	}
	//METHOD2
	if (copy_u8IntID>=EXTI_INT2_ID&&copy_u8IntID<=EXTI_INT1_ID)
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	85 30       	cpi	r24, 0x05	; 5
    1618:	b8 f0       	brcs	.+46     	; 0x1648 <M_EXTI_void_Disble+0x9a>
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	88 30       	cpi	r24, 0x08	; 8
    161e:	a0 f4       	brcc	.+40     	; 0x1648 <M_EXTI_void_Disble+0x9a>
	CLR_BIT(GICR_REG,copy_u8IntID);
    1620:	ab e5       	ldi	r26, 0x5B	; 91
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	eb e5       	ldi	r30, 0x5B	; 91
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	48 2f       	mov	r20, r24
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 2e       	mov	r0, r18
    1638:	02 c0       	rjmp	.+4      	; 0x163e <M_EXTI_void_Disble+0x90>
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	0a 94       	dec	r0
    1640:	e2 f7       	brpl	.-8      	; 0x163a <M_EXTI_void_Disble+0x8c>
    1642:	80 95       	com	r24
    1644:	84 23       	and	r24, r20
    1646:	8c 93       	st	X, r24
}
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <M_EXTI_void_setCallback>:
void M_EXTI_void_setCallback(void (*ptrfn)(void),u8 copy_u8IntID)
{
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	00 d0       	rcall	.+0      	; 0x165a <M_EXTI_void_setCallback+0x6>
    165a:	00 d0       	rcall	.+0      	; 0x165c <M_EXTI_void_setCallback+0x8>
    165c:	0f 92       	push	r0
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	9a 83       	std	Y+2, r25	; 0x02
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	6b 83       	std	Y+3, r22	; 0x03
	switch(copy_u8IntID)
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	3d 83       	std	Y+5, r19	; 0x05
    1670:	2c 83       	std	Y+4, r18	; 0x04
    1672:	8c 81       	ldd	r24, Y+4	; 0x04
    1674:	9d 81       	ldd	r25, Y+5	; 0x05
    1676:	86 30       	cpi	r24, 0x06	; 6
    1678:	91 05       	cpc	r25, r1
    167a:	59 f0       	breq	.+22     	; 0x1692 <M_EXTI_void_setCallback+0x3e>
    167c:	2c 81       	ldd	r18, Y+4	; 0x04
    167e:	3d 81       	ldd	r19, Y+5	; 0x05
    1680:	27 30       	cpi	r18, 0x07	; 7
    1682:	31 05       	cpc	r19, r1
    1684:	69 f0       	breq	.+26     	; 0x16a0 <M_EXTI_void_setCallback+0x4c>
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	9d 81       	ldd	r25, Y+5	; 0x05
    168a:	85 30       	cpi	r24, 0x05	; 5
    168c:	91 05       	cpc	r25, r1
    168e:	79 f0       	breq	.+30     	; 0x16ae <M_EXTI_void_setCallback+0x5a>
    1690:	14 c0       	rjmp	.+40     	; 0x16ba <M_EXTI_void_setCallback+0x66>
		{
		case EXTI_INT0_ID:
			Arr_CallBack[0]=ptrfn;
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	9a 81       	ldd	r25, Y+2	; 0x02
    1696:	90 93 a3 01 	sts	0x01A3, r25
    169a:	80 93 a2 01 	sts	0x01A2, r24
    169e:	0d c0       	rjmp	.+26     	; 0x16ba <M_EXTI_void_setCallback+0x66>
		   break;
		case EXTI_INT1_ID:
			Arr_CallBack[1]=ptrfn;
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	9a 81       	ldd	r25, Y+2	; 0x02
    16a4:	90 93 a5 01 	sts	0x01A5, r25
    16a8:	80 93 a4 01 	sts	0x01A4, r24
    16ac:	06 c0       	rjmp	.+12     	; 0x16ba <M_EXTI_void_setCallback+0x66>
			   break;
		case EXTI_INT2_ID:
			Arr_CallBack[2]=ptrfn;
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	9a 81       	ldd	r25, Y+2	; 0x02
    16b2:	90 93 a7 01 	sts	0x01A7, r25
    16b6:	80 93 a6 01 	sts	0x01A6, r24
			   break;
		}
}
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <__vector_1>:

ISR(INT0_vect)
{
    16ca:	1f 92       	push	r1
    16cc:	0f 92       	push	r0
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	0f 92       	push	r0
    16d2:	11 24       	eor	r1, r1
    16d4:	2f 93       	push	r18
    16d6:	3f 93       	push	r19
    16d8:	4f 93       	push	r20
    16da:	5f 93       	push	r21
    16dc:	6f 93       	push	r22
    16de:	7f 93       	push	r23
    16e0:	8f 93       	push	r24
    16e2:	9f 93       	push	r25
    16e4:	af 93       	push	r26
    16e6:	bf 93       	push	r27
    16e8:	ef 93       	push	r30
    16ea:	ff 93       	push	r31
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[0]!=NULL)
    16f4:	80 91 a2 01 	lds	r24, 0x01A2
    16f8:	90 91 a3 01 	lds	r25, 0x01A3
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	29 f0       	breq	.+10     	; 0x170a <__vector_1+0x40>
	{
		Arr_CallBack[0]();
    1700:	e0 91 a2 01 	lds	r30, 0x01A2
    1704:	f0 91 a3 01 	lds	r31, 0x01A3
    1708:	09 95       	icall
	}
}
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	ff 91       	pop	r31
    1710:	ef 91       	pop	r30
    1712:	bf 91       	pop	r27
    1714:	af 91       	pop	r26
    1716:	9f 91       	pop	r25
    1718:	8f 91       	pop	r24
    171a:	7f 91       	pop	r23
    171c:	6f 91       	pop	r22
    171e:	5f 91       	pop	r21
    1720:	4f 91       	pop	r20
    1722:	3f 91       	pop	r19
    1724:	2f 91       	pop	r18
    1726:	0f 90       	pop	r0
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	0f 90       	pop	r0
    172c:	1f 90       	pop	r1
    172e:	18 95       	reti

00001730 <__vector_2>:
ISR(INT1_vect)
{
    1730:	1f 92       	push	r1
    1732:	0f 92       	push	r0
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	0f 92       	push	r0
    1738:	11 24       	eor	r1, r1
    173a:	2f 93       	push	r18
    173c:	3f 93       	push	r19
    173e:	4f 93       	push	r20
    1740:	5f 93       	push	r21
    1742:	6f 93       	push	r22
    1744:	7f 93       	push	r23
    1746:	8f 93       	push	r24
    1748:	9f 93       	push	r25
    174a:	af 93       	push	r26
    174c:	bf 93       	push	r27
    174e:	ef 93       	push	r30
    1750:	ff 93       	push	r31
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[1]!=NULL)
    175a:	80 91 a4 01 	lds	r24, 0x01A4
    175e:	90 91 a5 01 	lds	r25, 0x01A5
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	29 f0       	breq	.+10     	; 0x1770 <__vector_2+0x40>
		{
			Arr_CallBack[1]();
    1766:	e0 91 a4 01 	lds	r30, 0x01A4
    176a:	f0 91 a5 01 	lds	r31, 0x01A5
    176e:	09 95       	icall
		}
}
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	ff 91       	pop	r31
    1776:	ef 91       	pop	r30
    1778:	bf 91       	pop	r27
    177a:	af 91       	pop	r26
    177c:	9f 91       	pop	r25
    177e:	8f 91       	pop	r24
    1780:	7f 91       	pop	r23
    1782:	6f 91       	pop	r22
    1784:	5f 91       	pop	r21
    1786:	4f 91       	pop	r20
    1788:	3f 91       	pop	r19
    178a:	2f 91       	pop	r18
    178c:	0f 90       	pop	r0
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	0f 90       	pop	r0
    1792:	1f 90       	pop	r1
    1794:	18 95       	reti

00001796 <__vector_3>:
ISR(INT2_vect)
{
    1796:	1f 92       	push	r1
    1798:	0f 92       	push	r0
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	0f 92       	push	r0
    179e:	11 24       	eor	r1, r1
    17a0:	2f 93       	push	r18
    17a2:	3f 93       	push	r19
    17a4:	4f 93       	push	r20
    17a6:	5f 93       	push	r21
    17a8:	6f 93       	push	r22
    17aa:	7f 93       	push	r23
    17ac:	8f 93       	push	r24
    17ae:	9f 93       	push	r25
    17b0:	af 93       	push	r26
    17b2:	bf 93       	push	r27
    17b4:	ef 93       	push	r30
    17b6:	ff 93       	push	r31
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[2]!=NULL)
    17c0:	80 91 a6 01 	lds	r24, 0x01A6
    17c4:	90 91 a7 01 	lds	r25, 0x01A7
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	29 f0       	breq	.+10     	; 0x17d6 <__vector_3+0x40>
		{
			Arr_CallBack[2]();
    17cc:	e0 91 a6 01 	lds	r30, 0x01A6
    17d0:	f0 91 a7 01 	lds	r31, 0x01A7
    17d4:	09 95       	icall
		}
}
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	ff 91       	pop	r31
    17dc:	ef 91       	pop	r30
    17de:	bf 91       	pop	r27
    17e0:	af 91       	pop	r26
    17e2:	9f 91       	pop	r25
    17e4:	8f 91       	pop	r24
    17e6:	7f 91       	pop	r23
    17e8:	6f 91       	pop	r22
    17ea:	5f 91       	pop	r21
    17ec:	4f 91       	pop	r20
    17ee:	3f 91       	pop	r19
    17f0:	2f 91       	pop	r18
    17f2:	0f 90       	pop	r0
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	0f 90       	pop	r0
    17f8:	1f 90       	pop	r1
    17fa:	18 95       	reti

000017fc <M_DIO_void_setPinDir>:
#include "DIO_pvt.h"
#include "DIO_config.h"
#include "DIO_int.h"

void M_DIO_void_setPinDir(u8 Port, PIN_T Pin, Dir_T DIRECTION)
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	2d 97       	sbiw	r28, 0x0d	; 13
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	6a 83       	std	Y+2, r22	; 0x02
    1814:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	3d 87       	std	Y+13, r19	; 0x0d
    181e:	2c 87       	std	Y+12, r18	; 0x0c
    1820:	8c 85       	ldd	r24, Y+12	; 0x0c
    1822:	9d 85       	ldd	r25, Y+13	; 0x0d
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	91 05       	cpc	r25, r1
    1828:	09 f4       	brne	.+2      	; 0x182c <M_DIO_void_setPinDir+0x30>
    182a:	4f c0       	rjmp	.+158    	; 0x18ca <M_DIO_void_setPinDir+0xce>
    182c:	2c 85       	ldd	r18, Y+12	; 0x0c
    182e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1830:	22 30       	cpi	r18, 0x02	; 2
    1832:	31 05       	cpc	r19, r1
    1834:	2c f4       	brge	.+10     	; 0x1840 <M_DIO_void_setPinDir+0x44>
    1836:	8c 85       	ldd	r24, Y+12	; 0x0c
    1838:	9d 85       	ldd	r25, Y+13	; 0x0d
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	71 f0       	breq	.+28     	; 0x185a <M_DIO_void_setPinDir+0x5e>
    183e:	ec c0       	rjmp	.+472    	; 0x1a18 <M_DIO_void_setPinDir+0x21c>
    1840:	2c 85       	ldd	r18, Y+12	; 0x0c
    1842:	3d 85       	ldd	r19, Y+13	; 0x0d
    1844:	22 30       	cpi	r18, 0x02	; 2
    1846:	31 05       	cpc	r19, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <M_DIO_void_setPinDir+0x50>
    184a:	77 c0       	rjmp	.+238    	; 0x193a <M_DIO_void_setPinDir+0x13e>
    184c:	8c 85       	ldd	r24, Y+12	; 0x0c
    184e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1850:	83 30       	cpi	r24, 0x03	; 3
    1852:	91 05       	cpc	r25, r1
    1854:	09 f4       	brne	.+2      	; 0x1858 <M_DIO_void_setPinDir+0x5c>
    1856:	a9 c0       	rjmp	.+338    	; 0x19aa <M_DIO_void_setPinDir+0x1ae>
    1858:	df c0       	rjmp	.+446    	; 0x1a18 <M_DIO_void_setPinDir+0x21c>
	{
	case PORTA_ID :
		switch (DIRECTION)
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	3b 87       	std	Y+11, r19	; 0x0b
    1862:	2a 87       	std	Y+10, r18	; 0x0a
    1864:	8a 85       	ldd	r24, Y+10	; 0x0a
    1866:	9b 85       	ldd	r25, Y+11	; 0x0b
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	31 f0       	breq	.+12     	; 0x1878 <M_DIO_void_setPinDir+0x7c>
    186c:	2a 85       	ldd	r18, Y+10	; 0x0a
    186e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1870:	21 30       	cpi	r18, 0x01	; 1
    1872:	31 05       	cpc	r19, r1
    1874:	b1 f0       	breq	.+44     	; 0x18a2 <M_DIO_void_setPinDir+0xa6>
    1876:	d0 c0       	rjmp	.+416    	; 0x1a18 <M_DIO_void_setPinDir+0x21c>
		{
		case IN:
			 CLR_BIT(DDRA,Pin);
    1878:	aa e3       	ldi	r26, 0x3A	; 58
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	ea e3       	ldi	r30, 0x3A	; 58
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	48 2f       	mov	r20, r24
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	02 2e       	mov	r0, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <M_DIO_void_setPinDir+0x9a>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	0a 94       	dec	r0
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <M_DIO_void_setPinDir+0x96>
    189a:	80 95       	com	r24
    189c:	84 23       	and	r24, r20
    189e:	8c 93       	st	X, r24
    18a0:	bb c0       	rjmp	.+374    	; 0x1a18 <M_DIO_void_setPinDir+0x21c>
			 break;
		case OUT:
			SET_BIT(DDRA,Pin);
    18a2:	aa e3       	ldi	r26, 0x3A	; 58
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	ea e3       	ldi	r30, 0x3A	; 58
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	48 2f       	mov	r20, r24
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 2e       	mov	r0, r18
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <M_DIO_void_setPinDir+0xc4>
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	0a 94       	dec	r0
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <M_DIO_void_setPinDir+0xc0>
    18c4:	84 2b       	or	r24, r20
    18c6:	8c 93       	st	X, r24
    18c8:	a7 c0       	rjmp	.+334    	; 0x1a18 <M_DIO_void_setPinDir+0x21c>
			break;
		}
		break;
	case PORTB_ID :
				switch (DIRECTION)
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	39 87       	std	Y+9, r19	; 0x09
    18d2:	28 87       	std	Y+8, r18	; 0x08
    18d4:	88 85       	ldd	r24, Y+8	; 0x08
    18d6:	99 85       	ldd	r25, Y+9	; 0x09
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	31 f0       	breq	.+12     	; 0x18e8 <M_DIO_void_setPinDir+0xec>
    18dc:	28 85       	ldd	r18, Y+8	; 0x08
    18de:	39 85       	ldd	r19, Y+9	; 0x09
    18e0:	21 30       	cpi	r18, 0x01	; 1
    18e2:	31 05       	cpc	r19, r1
    18e4:	b1 f0       	breq	.+44     	; 0x1912 <M_DIO_void_setPinDir+0x116>
    18e6:	98 c0       	rjmp	.+304    	; 0x1a18 <M_DIO_void_setPinDir+0x21c>
				{
				case IN:
					 CLR_BIT(DDRB,Pin);
    18e8:	a7 e3       	ldi	r26, 0x37	; 55
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e7 e3       	ldi	r30, 0x37	; 55
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	48 2f       	mov	r20, r24
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 2e       	mov	r0, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <M_DIO_void_setPinDir+0x10a>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	0a 94       	dec	r0
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <M_DIO_void_setPinDir+0x106>
    190a:	80 95       	com	r24
    190c:	84 23       	and	r24, r20
    190e:	8c 93       	st	X, r24
    1910:	83 c0       	rjmp	.+262    	; 0x1a18 <M_DIO_void_setPinDir+0x21c>
					 break;
				case OUT:
					SET_BIT(DDRB,Pin);
    1912:	a7 e3       	ldi	r26, 0x37	; 55
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e7 e3       	ldi	r30, 0x37	; 55
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	48 2f       	mov	r20, r24
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 2e       	mov	r0, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <M_DIO_void_setPinDir+0x134>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <M_DIO_void_setPinDir+0x130>
    1934:	84 2b       	or	r24, r20
    1936:	8c 93       	st	X, r24
    1938:	6f c0       	rjmp	.+222    	; 0x1a18 <M_DIO_void_setPinDir+0x21c>
					break;
				}
			break;
	case PORTC_ID:
				switch (DIRECTION)
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	3f 83       	std	Y+7, r19	; 0x07
    1942:	2e 83       	std	Y+6, r18	; 0x06
    1944:	8e 81       	ldd	r24, Y+6	; 0x06
    1946:	9f 81       	ldd	r25, Y+7	; 0x07
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	31 f0       	breq	.+12     	; 0x1958 <M_DIO_void_setPinDir+0x15c>
    194c:	2e 81       	ldd	r18, Y+6	; 0x06
    194e:	3f 81       	ldd	r19, Y+7	; 0x07
    1950:	21 30       	cpi	r18, 0x01	; 1
    1952:	31 05       	cpc	r19, r1
    1954:	b1 f0       	breq	.+44     	; 0x1982 <M_DIO_void_setPinDir+0x186>
    1956:	60 c0       	rjmp	.+192    	; 0x1a18 <M_DIO_void_setPinDir+0x21c>
				{
				case IN:
						 CLR_BIT(DDRC,Pin);
    1958:	a4 e3       	ldi	r26, 0x34	; 52
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e4 e3       	ldi	r30, 0x34	; 52
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	48 2f       	mov	r20, r24
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 2e       	mov	r0, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <M_DIO_void_setPinDir+0x17a>
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	0a 94       	dec	r0
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <M_DIO_void_setPinDir+0x176>
    197a:	80 95       	com	r24
    197c:	84 23       	and	r24, r20
    197e:	8c 93       	st	X, r24
    1980:	4b c0       	rjmp	.+150    	; 0x1a18 <M_DIO_void_setPinDir+0x21c>
						 break;
				case OUT:
						 SET_BIT(DDRC,Pin);
    1982:	a4 e3       	ldi	r26, 0x34	; 52
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e4 e3       	ldi	r30, 0x34	; 52
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	48 2f       	mov	r20, r24
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	02 2e       	mov	r0, r18
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <M_DIO_void_setPinDir+0x1a4>
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	0a 94       	dec	r0
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <M_DIO_void_setPinDir+0x1a0>
    19a4:	84 2b       	or	r24, r20
    19a6:	8c 93       	st	X, r24
    19a8:	37 c0       	rjmp	.+110    	; 0x1a18 <M_DIO_void_setPinDir+0x21c>
						 break;
					}
				break;
	case PORTD_ID :
				 switch (DIRECTION)
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	3d 83       	std	Y+5, r19	; 0x05
    19b2:	2c 83       	std	Y+4, r18	; 0x04
    19b4:	8c 81       	ldd	r24, Y+4	; 0x04
    19b6:	9d 81       	ldd	r25, Y+5	; 0x05
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	31 f0       	breq	.+12     	; 0x19c8 <M_DIO_void_setPinDir+0x1cc>
    19bc:	2c 81       	ldd	r18, Y+4	; 0x04
    19be:	3d 81       	ldd	r19, Y+5	; 0x05
    19c0:	21 30       	cpi	r18, 0x01	; 1
    19c2:	31 05       	cpc	r19, r1
    19c4:	b1 f0       	breq	.+44     	; 0x19f2 <M_DIO_void_setPinDir+0x1f6>
    19c6:	28 c0       	rjmp	.+80     	; 0x1a18 <M_DIO_void_setPinDir+0x21c>
				 {
					case IN:
						 CLR_BIT(DDRD,Pin);
    19c8:	a1 e3       	ldi	r26, 0x31	; 49
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e1 e3       	ldi	r30, 0x31	; 49
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	48 2f       	mov	r20, r24
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	02 2e       	mov	r0, r18
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <M_DIO_void_setPinDir+0x1ea>
    19e2:	88 0f       	add	r24, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	0a 94       	dec	r0
    19e8:	e2 f7       	brpl	.-8      	; 0x19e2 <M_DIO_void_setPinDir+0x1e6>
    19ea:	80 95       	com	r24
    19ec:	84 23       	and	r24, r20
    19ee:	8c 93       	st	X, r24
    19f0:	13 c0       	rjmp	.+38     	; 0x1a18 <M_DIO_void_setPinDir+0x21c>
						 break;
					case OUT:
						SET_BIT(DDRD,Pin);
    19f2:	a1 e3       	ldi	r26, 0x31	; 49
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e1 e3       	ldi	r30, 0x31	; 49
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 2e       	mov	r0, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <M_DIO_void_setPinDir+0x214>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	0a 94       	dec	r0
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <M_DIO_void_setPinDir+0x210>
    1a14:	84 2b       	or	r24, r20
    1a16:	8c 93       	st	X, r24
						 break;
				}
				break;
	}
}
    1a18:	2d 96       	adiw	r28, 0x0d	; 13
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	cd bf       	out	0x3d, r28	; 61
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <M_DIO_void_setPinValue>:
void M_DIO_void_setPinValue(u8 Port, u8 Pin, VALUE_T value)
{
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	2d 97       	sbiw	r28, 0x0d	; 13
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	f8 94       	cli
    1a38:	de bf       	out	0x3e, r29	; 62
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	6a 83       	std	Y+2, r22	; 0x02
    1a42:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	3d 87       	std	Y+13, r19	; 0x0d
    1a4c:	2c 87       	std	Y+12, r18	; 0x0c
    1a4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a50:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	91 05       	cpc	r25, r1
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <M_DIO_void_setPinValue+0x30>
    1a58:	4f c0       	rjmp	.+158    	; 0x1af8 <M_DIO_void_setPinValue+0xce>
    1a5a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a5c:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a5e:	22 30       	cpi	r18, 0x02	; 2
    1a60:	31 05       	cpc	r19, r1
    1a62:	2c f4       	brge	.+10     	; 0x1a6e <M_DIO_void_setPinValue+0x44>
    1a64:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a66:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	71 f0       	breq	.+28     	; 0x1a88 <M_DIO_void_setPinValue+0x5e>
    1a6c:	ec c0       	rjmp	.+472    	; 0x1c46 <M_DIO_void_setPinValue+0x21c>
    1a6e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a70:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a72:	22 30       	cpi	r18, 0x02	; 2
    1a74:	31 05       	cpc	r19, r1
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <M_DIO_void_setPinValue+0x50>
    1a78:	77 c0       	rjmp	.+238    	; 0x1b68 <M_DIO_void_setPinValue+0x13e>
    1a7a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a7c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a7e:	83 30       	cpi	r24, 0x03	; 3
    1a80:	91 05       	cpc	r25, r1
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <M_DIO_void_setPinValue+0x5c>
    1a84:	a9 c0       	rjmp	.+338    	; 0x1bd8 <M_DIO_void_setPinValue+0x1ae>
    1a86:	df c0       	rjmp	.+446    	; 0x1c46 <M_DIO_void_setPinValue+0x21c>
		{
		case PORTA_ID :
			switch (value)
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	3b 87       	std	Y+11, r19	; 0x0b
    1a90:	2a 87       	std	Y+10, r18	; 0x0a
    1a92:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a94:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	31 f0       	breq	.+12     	; 0x1aa6 <M_DIO_void_setPinValue+0x7c>
    1a9a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a9c:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a9e:	21 30       	cpi	r18, 0x01	; 1
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	b1 f0       	breq	.+44     	; 0x1ad0 <M_DIO_void_setPinValue+0xa6>
    1aa4:	d0 c0       	rjmp	.+416    	; 0x1c46 <M_DIO_void_setPinValue+0x21c>
			{
			case LOW:
				 CLR_BIT(PORTA_REG,Pin);
    1aa6:	ab e3       	ldi	r26, 0x3B	; 59
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	eb e3       	ldi	r30, 0x3B	; 59
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	48 2f       	mov	r20, r24
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	02 2e       	mov	r0, r18
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <M_DIO_void_setPinValue+0x9a>
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	0a 94       	dec	r0
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <M_DIO_void_setPinValue+0x96>
    1ac8:	80 95       	com	r24
    1aca:	84 23       	and	r24, r20
    1acc:	8c 93       	st	X, r24
    1ace:	bb c0       	rjmp	.+374    	; 0x1c46 <M_DIO_void_setPinValue+0x21c>
				 break;
			case HIGH:
				SET_BIT(PORTA_REG,Pin);
    1ad0:	ab e3       	ldi	r26, 0x3B	; 59
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	eb e3       	ldi	r30, 0x3B	; 59
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	48 2f       	mov	r20, r24
    1adc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	02 2e       	mov	r0, r18
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <M_DIO_void_setPinValue+0xc4>
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	0a 94       	dec	r0
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <M_DIO_void_setPinValue+0xc0>
    1af2:	84 2b       	or	r24, r20
    1af4:	8c 93       	st	X, r24
    1af6:	a7 c0       	rjmp	.+334    	; 0x1c46 <M_DIO_void_setPinValue+0x21c>
				break;
		   }
			break;
		case PORTB_ID :
			switch (value)
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	39 87       	std	Y+9, r19	; 0x09
    1b00:	28 87       	std	Y+8, r18	; 0x08
    1b02:	88 85       	ldd	r24, Y+8	; 0x08
    1b04:	99 85       	ldd	r25, Y+9	; 0x09
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	31 f0       	breq	.+12     	; 0x1b16 <M_DIO_void_setPinValue+0xec>
    1b0a:	28 85       	ldd	r18, Y+8	; 0x08
    1b0c:	39 85       	ldd	r19, Y+9	; 0x09
    1b0e:	21 30       	cpi	r18, 0x01	; 1
    1b10:	31 05       	cpc	r19, r1
    1b12:	b1 f0       	breq	.+44     	; 0x1b40 <M_DIO_void_setPinValue+0x116>
    1b14:	98 c0       	rjmp	.+304    	; 0x1c46 <M_DIO_void_setPinValue+0x21c>
			{
			case LOW:
				 CLR_BIT(PORTB_REG,Pin);
    1b16:	a8 e3       	ldi	r26, 0x38	; 56
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e8 e3       	ldi	r30, 0x38	; 56
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	48 2f       	mov	r20, r24
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	02 2e       	mov	r0, r18
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <M_DIO_void_setPinValue+0x10a>
    1b30:	88 0f       	add	r24, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	0a 94       	dec	r0
    1b36:	e2 f7       	brpl	.-8      	; 0x1b30 <M_DIO_void_setPinValue+0x106>
    1b38:	80 95       	com	r24
    1b3a:	84 23       	and	r24, r20
    1b3c:	8c 93       	st	X, r24
    1b3e:	83 c0       	rjmp	.+262    	; 0x1c46 <M_DIO_void_setPinValue+0x21c>
				 break;
			case HIGH:
				 SET_BIT(PORTB_REG,Pin);
    1b40:	a8 e3       	ldi	r26, 0x38	; 56
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e8 e3       	ldi	r30, 0x38	; 56
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	48 2f       	mov	r20, r24
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	02 2e       	mov	r0, r18
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <M_DIO_void_setPinValue+0x134>
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	0a 94       	dec	r0
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <M_DIO_void_setPinValue+0x130>
    1b62:	84 2b       	or	r24, r20
    1b64:	8c 93       	st	X, r24
    1b66:	6f c0       	rjmp	.+222    	; 0x1c46 <M_DIO_void_setPinValue+0x21c>
				 break;
			}
			break;
		case PORTC_ID:
			switch (value)
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	3f 83       	std	Y+7, r19	; 0x07
    1b70:	2e 83       	std	Y+6, r18	; 0x06
    1b72:	8e 81       	ldd	r24, Y+6	; 0x06
    1b74:	9f 81       	ldd	r25, Y+7	; 0x07
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	31 f0       	breq	.+12     	; 0x1b86 <M_DIO_void_setPinValue+0x15c>
    1b7a:	2e 81       	ldd	r18, Y+6	; 0x06
    1b7c:	3f 81       	ldd	r19, Y+7	; 0x07
    1b7e:	21 30       	cpi	r18, 0x01	; 1
    1b80:	31 05       	cpc	r19, r1
    1b82:	b1 f0       	breq	.+44     	; 0x1bb0 <M_DIO_void_setPinValue+0x186>
    1b84:	60 c0       	rjmp	.+192    	; 0x1c46 <M_DIO_void_setPinValue+0x21c>
			{
			case LOW:
				 CLR_BIT(PORTC_REG,Pin);
    1b86:	a5 e3       	ldi	r26, 0x35	; 53
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e5 e3       	ldi	r30, 0x35	; 53
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	48 2f       	mov	r20, r24
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	02 2e       	mov	r0, r18
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <M_DIO_void_setPinValue+0x17a>
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	0a 94       	dec	r0
    1ba6:	e2 f7       	brpl	.-8      	; 0x1ba0 <M_DIO_void_setPinValue+0x176>
    1ba8:	80 95       	com	r24
    1baa:	84 23       	and	r24, r20
    1bac:	8c 93       	st	X, r24
    1bae:	4b c0       	rjmp	.+150    	; 0x1c46 <M_DIO_void_setPinValue+0x21c>
				break;
			case HIGH:
				 SET_BIT(PORTC_REG,Pin);
    1bb0:	a5 e3       	ldi	r26, 0x35	; 53
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e5 e3       	ldi	r30, 0x35	; 53
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	48 2f       	mov	r20, r24
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	02 2e       	mov	r0, r18
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <M_DIO_void_setPinValue+0x1a4>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	0a 94       	dec	r0
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <M_DIO_void_setPinValue+0x1a0>
    1bd2:	84 2b       	or	r24, r20
    1bd4:	8c 93       	st	X, r24
    1bd6:	37 c0       	rjmp	.+110    	; 0x1c46 <M_DIO_void_setPinValue+0x21c>
				break;
			}
			break;
		case PORTD_ID :
			 switch (value)
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	3d 83       	std	Y+5, r19	; 0x05
    1be0:	2c 83       	std	Y+4, r18	; 0x04
    1be2:	8c 81       	ldd	r24, Y+4	; 0x04
    1be4:	9d 81       	ldd	r25, Y+5	; 0x05
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	31 f0       	breq	.+12     	; 0x1bf6 <M_DIO_void_setPinValue+0x1cc>
    1bea:	2c 81       	ldd	r18, Y+4	; 0x04
    1bec:	3d 81       	ldd	r19, Y+5	; 0x05
    1bee:	21 30       	cpi	r18, 0x01	; 1
    1bf0:	31 05       	cpc	r19, r1
    1bf2:	b1 f0       	breq	.+44     	; 0x1c20 <M_DIO_void_setPinValue+0x1f6>
    1bf4:	28 c0       	rjmp	.+80     	; 0x1c46 <M_DIO_void_setPinValue+0x21c>
			 {
				case LOW:
				   CLR_BIT(PORTD_REG,Pin);
    1bf6:	a2 e3       	ldi	r26, 0x32	; 50
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e2 e3       	ldi	r30, 0x32	; 50
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	48 2f       	mov	r20, r24
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	28 2f       	mov	r18, r24
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	02 2e       	mov	r0, r18
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <M_DIO_void_setPinValue+0x1ea>
    1c10:	88 0f       	add	r24, r24
    1c12:	99 1f       	adc	r25, r25
    1c14:	0a 94       	dec	r0
    1c16:	e2 f7       	brpl	.-8      	; 0x1c10 <M_DIO_void_setPinValue+0x1e6>
    1c18:	80 95       	com	r24
    1c1a:	84 23       	and	r24, r20
    1c1c:	8c 93       	st	X, r24
    1c1e:	13 c0       	rjmp	.+38     	; 0x1c46 <M_DIO_void_setPinValue+0x21c>
					break;
				case HIGH:
					SET_BIT(PORTD_REG,Pin);
    1c20:	a2 e3       	ldi	r26, 0x32	; 50
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e2 e3       	ldi	r30, 0x32	; 50
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	48 2f       	mov	r20, r24
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	02 2e       	mov	r0, r18
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <M_DIO_void_setPinValue+0x214>
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	0a 94       	dec	r0
    1c40:	e2 f7       	brpl	.-8      	; 0x1c3a <M_DIO_void_setPinValue+0x210>
    1c42:	84 2b       	or	r24, r20
    1c44:	8c 93       	st	X, r24
					break;
			 }
			 break;
		}
}
    1c46:	2d 96       	adiw	r28, 0x0d	; 13
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <M_DIO_void_getPinValue>:
void M_DIO_void_getPinValue(u8 Port, u8 Pin, u8 *pvalue)
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <M_DIO_void_getPinValue+0x6>
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <M_DIO_void_getPinValue+0x8>
    1c60:	00 d0       	rcall	.+0      	; 0x1c62 <M_DIO_void_getPinValue+0xa>
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	6a 83       	std	Y+2, r22	; 0x02
    1c6a:	5c 83       	std	Y+4, r21	; 0x04
    1c6c:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port){
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	3e 83       	std	Y+6, r19	; 0x06
    1c76:	2d 83       	std	Y+5, r18	; 0x05
    1c78:	4d 81       	ldd	r20, Y+5	; 0x05
    1c7a:	5e 81       	ldd	r21, Y+6	; 0x06
    1c7c:	41 30       	cpi	r20, 0x01	; 1
    1c7e:	51 05       	cpc	r21, r1
    1c80:	59 f1       	breq	.+86     	; 0x1cd8 <M_DIO_void_getPinValue+0x80>
    1c82:	8d 81       	ldd	r24, Y+5	; 0x05
    1c84:	9e 81       	ldd	r25, Y+6	; 0x06
    1c86:	82 30       	cpi	r24, 0x02	; 2
    1c88:	91 05       	cpc	r25, r1
    1c8a:	34 f4       	brge	.+12     	; 0x1c98 <M_DIO_void_getPinValue+0x40>
    1c8c:	2d 81       	ldd	r18, Y+5	; 0x05
    1c8e:	3e 81       	ldd	r19, Y+6	; 0x06
    1c90:	21 15       	cp	r18, r1
    1c92:	31 05       	cpc	r19, r1
    1c94:	69 f0       	breq	.+26     	; 0x1cb0 <M_DIO_void_getPinValue+0x58>
    1c96:	5b c0       	rjmp	.+182    	; 0x1d4e <M_DIO_void_getPinValue+0xf6>
    1c98:	4d 81       	ldd	r20, Y+5	; 0x05
    1c9a:	5e 81       	ldd	r21, Y+6	; 0x06
    1c9c:	42 30       	cpi	r20, 0x02	; 2
    1c9e:	51 05       	cpc	r21, r1
    1ca0:	79 f1       	breq	.+94     	; 0x1d00 <M_DIO_void_getPinValue+0xa8>
    1ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca6:	83 30       	cpi	r24, 0x03	; 3
    1ca8:	91 05       	cpc	r25, r1
    1caa:	09 f4       	brne	.+2      	; 0x1cae <M_DIO_void_getPinValue+0x56>
    1cac:	3d c0       	rjmp	.+122    	; 0x1d28 <M_DIO_void_getPinValue+0xd0>
    1cae:	4f c0       	rjmp	.+158    	; 0x1d4e <M_DIO_void_getPinValue+0xf6>
	case PORTA_ID:
		*pvalue = GET_BIT(PINA_REG,Pin);
    1cb0:	e9 e3       	ldi	r30, 0x39	; 57
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	88 2f       	mov	r24, r24
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	a9 01       	movw	r20, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <M_DIO_void_getPinValue+0x70>
    1cc4:	55 95       	asr	r21
    1cc6:	47 95       	ror	r20
    1cc8:	8a 95       	dec	r24
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <M_DIO_void_getPinValue+0x6c>
    1ccc:	ca 01       	movw	r24, r20
    1cce:	81 70       	andi	r24, 0x01	; 1
    1cd0:	eb 81       	ldd	r30, Y+3	; 0x03
    1cd2:	fc 81       	ldd	r31, Y+4	; 0x04
    1cd4:	80 83       	st	Z, r24
    1cd6:	3b c0       	rjmp	.+118    	; 0x1d4e <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTB_ID:
		*pvalue=GET_BIT(PINB_REG,Pin);
    1cd8:	e6 e3       	ldi	r30, 0x36	; 54
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	88 2f       	mov	r24, r24
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	a9 01       	movw	r20, r18
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <M_DIO_void_getPinValue+0x98>
    1cec:	55 95       	asr	r21
    1cee:	47 95       	ror	r20
    1cf0:	8a 95       	dec	r24
    1cf2:	e2 f7       	brpl	.-8      	; 0x1cec <M_DIO_void_getPinValue+0x94>
    1cf4:	ca 01       	movw	r24, r20
    1cf6:	81 70       	andi	r24, 0x01	; 1
    1cf8:	eb 81       	ldd	r30, Y+3	; 0x03
    1cfa:	fc 81       	ldd	r31, Y+4	; 0x04
    1cfc:	80 83       	st	Z, r24
    1cfe:	27 c0       	rjmp	.+78     	; 0x1d4e <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTC_ID:
		*pvalue=GET_BIT(PINC_REG,Pin);
    1d00:	e3 e3       	ldi	r30, 0x33	; 51
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	88 2f       	mov	r24, r24
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	a9 01       	movw	r20, r18
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <M_DIO_void_getPinValue+0xc0>
    1d14:	55 95       	asr	r21
    1d16:	47 95       	ror	r20
    1d18:	8a 95       	dec	r24
    1d1a:	e2 f7       	brpl	.-8      	; 0x1d14 <M_DIO_void_getPinValue+0xbc>
    1d1c:	ca 01       	movw	r24, r20
    1d1e:	81 70       	andi	r24, 0x01	; 1
    1d20:	eb 81       	ldd	r30, Y+3	; 0x03
    1d22:	fc 81       	ldd	r31, Y+4	; 0x04
    1d24:	80 83       	st	Z, r24
    1d26:	13 c0       	rjmp	.+38     	; 0x1d4e <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTD_ID:
		*pvalue=GET_BIT(PIND_REG,Pin);
    1d28:	e0 e3       	ldi	r30, 0x30	; 48
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	28 2f       	mov	r18, r24
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	88 2f       	mov	r24, r24
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	a9 01       	movw	r20, r18
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <M_DIO_void_getPinValue+0xe8>
    1d3c:	55 95       	asr	r21
    1d3e:	47 95       	ror	r20
    1d40:	8a 95       	dec	r24
    1d42:	e2 f7       	brpl	.-8      	; 0x1d3c <M_DIO_void_getPinValue+0xe4>
    1d44:	ca 01       	movw	r24, r20
    1d46:	81 70       	andi	r24, 0x01	; 1
    1d48:	eb 81       	ldd	r30, Y+3	; 0x03
    1d4a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d4c:	80 83       	st	Z, r24
		break;
	}
}
    1d4e:	26 96       	adiw	r28, 0x06	; 6
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	de bf       	out	0x3e, r29	; 62
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	cd bf       	out	0x3d, r28	; 61
    1d5a:	cf 91       	pop	r28
    1d5c:	df 91       	pop	r29
    1d5e:	08 95       	ret

00001d60 <M_DIO_void_TogPinValue>:
void M_DIO_void_TogPinValue(u8 Port, u8 Pin)
{
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <M_DIO_void_TogPinValue+0x6>
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <M_DIO_void_TogPinValue+0x8>
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	6a 83       	std	Y+2, r22	; 0x02
	switch (Port){
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	3c 83       	std	Y+4, r19	; 0x04
    1d78:	2b 83       	std	Y+3, r18	; 0x03
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	91 05       	cpc	r25, r1
    1d82:	49 f1       	breq	.+82     	; 0x1dd6 <M_DIO_void_TogPinValue+0x76>
    1d84:	2b 81       	ldd	r18, Y+3	; 0x03
    1d86:	3c 81       	ldd	r19, Y+4	; 0x04
    1d88:	22 30       	cpi	r18, 0x02	; 2
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	2c f4       	brge	.+10     	; 0x1d98 <M_DIO_void_TogPinValue+0x38>
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	9c 81       	ldd	r25, Y+4	; 0x04
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	61 f0       	breq	.+24     	; 0x1dae <M_DIO_void_TogPinValue+0x4e>
    1d96:	5a c0       	rjmp	.+180    	; 0x1e4c <M_DIO_void_TogPinValue+0xec>
    1d98:	2b 81       	ldd	r18, Y+3	; 0x03
    1d9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9c:	22 30       	cpi	r18, 0x02	; 2
    1d9e:	31 05       	cpc	r19, r1
    1da0:	71 f1       	breq	.+92     	; 0x1dfe <M_DIO_void_TogPinValue+0x9e>
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	83 30       	cpi	r24, 0x03	; 3
    1da8:	91 05       	cpc	r25, r1
    1daa:	e9 f1       	breq	.+122    	; 0x1e26 <M_DIO_void_TogPinValue+0xc6>
    1dac:	4f c0       	rjmp	.+158    	; 0x1e4c <M_DIO_void_TogPinValue+0xec>
		case PORTA_ID:
			TOG_BIT(PORTA_REG,Pin);
    1dae:	ab e3       	ldi	r26, 0x3B	; 59
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	eb e3       	ldi	r30, 0x3B	; 59
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	48 2f       	mov	r20, r24
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	02 2e       	mov	r0, r18
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <M_DIO_void_TogPinValue+0x6c>
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	0a 94       	dec	r0
    1dce:	e2 f7       	brpl	.-8      	; 0x1dc8 <M_DIO_void_TogPinValue+0x68>
    1dd0:	84 27       	eor	r24, r20
    1dd2:	8c 93       	st	X, r24
    1dd4:	3b c0       	rjmp	.+118    	; 0x1e4c <M_DIO_void_TogPinValue+0xec>
			break;
		case PORTB_ID:
			TOG_BIT(PORTB_REG,Pin);
    1dd6:	a8 e3       	ldi	r26, 0x38	; 56
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e8 e3       	ldi	r30, 0x38	; 56
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	48 2f       	mov	r20, r24
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	02 2e       	mov	r0, r18
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <M_DIO_void_TogPinValue+0x94>
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	0a 94       	dec	r0
    1df6:	e2 f7       	brpl	.-8      	; 0x1df0 <M_DIO_void_TogPinValue+0x90>
    1df8:	84 27       	eor	r24, r20
    1dfa:	8c 93       	st	X, r24
    1dfc:	27 c0       	rjmp	.+78     	; 0x1e4c <M_DIO_void_TogPinValue+0xec>
			break;
		case PORTC_ID:
			TOG_BIT(PORTC_REG,Pin);
    1dfe:	a5 e3       	ldi	r26, 0x35	; 53
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e5 e3       	ldi	r30, 0x35	; 53
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	48 2f       	mov	r20, r24
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	02 2e       	mov	r0, r18
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <M_DIO_void_TogPinValue+0xbc>
    1e18:	88 0f       	add	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	0a 94       	dec	r0
    1e1e:	e2 f7       	brpl	.-8      	; 0x1e18 <M_DIO_void_TogPinValue+0xb8>
    1e20:	84 27       	eor	r24, r20
    1e22:	8c 93       	st	X, r24
    1e24:	13 c0       	rjmp	.+38     	; 0x1e4c <M_DIO_void_TogPinValue+0xec>
			break;
		case PORTD_ID:
			TOG_BIT(PORTD_REG,Pin);
    1e26:	a2 e3       	ldi	r26, 0x32	; 50
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e2 e3       	ldi	r30, 0x32	; 50
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	48 2f       	mov	r20, r24
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	02 2e       	mov	r0, r18
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <M_DIO_void_TogPinValue+0xe4>
    1e40:	88 0f       	add	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	0a 94       	dec	r0
    1e46:	e2 f7       	brpl	.-8      	; 0x1e40 <M_DIO_void_TogPinValue+0xe0>
    1e48:	84 27       	eor	r24, r20
    1e4a:	8c 93       	st	X, r24
			break;
		}


}
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <H_SSD_void_init>:



//u8 arr[]={0x3f,};
void H_SSD_void_init(void)
{
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
	M_DIO_void_setPinDir(SSD_LED_A_PORT,  SSD_LED_A_PIN , OUT);
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	61 e0       	ldi	r22, 0x01	; 1
    1e66:	41 e0       	ldi	r20, 0x01	; 1
    1e68:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_B_PORT,  SSD_LED_B_PIN , OUT);
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	62 e0       	ldi	r22, 0x02	; 2
    1e70:	41 e0       	ldi	r20, 0x01	; 1
    1e72:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_C_PORT,  SSD_LED_C_PIN , OUT);
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	63 e0       	ldi	r22, 0x03	; 3
    1e7a:	41 e0       	ldi	r20, 0x01	; 1
    1e7c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_D_PORT,  SSD_LED_D_PIN , OUT);
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	64 e0       	ldi	r22, 0x04	; 4
    1e84:	41 e0       	ldi	r20, 0x01	; 1
    1e86:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_E_PORT,  SSD_LED_E_PIN , OUT);
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	65 e0       	ldi	r22, 0x05	; 5
    1e8e:	41 e0       	ldi	r20, 0x01	; 1
    1e90:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_F_PORT,  SSD_LED_F_PIN , OUT);
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	66 e0       	ldi	r22, 0x06	; 6
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_G_PORT,  SSD_LED_G_PIN , OUT);
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	67 e0       	ldi	r22, 0x07	; 7
    1ea2:	41 e0       	ldi	r20, 0x01	; 1
    1ea4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_DOT_PORT,  SSD_LED_DOT_PIN , OUT);
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>

	//ENABLE DIGITS 1

	M_DIO_void_setPinDir(SSD_DIG_1_EN_PORT,  SSD_DIG_1_EN_PIN , OUT);
    1eb2:	82 e0       	ldi	r24, 0x02	; 2
    1eb4:	66 e0       	ldi	r22, 0x06	; 6
    1eb6:	41 e0       	ldi	r20, 0x01	; 1
    1eb8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_DIG_2_EN_PORT,  SSD_DIG_2_EN_PIN , OUT);
    1ebc:	82 e0       	ldi	r24, 0x02	; 2
    1ebe:	67 e0       	ldi	r22, 0x07	; 7
    1ec0:	41 e0       	ldi	r20, 0x01	; 1
    1ec2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
}
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <H_SSD_void_DisplayNumber>:
void H_SSD_void_DisplayNumber(u8 number)
{
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	a7 97       	sbiw	r28, 0x27	; 39
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	de bf       	out	0x3e, r29	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	cd bf       	out	0x3d, r28	; 61
    1ee0:	8b a3       	std	Y+35, r24	; 0x23
	if(number>99)
    1ee2:	8b a1       	ldd	r24, Y+35	; 0x23
    1ee4:	84 36       	cpi	r24, 0x64	; 100
    1ee6:	08 f0       	brcs	.+2      	; 0x1eea <H_SSD_void_DisplayNumber+0x1e>
    1ee8:	04 c5       	rjmp	.+2568   	; 0x28f2 <H_SSD_void_DisplayNumber+0xa26>
	{
		return;
	}
	u32 i ;
	u8 units =number % 10;
    1eea:	8b a1       	ldd	r24, Y+35	; 0x23
    1eec:	9a e0       	ldi	r25, 0x0A	; 10
    1eee:	69 2f       	mov	r22, r25
    1ef0:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <__udivmodqi4>
    1ef4:	89 2f       	mov	r24, r25
    1ef6:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 tens = number/10;
    1ef8:	8b a1       	ldd	r24, Y+35	; 0x23
    1efa:	9a e0       	ldi	r25, 0x0A	; 10
    1efc:	69 2f       	mov	r22, r25
    1efe:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <__udivmodqi4>
    1f02:	8d 8f       	std	Y+29, r24	; 0x1d
	for(i=0;i<SSD_DISPLAYY_TIME ;i++){
    1f04:	1f 8e       	std	Y+31, r1	; 0x1f
    1f06:	18 a2       	std	Y+32, r1	; 0x20
    1f08:	19 a2       	std	Y+33, r1	; 0x21
    1f0a:	1a a2       	std	Y+34, r1	; 0x22
    1f0c:	e8 c4       	rjmp	.+2512   	; 0x28de <H_SSD_void_DisplayNumber+0xa12>

		switch (units)
    1f0e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	3f a3       	std	Y+39, r19	; 0x27
    1f16:	2e a3       	std	Y+38, r18	; 0x26
    1f18:	8e a1       	ldd	r24, Y+38	; 0x26
    1f1a:	9f a1       	ldd	r25, Y+39	; 0x27
    1f1c:	84 30       	cpi	r24, 0x04	; 4
    1f1e:	91 05       	cpc	r25, r1
    1f20:	09 f4       	brne	.+2      	; 0x1f24 <H_SSD_void_DisplayNumber+0x58>
    1f22:	f0 c0       	rjmp	.+480    	; 0x2104 <H_SSD_void_DisplayNumber+0x238>
    1f24:	2e a1       	ldd	r18, Y+38	; 0x26
    1f26:	3f a1       	ldd	r19, Y+39	; 0x27
    1f28:	25 30       	cpi	r18, 0x05	; 5
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	ec f4       	brge	.+58     	; 0x1f68 <H_SSD_void_DisplayNumber+0x9c>
    1f2e:	8e a1       	ldd	r24, Y+38	; 0x26
    1f30:	9f a1       	ldd	r25, Y+39	; 0x27
    1f32:	81 30       	cpi	r24, 0x01	; 1
    1f34:	91 05       	cpc	r25, r1
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <H_SSD_void_DisplayNumber+0x6e>
    1f38:	6a c0       	rjmp	.+212    	; 0x200e <H_SSD_void_DisplayNumber+0x142>
    1f3a:	2e a1       	ldd	r18, Y+38	; 0x26
    1f3c:	3f a1       	ldd	r19, Y+39	; 0x27
    1f3e:	22 30       	cpi	r18, 0x02	; 2
    1f40:	31 05       	cpc	r19, r1
    1f42:	2c f4       	brge	.+10     	; 0x1f4e <H_SSD_void_DisplayNumber+0x82>
    1f44:	8e a1       	ldd	r24, Y+38	; 0x26
    1f46:	9f a1       	ldd	r25, Y+39	; 0x27
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	99 f1       	breq	.+102    	; 0x1fb2 <H_SSD_void_DisplayNumber+0xe6>
    1f4c:	d0 c1       	rjmp	.+928    	; 0x22ee <H_SSD_void_DisplayNumber+0x422>
    1f4e:	2e a1       	ldd	r18, Y+38	; 0x26
    1f50:	3f a1       	ldd	r19, Y+39	; 0x27
    1f52:	22 30       	cpi	r18, 0x02	; 2
    1f54:	31 05       	cpc	r19, r1
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <H_SSD_void_DisplayNumber+0x8e>
    1f58:	83 c0       	rjmp	.+262    	; 0x2060 <H_SSD_void_DisplayNumber+0x194>
    1f5a:	8e a1       	ldd	r24, Y+38	; 0x26
    1f5c:	9f a1       	ldd	r25, Y+39	; 0x27
    1f5e:	83 30       	cpi	r24, 0x03	; 3
    1f60:	91 05       	cpc	r25, r1
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <H_SSD_void_DisplayNumber+0x9a>
    1f64:	a6 c0       	rjmp	.+332    	; 0x20b2 <H_SSD_void_DisplayNumber+0x1e6>
    1f66:	c3 c1       	rjmp	.+902    	; 0x22ee <H_SSD_void_DisplayNumber+0x422>
    1f68:	2e a1       	ldd	r18, Y+38	; 0x26
    1f6a:	3f a1       	ldd	r19, Y+39	; 0x27
    1f6c:	27 30       	cpi	r18, 0x07	; 7
    1f6e:	31 05       	cpc	r19, r1
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <H_SSD_void_DisplayNumber+0xa8>
    1f72:	43 c1       	rjmp	.+646    	; 0x21fa <H_SSD_void_DisplayNumber+0x32e>
    1f74:	8e a1       	ldd	r24, Y+38	; 0x26
    1f76:	9f a1       	ldd	r25, Y+39	; 0x27
    1f78:	88 30       	cpi	r24, 0x08	; 8
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	6c f4       	brge	.+26     	; 0x1f98 <H_SSD_void_DisplayNumber+0xcc>
    1f7e:	2e a1       	ldd	r18, Y+38	; 0x26
    1f80:	3f a1       	ldd	r19, Y+39	; 0x27
    1f82:	25 30       	cpi	r18, 0x05	; 5
    1f84:	31 05       	cpc	r19, r1
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <H_SSD_void_DisplayNumber+0xbe>
    1f88:	e6 c0       	rjmp	.+460    	; 0x2156 <H_SSD_void_DisplayNumber+0x28a>
    1f8a:	8e a1       	ldd	r24, Y+38	; 0x26
    1f8c:	9f a1       	ldd	r25, Y+39	; 0x27
    1f8e:	86 30       	cpi	r24, 0x06	; 6
    1f90:	91 05       	cpc	r25, r1
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <H_SSD_void_DisplayNumber+0xca>
    1f94:	09 c1       	rjmp	.+530    	; 0x21a8 <H_SSD_void_DisplayNumber+0x2dc>
    1f96:	ab c1       	rjmp	.+854    	; 0x22ee <H_SSD_void_DisplayNumber+0x422>
    1f98:	2e a1       	ldd	r18, Y+38	; 0x26
    1f9a:	3f a1       	ldd	r19, Y+39	; 0x27
    1f9c:	28 30       	cpi	r18, 0x08	; 8
    1f9e:	31 05       	cpc	r19, r1
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <H_SSD_void_DisplayNumber+0xd8>
    1fa2:	54 c1       	rjmp	.+680    	; 0x224c <H_SSD_void_DisplayNumber+0x380>
    1fa4:	8e a1       	ldd	r24, Y+38	; 0x26
    1fa6:	9f a1       	ldd	r25, Y+39	; 0x27
    1fa8:	89 30       	cpi	r24, 0x09	; 9
    1faa:	91 05       	cpc	r25, r1
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <H_SSD_void_DisplayNumber+0xe4>
    1fae:	77 c1       	rjmp	.+750    	; 0x229e <H_SSD_void_DisplayNumber+0x3d2>
    1fb0:	9e c1       	rjmp	.+828    	; 0x22ee <H_SSD_void_DisplayNumber+0x422>
		{
		case 0:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	61 e0       	ldi	r22, 0x01	; 1
    1fb6:	41 e0       	ldi	r20, 0x01	; 1
    1fb8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	62 e0       	ldi	r22, 0x02	; 2
    1fc0:	41 e0       	ldi	r20, 0x01	; 1
    1fc2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	63 e0       	ldi	r22, 0x03	; 3
    1fca:	41 e0       	ldi	r20, 0x01	; 1
    1fcc:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	64 e0       	ldi	r22, 0x04	; 4
    1fd4:	41 e0       	ldi	r20, 0x01	; 1
    1fd6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	65 e0       	ldi	r22, 0x05	; 5
    1fde:	41 e0       	ldi	r20, 0x01	; 1
    1fe0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	66 e0       	ldi	r22, 0x06	; 6
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	61 e0       	ldi	r22, 0x01	; 1
    1ff2:	41 e0       	ldi	r20, 0x01	; 1
    1ff4:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	67 e0       	ldi	r22, 0x07	; 7
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	60 e0       	ldi	r22, 0x00	; 0
    2006:	40 e0       	ldi	r20, 0x00	; 0
    2008:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    200c:	70 c1       	rjmp	.+736    	; 0x22ee <H_SSD_void_DisplayNumber+0x422>
			break;

		case 1:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	61 e0       	ldi	r22, 0x01	; 1
    2012:	40 e0       	ldi	r20, 0x00	; 0
    2014:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	62 e0       	ldi	r22, 0x02	; 2
    201c:	41 e0       	ldi	r20, 0x01	; 1
    201e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	63 e0       	ldi	r22, 0x03	; 3
    2026:	41 e0       	ldi	r20, 0x01	; 1
    2028:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	64 e0       	ldi	r22, 0x04	; 4
    2030:	40 e0       	ldi	r20, 0x00	; 0
    2032:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	65 e0       	ldi	r22, 0x05	; 5
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	66 e0       	ldi	r22, 0x06	; 6
    2044:	40 e0       	ldi	r20, 0x00	; 0
    2046:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	67 e0       	ldi	r22, 0x07	; 7
    204e:	40 e0       	ldi	r20, 0x00	; 0
    2050:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	40 e0       	ldi	r20, 0x00	; 0
    205a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    205e:	47 c1       	rjmp	.+654    	; 0x22ee <H_SSD_void_DisplayNumber+0x422>
			break;

		case 2:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	61 e0       	ldi	r22, 0x01	; 1
    2064:	41 e0       	ldi	r20, 0x01	; 1
    2066:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	62 e0       	ldi	r22, 0x02	; 2
    206e:	41 e0       	ldi	r20, 0x01	; 1
    2070:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,LOW);
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	63 e0       	ldi	r22, 0x03	; 3
    2078:	40 e0       	ldi	r20, 0x00	; 0
    207a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	64 e0       	ldi	r22, 0x04	; 4
    2082:	41 e0       	ldi	r20, 0x01	; 1
    2084:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	65 e0       	ldi	r22, 0x05	; 5
    208c:	41 e0       	ldi	r20, 0x01	; 1
    208e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	66 e0       	ldi	r22, 0x06	; 6
    2096:	40 e0       	ldi	r20, 0x00	; 0
    2098:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	67 e0       	ldi	r22, 0x07	; 7
    20a0:	41 e0       	ldi	r20, 0x01	; 1
    20a2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	60 e0       	ldi	r22, 0x00	; 0
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    20b0:	1e c1       	rjmp	.+572    	; 0x22ee <H_SSD_void_DisplayNumber+0x422>
			break;

		case 3:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	61 e0       	ldi	r22, 0x01	; 1
    20b6:	41 e0       	ldi	r20, 0x01	; 1
    20b8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	62 e0       	ldi	r22, 0x02	; 2
    20c0:	41 e0       	ldi	r20, 0x01	; 1
    20c2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	63 e0       	ldi	r22, 0x03	; 3
    20ca:	41 e0       	ldi	r20, 0x01	; 1
    20cc:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	64 e0       	ldi	r22, 0x04	; 4
    20d4:	41 e0       	ldi	r20, 0x01	; 1
    20d6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	65 e0       	ldi	r22, 0x05	; 5
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	66 e0       	ldi	r22, 0x06	; 6
    20e8:	40 e0       	ldi	r20, 0x00	; 0
    20ea:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	67 e0       	ldi	r22, 0x07	; 7
    20f2:	41 e0       	ldi	r20, 0x01	; 1
    20f4:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	60 e0       	ldi	r22, 0x00	; 0
    20fc:	40 e0       	ldi	r20, 0x00	; 0
    20fe:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    2102:	f5 c0       	rjmp	.+490    	; 0x22ee <H_SSD_void_DisplayNumber+0x422>
			break;

		case 4:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	61 e0       	ldi	r22, 0x01	; 1
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	62 e0       	ldi	r22, 0x02	; 2
    2112:	41 e0       	ldi	r20, 0x01	; 1
    2114:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	63 e0       	ldi	r22, 0x03	; 3
    211c:	41 e0       	ldi	r20, 0x01	; 1
    211e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	64 e0       	ldi	r22, 0x04	; 4
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	65 e0       	ldi	r22, 0x05	; 5
    2130:	40 e0       	ldi	r20, 0x00	; 0
    2132:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	66 e0       	ldi	r22, 0x06	; 6
    213a:	41 e0       	ldi	r20, 0x01	; 1
    213c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	67 e0       	ldi	r22, 0x07	; 7
    2144:	41 e0       	ldi	r20, 0x01	; 1
    2146:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	60 e0       	ldi	r22, 0x00	; 0
    214e:	40 e0       	ldi	r20, 0x00	; 0
    2150:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    2154:	cc c0       	rjmp	.+408    	; 0x22ee <H_SSD_void_DisplayNumber+0x422>
			break;

		case 5:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	61 e0       	ldi	r22, 0x01	; 1
    215a:	41 e0       	ldi	r20, 0x01	; 1
    215c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	62 e0       	ldi	r22, 0x02	; 2
    2164:	40 e0       	ldi	r20, 0x00	; 0
    2166:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	63 e0       	ldi	r22, 0x03	; 3
    216e:	41 e0       	ldi	r20, 0x01	; 1
    2170:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	64 e0       	ldi	r22, 0x04	; 4
    2178:	41 e0       	ldi	r20, 0x01	; 1
    217a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	65 e0       	ldi	r22, 0x05	; 5
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	66 e0       	ldi	r22, 0x06	; 6
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	67 e0       	ldi	r22, 0x07	; 7
    2196:	41 e0       	ldi	r20, 0x01	; 1
    2198:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	60 e0       	ldi	r22, 0x00	; 0
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    21a6:	a3 c0       	rjmp	.+326    	; 0x22ee <H_SSD_void_DisplayNumber+0x422>
			break;
		case 6:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	61 e0       	ldi	r22, 0x01	; 1
    21ac:	41 e0       	ldi	r20, 0x01	; 1
    21ae:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	62 e0       	ldi	r22, 0x02	; 2
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	63 e0       	ldi	r22, 0x03	; 3
    21c0:	41 e0       	ldi	r20, 0x01	; 1
    21c2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	64 e0       	ldi	r22, 0x04	; 4
    21ca:	41 e0       	ldi	r20, 0x01	; 1
    21cc:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	65 e0       	ldi	r22, 0x05	; 5
    21d4:	41 e0       	ldi	r20, 0x01	; 1
    21d6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	66 e0       	ldi	r22, 0x06	; 6
    21de:	41 e0       	ldi	r20, 0x01	; 1
    21e0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	67 e0       	ldi	r22, 0x07	; 7
    21e8:	41 e0       	ldi	r20, 0x01	; 1
    21ea:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	60 e0       	ldi	r22, 0x00	; 0
    21f2:	40 e0       	ldi	r20, 0x00	; 0
    21f4:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    21f8:	7a c0       	rjmp	.+244    	; 0x22ee <H_SSD_void_DisplayNumber+0x422>
			break;
		case 7:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	61 e0       	ldi	r22, 0x01	; 1
    21fe:	41 e0       	ldi	r20, 0x01	; 1
    2200:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	62 e0       	ldi	r22, 0x02	; 2
    2208:	41 e0       	ldi	r20, 0x01	; 1
    220a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	63 e0       	ldi	r22, 0x03	; 3
    2212:	41 e0       	ldi	r20, 0x01	; 1
    2214:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	64 e0       	ldi	r22, 0x04	; 4
    221c:	40 e0       	ldi	r20, 0x00	; 0
    221e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	65 e0       	ldi	r22, 0x05	; 5
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	66 e0       	ldi	r22, 0x06	; 6
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	67 e0       	ldi	r22, 0x07	; 7
    223a:	40 e0       	ldi	r20, 0x00	; 0
    223c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	60 e0       	ldi	r22, 0x00	; 0
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    224a:	51 c0       	rjmp	.+162    	; 0x22ee <H_SSD_void_DisplayNumber+0x422>
			break;
		case 8:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	61 e0       	ldi	r22, 0x01	; 1
    2250:	41 e0       	ldi	r20, 0x01	; 1
    2252:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	62 e0       	ldi	r22, 0x02	; 2
    225a:	41 e0       	ldi	r20, 0x01	; 1
    225c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	63 e0       	ldi	r22, 0x03	; 3
    2264:	41 e0       	ldi	r20, 0x01	; 1
    2266:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	64 e0       	ldi	r22, 0x04	; 4
    226e:	41 e0       	ldi	r20, 0x01	; 1
    2270:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	65 e0       	ldi	r22, 0x05	; 5
    2278:	41 e0       	ldi	r20, 0x01	; 1
    227a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	66 e0       	ldi	r22, 0x06	; 6
    2282:	41 e0       	ldi	r20, 0x01	; 1
    2284:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	67 e0       	ldi	r22, 0x07	; 7
    228c:	41 e0       	ldi	r20, 0x01	; 1
    228e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	40 e0       	ldi	r20, 0x00	; 0
    2298:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    229c:	28 c0       	rjmp	.+80     	; 0x22ee <H_SSD_void_DisplayNumber+0x422>
			break;
		case 9:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	61 e0       	ldi	r22, 0x01	; 1
    22a2:	41 e0       	ldi	r20, 0x01	; 1
    22a4:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	62 e0       	ldi	r22, 0x02	; 2
    22ac:	41 e0       	ldi	r20, 0x01	; 1
    22ae:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	63 e0       	ldi	r22, 0x03	; 3
    22b6:	41 e0       	ldi	r20, 0x01	; 1
    22b8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	64 e0       	ldi	r22, 0x04	; 4
    22c0:	41 e0       	ldi	r20, 0x01	; 1
    22c2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	65 e0       	ldi	r22, 0x05	; 5
    22ca:	40 e0       	ldi	r20, 0x00	; 0
    22cc:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	66 e0       	ldi	r22, 0x06	; 6
    22d4:	41 e0       	ldi	r20, 0x01	; 1
    22d6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	67 e0       	ldi	r22, 0x07	; 7
    22de:	41 e0       	ldi	r20, 0x01	; 1
    22e0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	60 e0       	ldi	r22, 0x00	; 0
    22e8:	40 e0       	ldi	r20, 0x00	; 0
    22ea:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>


		}
		//enable digit 1
		//disable digit 2
		M_DIO_void_setPinValue(SSD_DIG_1_EN_PORT,SSD_DIG_1_EN_PIN,HIGH);
    22ee:	82 e0       	ldi	r24, 0x02	; 2
    22f0:	66 e0       	ldi	r22, 0x06	; 6
    22f2:	41 e0       	ldi	r20, 0x01	; 1
    22f4:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,LOW);
    22f8:	82 e0       	ldi	r24, 0x02	; 2
    22fa:	67 e0       	ldi	r22, 0x07	; 7
    22fc:	40 e0       	ldi	r20, 0x00	; 0
    22fe:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	a0 e8       	ldi	r26, 0x80	; 128
    2308:	bf e3       	ldi	r27, 0x3F	; 63
    230a:	89 8f       	std	Y+25, r24	; 0x19
    230c:	9a 8f       	std	Y+26, r25	; 0x1a
    230e:	ab 8f       	std	Y+27, r26	; 0x1b
    2310:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2312:	69 8d       	ldd	r22, Y+25	; 0x19
    2314:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2316:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2318:	9c 8d       	ldd	r25, Y+28	; 0x1c
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	48 ec       	ldi	r20, 0xC8	; 200
    2320:	53 e4       	ldi	r21, 0x43	; 67
    2322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	8d 8b       	std	Y+21, r24	; 0x15
    232c:	9e 8b       	std	Y+22, r25	; 0x16
    232e:	af 8b       	std	Y+23, r26	; 0x17
    2330:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2332:	6d 89       	ldd	r22, Y+21	; 0x15
    2334:	7e 89       	ldd	r23, Y+22	; 0x16
    2336:	8f 89       	ldd	r24, Y+23	; 0x17
    2338:	98 8d       	ldd	r25, Y+24	; 0x18
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e8       	ldi	r20, 0x80	; 128
    2340:	5f e3       	ldi	r21, 0x3F	; 63
    2342:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2346:	88 23       	and	r24, r24
    2348:	2c f4       	brge	.+10     	; 0x2354 <H_SSD_void_DisplayNumber+0x488>
		__ticks = 1;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	9c 8b       	std	Y+20, r25	; 0x14
    2350:	8b 8b       	std	Y+19, r24	; 0x13
    2352:	3f c0       	rjmp	.+126    	; 0x23d2 <H_SSD_void_DisplayNumber+0x506>
	else if (__tmp > 65535)
    2354:	6d 89       	ldd	r22, Y+21	; 0x15
    2356:	7e 89       	ldd	r23, Y+22	; 0x16
    2358:	8f 89       	ldd	r24, Y+23	; 0x17
    235a:	98 8d       	ldd	r25, Y+24	; 0x18
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	3f ef       	ldi	r19, 0xFF	; 255
    2360:	4f e7       	ldi	r20, 0x7F	; 127
    2362:	57 e4       	ldi	r21, 0x47	; 71
    2364:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2368:	18 16       	cp	r1, r24
    236a:	4c f5       	brge	.+82     	; 0x23be <H_SSD_void_DisplayNumber+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236c:	69 8d       	ldd	r22, Y+25	; 0x19
    236e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2370:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2372:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e2       	ldi	r20, 0x20	; 32
    237a:	51 e4       	ldi	r21, 0x41	; 65
    237c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	bc 01       	movw	r22, r24
    2386:	cd 01       	movw	r24, r26
    2388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	9c 8b       	std	Y+20, r25	; 0x14
    2392:	8b 8b       	std	Y+19, r24	; 0x13
    2394:	0f c0       	rjmp	.+30     	; 0x23b4 <H_SSD_void_DisplayNumber+0x4e8>
    2396:	88 e2       	ldi	r24, 0x28	; 40
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	9a 8b       	std	Y+18, r25	; 0x12
    239c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    239e:	89 89       	ldd	r24, Y+17	; 0x11
    23a0:	9a 89       	ldd	r25, Y+18	; 0x12
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	f1 f7       	brne	.-4      	; 0x23a2 <H_SSD_void_DisplayNumber+0x4d6>
    23a6:	9a 8b       	std	Y+18, r25	; 0x12
    23a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23aa:	8b 89       	ldd	r24, Y+19	; 0x13
    23ac:	9c 89       	ldd	r25, Y+20	; 0x14
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	9c 8b       	std	Y+20, r25	; 0x14
    23b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b4:	8b 89       	ldd	r24, Y+19	; 0x13
    23b6:	9c 89       	ldd	r25, Y+20	; 0x14
    23b8:	00 97       	sbiw	r24, 0x00	; 0
    23ba:	69 f7       	brne	.-38     	; 0x2396 <H_SSD_void_DisplayNumber+0x4ca>
    23bc:	14 c0       	rjmp	.+40     	; 0x23e6 <H_SSD_void_DisplayNumber+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23be:	6d 89       	ldd	r22, Y+21	; 0x15
    23c0:	7e 89       	ldd	r23, Y+22	; 0x16
    23c2:	8f 89       	ldd	r24, Y+23	; 0x17
    23c4:	98 8d       	ldd	r25, Y+24	; 0x18
    23c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	9c 8b       	std	Y+20, r25	; 0x14
    23d0:	8b 8b       	std	Y+19, r24	; 0x13
    23d2:	8b 89       	ldd	r24, Y+19	; 0x13
    23d4:	9c 89       	ldd	r25, Y+20	; 0x14
    23d6:	98 8b       	std	Y+16, r25	; 0x10
    23d8:	8f 87       	std	Y+15, r24	; 0x0f
    23da:	8f 85       	ldd	r24, Y+15	; 0x0f
    23dc:	98 89       	ldd	r25, Y+16	; 0x10
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	f1 f7       	brne	.-4      	; 0x23de <H_SSD_void_DisplayNumber+0x512>
    23e2:	98 8b       	std	Y+16, r25	; 0x10
    23e4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		M_DIO_void_setPinValue(SSD_DIG_1_EN_PORT,SSD_DIG_1_EN_PIN,LOW);
    23e6:	82 e0       	ldi	r24, 0x02	; 2
    23e8:	66 e0       	ldi	r22, 0x06	; 6
    23ea:	40 e0       	ldi	r20, 0x00	; 0
    23ec:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
		switch (tens)
    23f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	3d a3       	std	Y+37, r19	; 0x25
    23f8:	2c a3       	std	Y+36, r18	; 0x24
    23fa:	8c a1       	ldd	r24, Y+36	; 0x24
    23fc:	9d a1       	ldd	r25, Y+37	; 0x25
    23fe:	84 30       	cpi	r24, 0x04	; 4
    2400:	91 05       	cpc	r25, r1
    2402:	09 f4       	brne	.+2      	; 0x2406 <H_SSD_void_DisplayNumber+0x53a>
    2404:	f0 c0       	rjmp	.+480    	; 0x25e6 <H_SSD_void_DisplayNumber+0x71a>
    2406:	2c a1       	ldd	r18, Y+36	; 0x24
    2408:	3d a1       	ldd	r19, Y+37	; 0x25
    240a:	25 30       	cpi	r18, 0x05	; 5
    240c:	31 05       	cpc	r19, r1
    240e:	ec f4       	brge	.+58     	; 0x244a <H_SSD_void_DisplayNumber+0x57e>
    2410:	8c a1       	ldd	r24, Y+36	; 0x24
    2412:	9d a1       	ldd	r25, Y+37	; 0x25
    2414:	81 30       	cpi	r24, 0x01	; 1
    2416:	91 05       	cpc	r25, r1
    2418:	09 f4       	brne	.+2      	; 0x241c <H_SSD_void_DisplayNumber+0x550>
    241a:	6a c0       	rjmp	.+212    	; 0x24f0 <H_SSD_void_DisplayNumber+0x624>
    241c:	2c a1       	ldd	r18, Y+36	; 0x24
    241e:	3d a1       	ldd	r19, Y+37	; 0x25
    2420:	22 30       	cpi	r18, 0x02	; 2
    2422:	31 05       	cpc	r19, r1
    2424:	2c f4       	brge	.+10     	; 0x2430 <H_SSD_void_DisplayNumber+0x564>
    2426:	8c a1       	ldd	r24, Y+36	; 0x24
    2428:	9d a1       	ldd	r25, Y+37	; 0x25
    242a:	00 97       	sbiw	r24, 0x00	; 0
    242c:	99 f1       	breq	.+102    	; 0x2494 <H_SSD_void_DisplayNumber+0x5c8>
    242e:	d0 c1       	rjmp	.+928    	; 0x27d0 <H_SSD_void_DisplayNumber+0x904>
    2430:	2c a1       	ldd	r18, Y+36	; 0x24
    2432:	3d a1       	ldd	r19, Y+37	; 0x25
    2434:	22 30       	cpi	r18, 0x02	; 2
    2436:	31 05       	cpc	r19, r1
    2438:	09 f4       	brne	.+2      	; 0x243c <H_SSD_void_DisplayNumber+0x570>
    243a:	83 c0       	rjmp	.+262    	; 0x2542 <H_SSD_void_DisplayNumber+0x676>
    243c:	8c a1       	ldd	r24, Y+36	; 0x24
    243e:	9d a1       	ldd	r25, Y+37	; 0x25
    2440:	83 30       	cpi	r24, 0x03	; 3
    2442:	91 05       	cpc	r25, r1
    2444:	09 f4       	brne	.+2      	; 0x2448 <H_SSD_void_DisplayNumber+0x57c>
    2446:	a6 c0       	rjmp	.+332    	; 0x2594 <H_SSD_void_DisplayNumber+0x6c8>
    2448:	c3 c1       	rjmp	.+902    	; 0x27d0 <H_SSD_void_DisplayNumber+0x904>
    244a:	2c a1       	ldd	r18, Y+36	; 0x24
    244c:	3d a1       	ldd	r19, Y+37	; 0x25
    244e:	27 30       	cpi	r18, 0x07	; 7
    2450:	31 05       	cpc	r19, r1
    2452:	09 f4       	brne	.+2      	; 0x2456 <H_SSD_void_DisplayNumber+0x58a>
    2454:	43 c1       	rjmp	.+646    	; 0x26dc <H_SSD_void_DisplayNumber+0x810>
    2456:	8c a1       	ldd	r24, Y+36	; 0x24
    2458:	9d a1       	ldd	r25, Y+37	; 0x25
    245a:	88 30       	cpi	r24, 0x08	; 8
    245c:	91 05       	cpc	r25, r1
    245e:	6c f4       	brge	.+26     	; 0x247a <H_SSD_void_DisplayNumber+0x5ae>
    2460:	2c a1       	ldd	r18, Y+36	; 0x24
    2462:	3d a1       	ldd	r19, Y+37	; 0x25
    2464:	25 30       	cpi	r18, 0x05	; 5
    2466:	31 05       	cpc	r19, r1
    2468:	09 f4       	brne	.+2      	; 0x246c <H_SSD_void_DisplayNumber+0x5a0>
    246a:	e6 c0       	rjmp	.+460    	; 0x2638 <H_SSD_void_DisplayNumber+0x76c>
    246c:	8c a1       	ldd	r24, Y+36	; 0x24
    246e:	9d a1       	ldd	r25, Y+37	; 0x25
    2470:	86 30       	cpi	r24, 0x06	; 6
    2472:	91 05       	cpc	r25, r1
    2474:	09 f4       	brne	.+2      	; 0x2478 <H_SSD_void_DisplayNumber+0x5ac>
    2476:	09 c1       	rjmp	.+530    	; 0x268a <H_SSD_void_DisplayNumber+0x7be>
    2478:	ab c1       	rjmp	.+854    	; 0x27d0 <H_SSD_void_DisplayNumber+0x904>
    247a:	2c a1       	ldd	r18, Y+36	; 0x24
    247c:	3d a1       	ldd	r19, Y+37	; 0x25
    247e:	28 30       	cpi	r18, 0x08	; 8
    2480:	31 05       	cpc	r19, r1
    2482:	09 f4       	brne	.+2      	; 0x2486 <H_SSD_void_DisplayNumber+0x5ba>
    2484:	54 c1       	rjmp	.+680    	; 0x272e <H_SSD_void_DisplayNumber+0x862>
    2486:	8c a1       	ldd	r24, Y+36	; 0x24
    2488:	9d a1       	ldd	r25, Y+37	; 0x25
    248a:	89 30       	cpi	r24, 0x09	; 9
    248c:	91 05       	cpc	r25, r1
    248e:	09 f4       	brne	.+2      	; 0x2492 <H_SSD_void_DisplayNumber+0x5c6>
    2490:	77 c1       	rjmp	.+750    	; 0x2780 <H_SSD_void_DisplayNumber+0x8b4>
    2492:	9e c1       	rjmp	.+828    	; 0x27d0 <H_SSD_void_DisplayNumber+0x904>
		{
		case 0:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	61 e0       	ldi	r22, 0x01	; 1
    2498:	41 e0       	ldi	r20, 0x01	; 1
    249a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	62 e0       	ldi	r22, 0x02	; 2
    24a2:	41 e0       	ldi	r20, 0x01	; 1
    24a4:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	63 e0       	ldi	r22, 0x03	; 3
    24ac:	41 e0       	ldi	r20, 0x01	; 1
    24ae:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	64 e0       	ldi	r22, 0x04	; 4
    24b6:	41 e0       	ldi	r20, 0x01	; 1
    24b8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	65 e0       	ldi	r22, 0x05	; 5
    24c0:	41 e0       	ldi	r20, 0x01	; 1
    24c2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	66 e0       	ldi	r22, 0x06	; 6
    24ca:	41 e0       	ldi	r20, 0x01	; 1
    24cc:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	61 e0       	ldi	r22, 0x01	; 1
    24d4:	41 e0       	ldi	r20, 0x01	; 1
    24d6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	67 e0       	ldi	r22, 0x07	; 7
    24de:	40 e0       	ldi	r20, 0x00	; 0
    24e0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	60 e0       	ldi	r22, 0x00	; 0
    24e8:	40 e0       	ldi	r20, 0x00	; 0
    24ea:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    24ee:	70 c1       	rjmp	.+736    	; 0x27d0 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 1:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	61 e0       	ldi	r22, 0x01	; 1
    24f4:	40 e0       	ldi	r20, 0x00	; 0
    24f6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	62 e0       	ldi	r22, 0x02	; 2
    24fe:	41 e0       	ldi	r20, 0x01	; 1
    2500:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	63 e0       	ldi	r22, 0x03	; 3
    2508:	41 e0       	ldi	r20, 0x01	; 1
    250a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	64 e0       	ldi	r22, 0x04	; 4
    2512:	40 e0       	ldi	r20, 0x00	; 0
    2514:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	65 e0       	ldi	r22, 0x05	; 5
    251c:	40 e0       	ldi	r20, 0x00	; 0
    251e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	66 e0       	ldi	r22, 0x06	; 6
    2526:	40 e0       	ldi	r20, 0x00	; 0
    2528:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	67 e0       	ldi	r22, 0x07	; 7
    2530:	40 e0       	ldi	r20, 0x00	; 0
    2532:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	40 e0       	ldi	r20, 0x00	; 0
    253c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    2540:	47 c1       	rjmp	.+654    	; 0x27d0 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 2:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	61 e0       	ldi	r22, 0x01	; 1
    2546:	41 e0       	ldi	r20, 0x01	; 1
    2548:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	62 e0       	ldi	r22, 0x02	; 2
    2550:	41 e0       	ldi	r20, 0x01	; 1
    2552:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,LOW);
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	63 e0       	ldi	r22, 0x03	; 3
    255a:	40 e0       	ldi	r20, 0x00	; 0
    255c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	64 e0       	ldi	r22, 0x04	; 4
    2564:	41 e0       	ldi	r20, 0x01	; 1
    2566:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	65 e0       	ldi	r22, 0x05	; 5
    256e:	41 e0       	ldi	r20, 0x01	; 1
    2570:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	66 e0       	ldi	r22, 0x06	; 6
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	67 e0       	ldi	r22, 0x07	; 7
    2582:	41 e0       	ldi	r20, 0x01	; 1
    2584:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	60 e0       	ldi	r22, 0x00	; 0
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    2592:	1e c1       	rjmp	.+572    	; 0x27d0 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 3:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	61 e0       	ldi	r22, 0x01	; 1
    2598:	41 e0       	ldi	r20, 0x01	; 1
    259a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	62 e0       	ldi	r22, 0x02	; 2
    25a2:	41 e0       	ldi	r20, 0x01	; 1
    25a4:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	63 e0       	ldi	r22, 0x03	; 3
    25ac:	41 e0       	ldi	r20, 0x01	; 1
    25ae:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	64 e0       	ldi	r22, 0x04	; 4
    25b6:	41 e0       	ldi	r20, 0x01	; 1
    25b8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	65 e0       	ldi	r22, 0x05	; 5
    25c0:	40 e0       	ldi	r20, 0x00	; 0
    25c2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	66 e0       	ldi	r22, 0x06	; 6
    25ca:	40 e0       	ldi	r20, 0x00	; 0
    25cc:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	67 e0       	ldi	r22, 0x07	; 7
    25d4:	41 e0       	ldi	r20, 0x01	; 1
    25d6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	60 e0       	ldi	r22, 0x00	; 0
    25de:	40 e0       	ldi	r20, 0x00	; 0
    25e0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    25e4:	f5 c0       	rjmp	.+490    	; 0x27d0 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 4:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	61 e0       	ldi	r22, 0x01	; 1
    25ea:	40 e0       	ldi	r20, 0x00	; 0
    25ec:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	62 e0       	ldi	r22, 0x02	; 2
    25f4:	41 e0       	ldi	r20, 0x01	; 1
    25f6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	63 e0       	ldi	r22, 0x03	; 3
    25fe:	41 e0       	ldi	r20, 0x01	; 1
    2600:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	64 e0       	ldi	r22, 0x04	; 4
    2608:	40 e0       	ldi	r20, 0x00	; 0
    260a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	65 e0       	ldi	r22, 0x05	; 5
    2612:	40 e0       	ldi	r20, 0x00	; 0
    2614:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	66 e0       	ldi	r22, 0x06	; 6
    261c:	41 e0       	ldi	r20, 0x01	; 1
    261e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	67 e0       	ldi	r22, 0x07	; 7
    2626:	41 e0       	ldi	r20, 0x01	; 1
    2628:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	60 e0       	ldi	r22, 0x00	; 0
    2630:	40 e0       	ldi	r20, 0x00	; 0
    2632:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    2636:	cc c0       	rjmp	.+408    	; 0x27d0 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 5:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	61 e0       	ldi	r22, 0x01	; 1
    263c:	41 e0       	ldi	r20, 0x01	; 1
    263e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	62 e0       	ldi	r22, 0x02	; 2
    2646:	40 e0       	ldi	r20, 0x00	; 0
    2648:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	63 e0       	ldi	r22, 0x03	; 3
    2650:	41 e0       	ldi	r20, 0x01	; 1
    2652:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	64 e0       	ldi	r22, 0x04	; 4
    265a:	41 e0       	ldi	r20, 0x01	; 1
    265c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	65 e0       	ldi	r22, 0x05	; 5
    2664:	40 e0       	ldi	r20, 0x00	; 0
    2666:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	66 e0       	ldi	r22, 0x06	; 6
    266e:	41 e0       	ldi	r20, 0x01	; 1
    2670:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	67 e0       	ldi	r22, 0x07	; 7
    2678:	41 e0       	ldi	r20, 0x01	; 1
    267a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	60 e0       	ldi	r22, 0x00	; 0
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    2688:	a3 c0       	rjmp	.+326    	; 0x27d0 <H_SSD_void_DisplayNumber+0x904>
					break;
				case 6:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	61 e0       	ldi	r22, 0x01	; 1
    268e:	41 e0       	ldi	r20, 0x01	; 1
    2690:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	62 e0       	ldi	r22, 0x02	; 2
    2698:	40 e0       	ldi	r20, 0x00	; 0
    269a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	63 e0       	ldi	r22, 0x03	; 3
    26a2:	41 e0       	ldi	r20, 0x01	; 1
    26a4:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	64 e0       	ldi	r22, 0x04	; 4
    26ac:	41 e0       	ldi	r20, 0x01	; 1
    26ae:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	65 e0       	ldi	r22, 0x05	; 5
    26b6:	41 e0       	ldi	r20, 0x01	; 1
    26b8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	66 e0       	ldi	r22, 0x06	; 6
    26c0:	41 e0       	ldi	r20, 0x01	; 1
    26c2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	67 e0       	ldi	r22, 0x07	; 7
    26ca:	41 e0       	ldi	r20, 0x01	; 1
    26cc:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	60 e0       	ldi	r22, 0x00	; 0
    26d4:	40 e0       	ldi	r20, 0x00	; 0
    26d6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    26da:	7a c0       	rjmp	.+244    	; 0x27d0 <H_SSD_void_DisplayNumber+0x904>
					break;
				case 7:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	61 e0       	ldi	r22, 0x01	; 1
    26e0:	41 e0       	ldi	r20, 0x01	; 1
    26e2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	62 e0       	ldi	r22, 0x02	; 2
    26ea:	41 e0       	ldi	r20, 0x01	; 1
    26ec:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	63 e0       	ldi	r22, 0x03	; 3
    26f4:	41 e0       	ldi	r20, 0x01	; 1
    26f6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	64 e0       	ldi	r22, 0x04	; 4
    26fe:	40 e0       	ldi	r20, 0x00	; 0
    2700:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	65 e0       	ldi	r22, 0x05	; 5
    2708:	40 e0       	ldi	r20, 0x00	; 0
    270a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	66 e0       	ldi	r22, 0x06	; 6
    2712:	40 e0       	ldi	r20, 0x00	; 0
    2714:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	67 e0       	ldi	r22, 0x07	; 7
    271c:	40 e0       	ldi	r20, 0x00	; 0
    271e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	60 e0       	ldi	r22, 0x00	; 0
    2726:	40 e0       	ldi	r20, 0x00	; 0
    2728:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    272c:	51 c0       	rjmp	.+162    	; 0x27d0 <H_SSD_void_DisplayNumber+0x904>
					break;
				case 8:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	61 e0       	ldi	r22, 0x01	; 1
    2732:	41 e0       	ldi	r20, 0x01	; 1
    2734:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	62 e0       	ldi	r22, 0x02	; 2
    273c:	41 e0       	ldi	r20, 0x01	; 1
    273e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	63 e0       	ldi	r22, 0x03	; 3
    2746:	41 e0       	ldi	r20, 0x01	; 1
    2748:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	64 e0       	ldi	r22, 0x04	; 4
    2750:	41 e0       	ldi	r20, 0x01	; 1
    2752:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	65 e0       	ldi	r22, 0x05	; 5
    275a:	41 e0       	ldi	r20, 0x01	; 1
    275c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	66 e0       	ldi	r22, 0x06	; 6
    2764:	41 e0       	ldi	r20, 0x01	; 1
    2766:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	67 e0       	ldi	r22, 0x07	; 7
    276e:	41 e0       	ldi	r20, 0x01	; 1
    2770:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	60 e0       	ldi	r22, 0x00	; 0
    2778:	40 e0       	ldi	r20, 0x00	; 0
    277a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    277e:	28 c0       	rjmp	.+80     	; 0x27d0 <H_SSD_void_DisplayNumber+0x904>
					break;
				case 9:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	61 e0       	ldi	r22, 0x01	; 1
    2784:	41 e0       	ldi	r20, 0x01	; 1
    2786:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	62 e0       	ldi	r22, 0x02	; 2
    278e:	41 e0       	ldi	r20, 0x01	; 1
    2790:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	63 e0       	ldi	r22, 0x03	; 3
    2798:	41 e0       	ldi	r20, 0x01	; 1
    279a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	64 e0       	ldi	r22, 0x04	; 4
    27a2:	41 e0       	ldi	r20, 0x01	; 1
    27a4:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	65 e0       	ldi	r22, 0x05	; 5
    27ac:	40 e0       	ldi	r20, 0x00	; 0
    27ae:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	66 e0       	ldi	r22, 0x06	; 6
    27b6:	41 e0       	ldi	r20, 0x01	; 1
    27b8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	67 e0       	ldi	r22, 0x07	; 7
    27c0:	41 e0       	ldi	r20, 0x01	; 1
    27c2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	60 e0       	ldi	r22, 0x00	; 0
    27ca:	40 e0       	ldi	r20, 0x00	; 0
    27cc:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>



				}
		//enable digit 2
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,HIGH);
    27d0:	82 e0       	ldi	r24, 0x02	; 2
    27d2:	67 e0       	ldi	r22, 0x07	; 7
    27d4:	41 e0       	ldi	r20, 0x01	; 1
    27d6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	a0 e8       	ldi	r26, 0x80	; 128
    27e0:	bf e3       	ldi	r27, 0x3F	; 63
    27e2:	8b 87       	std	Y+11, r24	; 0x0b
    27e4:	9c 87       	std	Y+12, r25	; 0x0c
    27e6:	ad 87       	std	Y+13, r26	; 0x0d
    27e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	48 ec       	ldi	r20, 0xC8	; 200
    27f8:	53 e4       	ldi	r21, 0x43	; 67
    27fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	8f 83       	std	Y+7, r24	; 0x07
    2804:	98 87       	std	Y+8, r25	; 0x08
    2806:	a9 87       	std	Y+9, r26	; 0x09
    2808:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    280a:	6f 81       	ldd	r22, Y+7	; 0x07
    280c:	78 85       	ldd	r23, Y+8	; 0x08
    280e:	89 85       	ldd	r24, Y+9	; 0x09
    2810:	9a 85       	ldd	r25, Y+10	; 0x0a
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e8       	ldi	r20, 0x80	; 128
    2818:	5f e3       	ldi	r21, 0x3F	; 63
    281a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    281e:	88 23       	and	r24, r24
    2820:	2c f4       	brge	.+10     	; 0x282c <H_SSD_void_DisplayNumber+0x960>
		__ticks = 1;
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	9e 83       	std	Y+6, r25	; 0x06
    2828:	8d 83       	std	Y+5, r24	; 0x05
    282a:	3f c0       	rjmp	.+126    	; 0x28aa <H_SSD_void_DisplayNumber+0x9de>
	else if (__tmp > 65535)
    282c:	6f 81       	ldd	r22, Y+7	; 0x07
    282e:	78 85       	ldd	r23, Y+8	; 0x08
    2830:	89 85       	ldd	r24, Y+9	; 0x09
    2832:	9a 85       	ldd	r25, Y+10	; 0x0a
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	3f ef       	ldi	r19, 0xFF	; 255
    2838:	4f e7       	ldi	r20, 0x7F	; 127
    283a:	57 e4       	ldi	r21, 0x47	; 71
    283c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2840:	18 16       	cp	r1, r24
    2842:	4c f5       	brge	.+82     	; 0x2896 <H_SSD_void_DisplayNumber+0x9ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2844:	6b 85       	ldd	r22, Y+11	; 0x0b
    2846:	7c 85       	ldd	r23, Y+12	; 0x0c
    2848:	8d 85       	ldd	r24, Y+13	; 0x0d
    284a:	9e 85       	ldd	r25, Y+14	; 0x0e
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e2       	ldi	r20, 0x20	; 32
    2852:	51 e4       	ldi	r21, 0x41	; 65
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	bc 01       	movw	r22, r24
    285e:	cd 01       	movw	r24, r26
    2860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	9e 83       	std	Y+6, r25	; 0x06
    286a:	8d 83       	std	Y+5, r24	; 0x05
    286c:	0f c0       	rjmp	.+30     	; 0x288c <H_SSD_void_DisplayNumber+0x9c0>
    286e:	88 e2       	ldi	r24, 0x28	; 40
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	9c 83       	std	Y+4, r25	; 0x04
    2874:	8b 83       	std	Y+3, r24	; 0x03
    2876:	8b 81       	ldd	r24, Y+3	; 0x03
    2878:	9c 81       	ldd	r25, Y+4	; 0x04
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	f1 f7       	brne	.-4      	; 0x287a <H_SSD_void_DisplayNumber+0x9ae>
    287e:	9c 83       	std	Y+4, r25	; 0x04
    2880:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2882:	8d 81       	ldd	r24, Y+5	; 0x05
    2884:	9e 81       	ldd	r25, Y+6	; 0x06
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	9e 83       	std	Y+6, r25	; 0x06
    288a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288c:	8d 81       	ldd	r24, Y+5	; 0x05
    288e:	9e 81       	ldd	r25, Y+6	; 0x06
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	69 f7       	brne	.-38     	; 0x286e <H_SSD_void_DisplayNumber+0x9a2>
    2894:	14 c0       	rjmp	.+40     	; 0x28be <H_SSD_void_DisplayNumber+0x9f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2896:	6f 81       	ldd	r22, Y+7	; 0x07
    2898:	78 85       	ldd	r23, Y+8	; 0x08
    289a:	89 85       	ldd	r24, Y+9	; 0x09
    289c:	9a 85       	ldd	r25, Y+10	; 0x0a
    289e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	9e 83       	std	Y+6, r25	; 0x06
    28a8:	8d 83       	std	Y+5, r24	; 0x05
    28aa:	8d 81       	ldd	r24, Y+5	; 0x05
    28ac:	9e 81       	ldd	r25, Y+6	; 0x06
    28ae:	9a 83       	std	Y+2, r25	; 0x02
    28b0:	89 83       	std	Y+1, r24	; 0x01
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	9a 81       	ldd	r25, Y+2	; 0x02
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <H_SSD_void_DisplayNumber+0x9ea>
    28ba:	9a 83       	std	Y+2, r25	; 0x02
    28bc:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(1);
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,LOW);
    28be:	82 e0       	ldi	r24, 0x02	; 2
    28c0:	67 e0       	ldi	r22, 0x07	; 7
    28c2:	40 e0       	ldi	r20, 0x00	; 0
    28c4:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
		return;
	}
	u32 i ;
	u8 units =number % 10;
	u8 tens = number/10;
	for(i=0;i<SSD_DISPLAYY_TIME ;i++){
    28c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28ca:	98 a1       	ldd	r25, Y+32	; 0x20
    28cc:	a9 a1       	ldd	r26, Y+33	; 0x21
    28ce:	ba a1       	ldd	r27, Y+34	; 0x22
    28d0:	01 96       	adiw	r24, 0x01	; 1
    28d2:	a1 1d       	adc	r26, r1
    28d4:	b1 1d       	adc	r27, r1
    28d6:	8f 8f       	std	Y+31, r24	; 0x1f
    28d8:	98 a3       	std	Y+32, r25	; 0x20
    28da:	a9 a3       	std	Y+33, r26	; 0x21
    28dc:	ba a3       	std	Y+34, r27	; 0x22
    28de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28e0:	98 a1       	ldd	r25, Y+32	; 0x20
    28e2:	a9 a1       	ldd	r26, Y+33	; 0x21
    28e4:	ba a1       	ldd	r27, Y+34	; 0x22
    28e6:	8a 3f       	cpi	r24, 0xFA	; 250
    28e8:	91 05       	cpc	r25, r1
    28ea:	a1 05       	cpc	r26, r1
    28ec:	b1 05       	cpc	r27, r1
    28ee:	08 f4       	brcc	.+2      	; 0x28f2 <H_SSD_void_DisplayNumber+0xa26>
    28f0:	0e cb       	rjmp	.-2532   	; 0x1f0e <H_SSD_void_DisplayNumber+0x42>
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,HIGH);

		_delay_ms(1);
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,LOW);
	}
}
    28f2:	a7 96       	adiw	r28, 0x27	; 39
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <H_PB_void_init>:
#include"PB_int.h"
#include<util/delay.h>


void H_PB_void_init(const PB_t *ptr)
{
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	00 d0       	rcall	.+0      	; 0x290a <H_PB_void_init+0x6>
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	9a 83       	std	Y+2, r25	; 0x02
    2910:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_void_setPinDir(ptr->PB_port, ptr->PB_pin,IN);
    2912:	e9 81       	ldd	r30, Y+1	; 0x01
    2914:	fa 81       	ldd	r31, Y+2	; 0x02
    2916:	81 81       	ldd	r24, Z+1	; 0x01
    2918:	e9 81       	ldd	r30, Y+1	; 0x01
    291a:	fa 81       	ldd	r31, Y+2	; 0x02
    291c:	92 81       	ldd	r25, Z+2	; 0x02
    291e:	69 2f       	mov	r22, r25
    2920:	40 e0       	ldi	r20, 0x00	; 0
    2922:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
}
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <H_PB_void_read>:
void H_PB_void_read(const PB_t *ptr,VALUE_T *pvalue)
{
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	a1 97       	sbiw	r28, 0x21	; 33
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	f8 94       	cli
    293e:	de bf       	out	0x3e, r29	; 62
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	cd bf       	out	0x3d, r28	; 61
    2944:	9f 8f       	std	Y+31, r25	; 0x1f
    2946:	8e 8f       	std	Y+30, r24	; 0x1e
    2948:	79 a3       	std	Y+33, r23	; 0x21
    294a:	68 a3       	std	Y+32, r22	; 0x20
	//u8 read;

	if(ptr -> PB_activeMood == ACTIVE_LOW)
    294c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    294e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2950:	83 81       	ldd	r24, Z+3	; 0x03
    2952:	88 23       	and	r24, r24
    2954:	09 f0       	breq	.+2      	; 0x2958 <H_PB_void_read+0x28>
    2956:	b0 c0       	rjmp	.+352    	; 0x2ab8 <H_PB_void_read+0x188>
	{
		*pvalue=NOT_PRESSED_ACTIVE_LOW ;
    2958:	e8 a1       	ldd	r30, Y+32	; 0x20
    295a:	f9 a1       	ldd	r31, Y+33	; 0x21
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	80 83       	st	Z, r24
		M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, pvalue);
    2960:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2962:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2964:	81 81       	ldd	r24, Z+1	; 0x01
    2966:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2968:	ff 8d       	ldd	r31, Y+31	; 0x1f
    296a:	92 81       	ldd	r25, Z+2	; 0x02
    296c:	28 a1       	ldd	r18, Y+32	; 0x20
    296e:	39 a1       	ldd	r19, Y+33	; 0x21
    2970:	69 2f       	mov	r22, r25
    2972:	a9 01       	movw	r20, r18
    2974:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <M_DIO_void_getPinValue>
		if(*pvalue==PRESSED_ACTIVE_LOW){
    2978:	e8 a1       	ldd	r30, Y+32	; 0x20
    297a:	f9 a1       	ldd	r31, Y+33	; 0x21
    297c:	80 81       	ld	r24, Z
    297e:	88 23       	and	r24, r24
    2980:	09 f0       	breq	.+2      	; 0x2984 <H_PB_void_read+0x54>
    2982:	4f c1       	rjmp	.+670    	; 0x2c22 <H_PB_void_read+0x2f2>
    2984:	80 e0       	ldi	r24, 0x00	; 0
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	a8 e4       	ldi	r26, 0x48	; 72
    298a:	b3 e4       	ldi	r27, 0x43	; 67
    298c:	89 8f       	std	Y+25, r24	; 0x19
    298e:	9a 8f       	std	Y+26, r25	; 0x1a
    2990:	ab 8f       	std	Y+27, r26	; 0x1b
    2992:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2994:	69 8d       	ldd	r22, Y+25	; 0x19
    2996:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2998:	8b 8d       	ldd	r24, Y+27	; 0x1b
    299a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	48 ec       	ldi	r20, 0xC8	; 200
    29a2:	53 e4       	ldi	r21, 0x43	; 67
    29a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	8d 8b       	std	Y+21, r24	; 0x15
    29ae:	9e 8b       	std	Y+22, r25	; 0x16
    29b0:	af 8b       	std	Y+23, r26	; 0x17
    29b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29b4:	6d 89       	ldd	r22, Y+21	; 0x15
    29b6:	7e 89       	ldd	r23, Y+22	; 0x16
    29b8:	8f 89       	ldd	r24, Y+23	; 0x17
    29ba:	98 8d       	ldd	r25, Y+24	; 0x18
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	40 e8       	ldi	r20, 0x80	; 128
    29c2:	5f e3       	ldi	r21, 0x3F	; 63
    29c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29c8:	88 23       	and	r24, r24
    29ca:	2c f4       	brge	.+10     	; 0x29d6 <H_PB_void_read+0xa6>
		__ticks = 1;
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	9c 8b       	std	Y+20, r25	; 0x14
    29d2:	8b 8b       	std	Y+19, r24	; 0x13
    29d4:	3f c0       	rjmp	.+126    	; 0x2a54 <H_PB_void_read+0x124>
	else if (__tmp > 65535)
    29d6:	6d 89       	ldd	r22, Y+21	; 0x15
    29d8:	7e 89       	ldd	r23, Y+22	; 0x16
    29da:	8f 89       	ldd	r24, Y+23	; 0x17
    29dc:	98 8d       	ldd	r25, Y+24	; 0x18
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	3f ef       	ldi	r19, 0xFF	; 255
    29e2:	4f e7       	ldi	r20, 0x7F	; 127
    29e4:	57 e4       	ldi	r21, 0x47	; 71
    29e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29ea:	18 16       	cp	r1, r24
    29ec:	4c f5       	brge	.+82     	; 0x2a40 <H_PB_void_read+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ee:	69 8d       	ldd	r22, Y+25	; 0x19
    29f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	40 e2       	ldi	r20, 0x20	; 32
    29fc:	51 e4       	ldi	r21, 0x41	; 65
    29fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	bc 01       	movw	r22, r24
    2a08:	cd 01       	movw	r24, r26
    2a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	9c 8b       	std	Y+20, r25	; 0x14
    2a14:	8b 8b       	std	Y+19, r24	; 0x13
    2a16:	0f c0       	rjmp	.+30     	; 0x2a36 <H_PB_void_read+0x106>
    2a18:	88 e2       	ldi	r24, 0x28	; 40
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	9a 8b       	std	Y+18, r25	; 0x12
    2a1e:	89 8b       	std	Y+17, r24	; 0x11
    2a20:	89 89       	ldd	r24, Y+17	; 0x11
    2a22:	9a 89       	ldd	r25, Y+18	; 0x12
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <H_PB_void_read+0xf4>
    2a28:	9a 8b       	std	Y+18, r25	; 0x12
    2a2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	9c 8b       	std	Y+20, r25	; 0x14
    2a34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a36:	8b 89       	ldd	r24, Y+19	; 0x13
    2a38:	9c 89       	ldd	r25, Y+20	; 0x14
    2a3a:	00 97       	sbiw	r24, 0x00	; 0
    2a3c:	69 f7       	brne	.-38     	; 0x2a18 <H_PB_void_read+0xe8>
    2a3e:	14 c0       	rjmp	.+40     	; 0x2a68 <H_PB_void_read+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a40:	6d 89       	ldd	r22, Y+21	; 0x15
    2a42:	7e 89       	ldd	r23, Y+22	; 0x16
    2a44:	8f 89       	ldd	r24, Y+23	; 0x17
    2a46:	98 8d       	ldd	r25, Y+24	; 0x18
    2a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	9c 8b       	std	Y+20, r25	; 0x14
    2a52:	8b 8b       	std	Y+19, r24	; 0x13
    2a54:	8b 89       	ldd	r24, Y+19	; 0x13
    2a56:	9c 89       	ldd	r25, Y+20	; 0x14
    2a58:	98 8b       	std	Y+16, r25	; 0x10
    2a5a:	8f 87       	std	Y+15, r24	; 0x0f
    2a5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a5e:	98 89       	ldd	r25, Y+16	; 0x10
    2a60:	01 97       	sbiw	r24, 0x01	; 1
    2a62:	f1 f7       	brne	.-4      	; 0x2a60 <H_PB_void_read+0x130>
    2a64:	98 8b       	std	Y+16, r25	; 0x10
    2a66:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);

			M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin,pvalue);
    2a68:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2a6a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2a6c:	81 81       	ldd	r24, Z+1	; 0x01
    2a6e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2a70:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2a72:	92 81       	ldd	r25, Z+2	; 0x02
    2a74:	28 a1       	ldd	r18, Y+32	; 0x20
    2a76:	39 a1       	ldd	r19, Y+33	; 0x21
    2a78:	69 2f       	mov	r22, r25
    2a7a:	a9 01       	movw	r20, r18
    2a7c:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <M_DIO_void_getPinValue>
			if (*pvalue==PRESSED_ACTIVE_LOW)
    2a80:	e8 a1       	ldd	r30, Y+32	; 0x20
    2a82:	f9 a1       	ldd	r31, Y+33	; 0x21
    2a84:	80 81       	ld	r24, Z
    2a86:	88 23       	and	r24, r24
    2a88:	09 f0       	breq	.+2      	; 0x2a8c <H_PB_void_read+0x15c>
    2a8a:	cb c0       	rjmp	.+406    	; 0x2c22 <H_PB_void_read+0x2f2>
    2a8c:	0c c0       	rjmp	.+24     	; 0x2aa6 <H_PB_void_read+0x176>
			{
				while(*pvalue==PRESSED_ACTIVE_LOW)
				{
					M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, pvalue);
    2a8e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2a90:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2a92:	81 81       	ldd	r24, Z+1	; 0x01
    2a94:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2a96:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2a98:	92 81       	ldd	r25, Z+2	; 0x02
    2a9a:	28 a1       	ldd	r18, Y+32	; 0x20
    2a9c:	39 a1       	ldd	r19, Y+33	; 0x21
    2a9e:	69 2f       	mov	r22, r25
    2aa0:	a9 01       	movw	r20, r18
    2aa2:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <M_DIO_void_getPinValue>
			_delay_ms(200);

			M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin,pvalue);
			if (*pvalue==PRESSED_ACTIVE_LOW)
			{
				while(*pvalue==PRESSED_ACTIVE_LOW)
    2aa6:	e8 a1       	ldd	r30, Y+32	; 0x20
    2aa8:	f9 a1       	ldd	r31, Y+33	; 0x21
    2aaa:	80 81       	ld	r24, Z
    2aac:	88 23       	and	r24, r24
    2aae:	79 f3       	breq	.-34     	; 0x2a8e <H_PB_void_read+0x15e>
				{
					M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, pvalue);
				}
				*pvalue=PRESSED_ACTIVE_LOW;
    2ab0:	e8 a1       	ldd	r30, Y+32	; 0x20
    2ab2:	f9 a1       	ldd	r31, Y+33	; 0x21
    2ab4:	10 82       	st	Z, r1
    2ab6:	b5 c0       	rjmp	.+362    	; 0x2c22 <H_PB_void_read+0x2f2>
				return;
			}

		}
	}
	else if(ptr->PB_activeMood==ACTIVE_HIGH)
    2ab8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2aba:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2abc:	83 81       	ldd	r24, Z+3	; 0x03
    2abe:	81 30       	cpi	r24, 0x01	; 1
    2ac0:	09 f0       	breq	.+2      	; 0x2ac4 <H_PB_void_read+0x194>
    2ac2:	af c0       	rjmp	.+350    	; 0x2c22 <H_PB_void_read+0x2f2>
	{
		u8 read;

		if(ptr->PB_activeMood==ACTIVE_LOW)
    2ac4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2ac6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2ac8:	83 81       	ldd	r24, Z+3	; 0x03
    2aca:	88 23       	and	r24, r24
    2acc:	09 f0       	breq	.+2      	; 0x2ad0 <H_PB_void_read+0x1a0>
    2ace:	a9 c0       	rjmp	.+338    	; 0x2c22 <H_PB_void_read+0x2f2>
		{
			read=NOT_PRESSED_ACTIVEHIGH ;
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	8d 8f       	std	Y+29, r24	; 0x1d
			M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
    2ad4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2ad6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2ad8:	81 81       	ldd	r24, Z+1	; 0x01
    2ada:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2adc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2ade:	92 81       	ldd	r25, Z+2	; 0x02
    2ae0:	9e 01       	movw	r18, r28
    2ae2:	20 5e       	subi	r18, 0xE0	; 224
    2ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae6:	69 2f       	mov	r22, r25
    2ae8:	a9 01       	movw	r20, r18
    2aea:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <M_DIO_void_getPinValue>
			if(read==PRESSED_ACTIVE_LOW){
    2aee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2af0:	88 23       	and	r24, r24
    2af2:	09 f0       	breq	.+2      	; 0x2af6 <H_PB_void_read+0x1c6>
    2af4:	96 c0       	rjmp	.+300    	; 0x2c22 <H_PB_void_read+0x2f2>
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	a8 e4       	ldi	r26, 0x48	; 72
    2afc:	b3 e4       	ldi	r27, 0x43	; 67
    2afe:	8b 87       	std	Y+11, r24	; 0x0b
    2b00:	9c 87       	std	Y+12, r25	; 0x0c
    2b02:	ad 87       	std	Y+13, r26	; 0x0d
    2b04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	48 ec       	ldi	r20, 0xC8	; 200
    2b14:	53 e4       	ldi	r21, 0x43	; 67
    2b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	8f 83       	std	Y+7, r24	; 0x07
    2b20:	98 87       	std	Y+8, r25	; 0x08
    2b22:	a9 87       	std	Y+9, r26	; 0x09
    2b24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b26:	6f 81       	ldd	r22, Y+7	; 0x07
    2b28:	78 85       	ldd	r23, Y+8	; 0x08
    2b2a:	89 85       	ldd	r24, Y+9	; 0x09
    2b2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 e8       	ldi	r20, 0x80	; 128
    2b34:	5f e3       	ldi	r21, 0x3F	; 63
    2b36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b3a:	88 23       	and	r24, r24
    2b3c:	2c f4       	brge	.+10     	; 0x2b48 <H_PB_void_read+0x218>
		__ticks = 1;
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	9e 83       	std	Y+6, r25	; 0x06
    2b44:	8d 83       	std	Y+5, r24	; 0x05
    2b46:	3f c0       	rjmp	.+126    	; 0x2bc6 <H_PB_void_read+0x296>
	else if (__tmp > 65535)
    2b48:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4a:	78 85       	ldd	r23, Y+8	; 0x08
    2b4c:	89 85       	ldd	r24, Y+9	; 0x09
    2b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	3f ef       	ldi	r19, 0xFF	; 255
    2b54:	4f e7       	ldi	r20, 0x7F	; 127
    2b56:	57 e4       	ldi	r21, 0x47	; 71
    2b58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b5c:	18 16       	cp	r1, r24
    2b5e:	4c f5       	brge	.+82     	; 0x2bb2 <H_PB_void_read+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b60:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b62:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	40 e2       	ldi	r20, 0x20	; 32
    2b6e:	51 e4       	ldi	r21, 0x41	; 65
    2b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	bc 01       	movw	r22, r24
    2b7a:	cd 01       	movw	r24, r26
    2b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	9e 83       	std	Y+6, r25	; 0x06
    2b86:	8d 83       	std	Y+5, r24	; 0x05
    2b88:	0f c0       	rjmp	.+30     	; 0x2ba8 <H_PB_void_read+0x278>
    2b8a:	88 e2       	ldi	r24, 0x28	; 40
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	9c 83       	std	Y+4, r25	; 0x04
    2b90:	8b 83       	std	Y+3, r24	; 0x03
    2b92:	8b 81       	ldd	r24, Y+3	; 0x03
    2b94:	9c 81       	ldd	r25, Y+4	; 0x04
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	f1 f7       	brne	.-4      	; 0x2b96 <H_PB_void_read+0x266>
    2b9a:	9c 83       	std	Y+4, r25	; 0x04
    2b9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	9e 83       	std	Y+6, r25	; 0x06
    2ba6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    2baa:	9e 81       	ldd	r25, Y+6	; 0x06
    2bac:	00 97       	sbiw	r24, 0x00	; 0
    2bae:	69 f7       	brne	.-38     	; 0x2b8a <H_PB_void_read+0x25a>
    2bb0:	14 c0       	rjmp	.+40     	; 0x2bda <H_PB_void_read+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb4:	78 85       	ldd	r23, Y+8	; 0x08
    2bb6:	89 85       	ldd	r24, Y+9	; 0x09
    2bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	9e 83       	std	Y+6, r25	; 0x06
    2bc4:	8d 83       	std	Y+5, r24	; 0x05
    2bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bca:	9a 83       	std	Y+2, r25	; 0x02
    2bcc:	89 83       	std	Y+1, r24	; 0x01
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	f1 f7       	brne	.-4      	; 0x2bd2 <H_PB_void_read+0x2a2>
    2bd6:	9a 83       	std	Y+2, r25	; 0x02
    2bd8:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(200);

				M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
    2bda:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2bdc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2bde:	81 81       	ldd	r24, Z+1	; 0x01
    2be0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2be2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2be4:	92 81       	ldd	r25, Z+2	; 0x02
    2be6:	9e 01       	movw	r18, r28
    2be8:	20 5e       	subi	r18, 0xE0	; 224
    2bea:	3f 4f       	sbci	r19, 0xFF	; 255
    2bec:	69 2f       	mov	r22, r25
    2bee:	a9 01       	movw	r20, r18
    2bf0:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <M_DIO_void_getPinValue>
				if (read==PRESSED_ACTIVE_LOW)
    2bf4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bf6:	88 23       	and	r24, r24
    2bf8:	a1 f4       	brne	.+40     	; 0x2c22 <H_PB_void_read+0x2f2>
    2bfa:	0d c0       	rjmp	.+26     	; 0x2c16 <H_PB_void_read+0x2e6>
				{
					while(read==PRESSED_ACTIVE_LOW)
					{
						M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
    2bfc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2bfe:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c00:	81 81       	ldd	r24, Z+1	; 0x01
    2c02:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2c04:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c06:	92 81       	ldd	r25, Z+2	; 0x02
    2c08:	9e 01       	movw	r18, r28
    2c0a:	20 5e       	subi	r18, 0xE0	; 224
    2c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c0e:	69 2f       	mov	r22, r25
    2c10:	a9 01       	movw	r20, r18
    2c12:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <M_DIO_void_getPinValue>
				_delay_ms(200);

				M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
				if (read==PRESSED_ACTIVE_LOW)
				{
					while(read==PRESSED_ACTIVE_LOW)
    2c16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c18:	88 23       	and	r24, r24
    2c1a:	81 f3       	breq	.-32     	; 0x2bfc <H_PB_void_read+0x2cc>
					{
						M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
					}
					*pvalue=PRESSED_ACTIVE_LOW;
    2c1c:	e8 a1       	ldd	r30, Y+32	; 0x20
    2c1e:	f9 a1       	ldd	r31, Y+33	; 0x21
    2c20:	10 82       	st	Z, r1
				}

			}
		}
	}
}
    2c22:	a1 96       	adiw	r28, 0x21	; 33
    2c24:	0f b6       	in	r0, 0x3f	; 63
    2c26:	f8 94       	cli
    2c28:	de bf       	out	0x3e, r29	; 62
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	cd bf       	out	0x3d, r28	; 61
    2c2e:	cf 91       	pop	r28
    2c30:	df 91       	pop	r29
    2c32:	08 95       	ret

00002c34 <H_Led_void_ledInit>:
#include "LED_priv.h"
#include"LED_config.h"
#include"LED_int.h"

void  H_Led_void_ledInit(u8 LedID)
{
    2c34:	df 93       	push	r29
    2c36:	cf 93       	push	r28
    2c38:	00 d0       	rcall	.+0      	; 0x2c3a <H_Led_void_ledInit+0x6>
    2c3a:	0f 92       	push	r0
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
    2c40:	89 83       	std	Y+1, r24	; 0x01
	switch (LedID)
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	28 2f       	mov	r18, r24
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	3b 83       	std	Y+3, r19	; 0x03
    2c4a:	2a 83       	std	Y+2, r18	; 0x02
    2c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c50:	81 30       	cpi	r24, 0x01	; 1
    2c52:	91 05       	cpc	r25, r1
    2c54:	79 f0       	breq	.+30     	; 0x2c74 <H_Led_void_ledInit+0x40>
    2c56:	2a 81       	ldd	r18, Y+2	; 0x02
    2c58:	3b 81       	ldd	r19, Y+3	; 0x03
    2c5a:	22 30       	cpi	r18, 0x02	; 2
    2c5c:	31 05       	cpc	r19, r1
    2c5e:	81 f0       	breq	.+32     	; 0x2c80 <H_Led_void_ledInit+0x4c>
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	9b 81       	ldd	r25, Y+3	; 0x03
    2c64:	00 97       	sbiw	r24, 0x00	; 0
    2c66:	89 f4       	brne	.+34     	; 0x2c8a <H_Led_void_ledInit+0x56>
	{
	case RED_LED :
			M_DIO_void_setPinDir(LED_RED_PORT,  LED_RED_PIN , OUT);
    2c68:	82 e0       	ldi	r24, 0x02	; 2
    2c6a:	60 e0       	ldi	r22, 0x00	; 0
    2c6c:	41 e0       	ldi	r20, 0x01	; 1
    2c6e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
    2c72:	0b c0       	rjmp	.+22     	; 0x2c8a <H_Led_void_ledInit+0x56>
		break;
	case GRN_LED :
			M_DIO_void_setPinDir(LED_GRN_PORT,  LED_GRN_PIN , OUT);
    2c74:	82 e0       	ldi	r24, 0x02	; 2
    2c76:	62 e0       	ldi	r22, 0x02	; 2
    2c78:	41 e0       	ldi	r20, 0x01	; 1
    2c7a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
    2c7e:	05 c0       	rjmp	.+10     	; 0x2c8a <H_Led_void_ledInit+0x56>
			break;
	case BLU_LED :
			M_DIO_void_setPinDir(LED_BLU_PORT,  LED_BLU_PIN , OUT);
    2c80:	82 e0       	ldi	r24, 0x02	; 2
    2c82:	61 e0       	ldi	r22, 0x01	; 1
    2c84:	41 e0       	ldi	r20, 0x01	; 1
    2c86:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
			break;
	}
}
    2c8a:	0f 90       	pop	r0
    2c8c:	0f 90       	pop	r0
    2c8e:	0f 90       	pop	r0
    2c90:	cf 91       	pop	r28
    2c92:	df 91       	pop	r29
    2c94:	08 95       	ret

00002c96 <H_Led_void_setON>:


void  H_Led_void_setON(u8 LedID)
{
    2c96:	df 93       	push	r29
    2c98:	cf 93       	push	r28
    2c9a:	00 d0       	rcall	.+0      	; 0x2c9c <H_Led_void_setON+0x6>
    2c9c:	0f 92       	push	r0
    2c9e:	cd b7       	in	r28, 0x3d	; 61
    2ca0:	de b7       	in	r29, 0x3e	; 62
    2ca2:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID)
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	28 2f       	mov	r18, r24
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	3b 83       	std	Y+3, r19	; 0x03
    2cac:	2a 83       	std	Y+2, r18	; 0x02
    2cae:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb2:	81 30       	cpi	r24, 0x01	; 1
    2cb4:	91 05       	cpc	r25, r1
    2cb6:	79 f0       	breq	.+30     	; 0x2cd6 <H_Led_void_setON+0x40>
    2cb8:	2a 81       	ldd	r18, Y+2	; 0x02
    2cba:	3b 81       	ldd	r19, Y+3	; 0x03
    2cbc:	22 30       	cpi	r18, 0x02	; 2
    2cbe:	31 05       	cpc	r19, r1
    2cc0:	81 f0       	breq	.+32     	; 0x2ce2 <H_Led_void_setON+0x4c>
    2cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	89 f4       	brne	.+34     	; 0x2cec <H_Led_void_setON+0x56>
	{
	case RED_LED :
#if (LED_RED_DIRECTION == LED_FORWARD )
		M_DIO_void_setPinValue(LED_RED_PORT,LED_RED_PIN,HIGH);
    2cca:	82 e0       	ldi	r24, 0x02	; 2
    2ccc:	60 e0       	ldi	r22, 0x00	; 0
    2cce:	41 e0       	ldi	r20, 0x01	; 1
    2cd0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    2cd4:	0b c0       	rjmp	.+22     	; 0x2cec <H_Led_void_setON+0x56>
#endif
		break;

	case GRN_LED :
#if (LED_GRN_DIRECTION == LED_FORWARD )
		M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,HIGH);
    2cd6:	82 e0       	ldi	r24, 0x02	; 2
    2cd8:	62 e0       	ldi	r22, 0x02	; 2
    2cda:	41 e0       	ldi	r20, 0x01	; 1
    2cdc:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    2ce0:	05 c0       	rjmp	.+10     	; 0x2cec <H_Led_void_setON+0x56>
		M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,LOW);
#endif
		break;
	case BLU_LED :
	#if (LED_BLU_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,HIGH);
    2ce2:	82 e0       	ldi	r24, 0x02	; 2
    2ce4:	61 e0       	ldi	r22, 0x01	; 1
    2ce6:	41 e0       	ldi	r20, 0x01	; 1
    2ce8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
			break;



	}
}
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret

00002cf8 <H_Led_void_setOFF>:
void  H_Led_void_setOFF(u8 LedID)
{
    2cf8:	df 93       	push	r29
    2cfa:	cf 93       	push	r28
    2cfc:	00 d0       	rcall	.+0      	; 0x2cfe <H_Led_void_setOFF+0x6>
    2cfe:	0f 92       	push	r0
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID)
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	28 2f       	mov	r18, r24
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	3b 83       	std	Y+3, r19	; 0x03
    2d0e:	2a 83       	std	Y+2, r18	; 0x02
    2d10:	8a 81       	ldd	r24, Y+2	; 0x02
    2d12:	9b 81       	ldd	r25, Y+3	; 0x03
    2d14:	81 30       	cpi	r24, 0x01	; 1
    2d16:	91 05       	cpc	r25, r1
    2d18:	79 f0       	breq	.+30     	; 0x2d38 <H_Led_void_setOFF+0x40>
    2d1a:	2a 81       	ldd	r18, Y+2	; 0x02
    2d1c:	3b 81       	ldd	r19, Y+3	; 0x03
    2d1e:	22 30       	cpi	r18, 0x02	; 2
    2d20:	31 05       	cpc	r19, r1
    2d22:	81 f0       	breq	.+32     	; 0x2d44 <H_Led_void_setOFF+0x4c>
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
    2d26:	9b 81       	ldd	r25, Y+3	; 0x03
    2d28:	00 97       	sbiw	r24, 0x00	; 0
    2d2a:	89 f4       	brne	.+34     	; 0x2d4e <H_Led_void_setOFF+0x56>
		{
		case RED_LED :
	#if (LED_RED_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_RED_PORT,LED_RED_PIN,LOW);
    2d2c:	82 e0       	ldi	r24, 0x02	; 2
    2d2e:	60 e0       	ldi	r22, 0x00	; 0
    2d30:	40 e0       	ldi	r20, 0x00	; 0
    2d32:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    2d36:	0b c0       	rjmp	.+22     	; 0x2d4e <H_Led_void_setOFF+0x56>
	#endif
			break;

		case GRN_LED :
	#if (LED_GRN_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,LOW);
    2d38:	82 e0       	ldi	r24, 0x02	; 2
    2d3a:	62 e0       	ldi	r22, 0x02	; 2
    2d3c:	40 e0       	ldi	r20, 0x00	; 0
    2d3e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    2d42:	05 c0       	rjmp	.+10     	; 0x2d4e <H_Led_void_setOFF+0x56>
			M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,HIGH);
	#endif
			break;
		case BLU_LED :
		#if (LED_BLU_DIRECTION == LED_FORWARD )
				M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,LOW);
    2d44:	82 e0       	ldi	r24, 0x02	; 2
    2d46:	61 e0       	ldi	r22, 0x01	; 1
    2d48:	40 e0       	ldi	r20, 0x00	; 0
    2d4a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
				M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,HIGH);
		#endif
				break;

		}
}
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	cf 91       	pop	r28
    2d56:	df 91       	pop	r29
    2d58:	08 95       	ret

00002d5a <H_Led_void_toggle>:

void  H_Led_void_toggle(u8 LedID)
{
    2d5a:	df 93       	push	r29
    2d5c:	cf 93       	push	r28
    2d5e:	00 d0       	rcall	.+0      	; 0x2d60 <H_Led_void_toggle+0x6>
    2d60:	0f 92       	push	r0
    2d62:	cd b7       	in	r28, 0x3d	; 61
    2d64:	de b7       	in	r29, 0x3e	; 62
    2d66:	89 83       	std	Y+1, r24	; 0x01
	switch (LedID)
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
    2d6a:	28 2f       	mov	r18, r24
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	3b 83       	std	Y+3, r19	; 0x03
    2d70:	2a 83       	std	Y+2, r18	; 0x02
    2d72:	8a 81       	ldd	r24, Y+2	; 0x02
    2d74:	9b 81       	ldd	r25, Y+3	; 0x03
    2d76:	81 30       	cpi	r24, 0x01	; 1
    2d78:	91 05       	cpc	r25, r1
    2d7a:	71 f0       	breq	.+28     	; 0x2d98 <H_Led_void_toggle+0x3e>
    2d7c:	2a 81       	ldd	r18, Y+2	; 0x02
    2d7e:	3b 81       	ldd	r19, Y+3	; 0x03
    2d80:	22 30       	cpi	r18, 0x02	; 2
    2d82:	31 05       	cpc	r19, r1
    2d84:	71 f0       	breq	.+28     	; 0x2da2 <H_Led_void_toggle+0x48>
    2d86:	8a 81       	ldd	r24, Y+2	; 0x02
    2d88:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8a:	00 97       	sbiw	r24, 0x00	; 0
    2d8c:	71 f4       	brne	.+28     	; 0x2daa <H_Led_void_toggle+0x50>
		{
		case RED_LED :
			 M_DIO_void_TogPinValue(LED_RED_PORT,LED_RED_PIN);
    2d8e:	82 e0       	ldi	r24, 0x02	; 2
    2d90:	60 e0       	ldi	r22, 0x00	; 0
    2d92:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <M_DIO_void_TogPinValue>
    2d96:	09 c0       	rjmp	.+18     	; 0x2daa <H_Led_void_toggle+0x50>

			break;
		case GRN_LED :
			 M_DIO_void_TogPinValue(LED_GRN_PORT, LED_GRN_PIN);
    2d98:	82 e0       	ldi	r24, 0x02	; 2
    2d9a:	62 e0       	ldi	r22, 0x02	; 2
    2d9c:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <M_DIO_void_TogPinValue>
    2da0:	04 c0       	rjmp	.+8      	; 0x2daa <H_Led_void_toggle+0x50>

				break;
		case BLU_LED :
			 M_DIO_void_TogPinValue(LED_BLU_PORT,LED_BLU_PIN);
    2da2:	82 e0       	ldi	r24, 0x02	; 2
    2da4:	61 e0       	ldi	r22, 0x01	; 1
    2da6:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <M_DIO_void_TogPinValue>

				break;
		}
}
    2daa:	0f 90       	pop	r0
    2dac:	0f 90       	pop	r0
    2dae:	0f 90       	pop	r0
    2db0:	cf 91       	pop	r28
    2db2:	df 91       	pop	r29
    2db4:	08 95       	ret

00002db6 <Animation1>:

void Animation1()
{
    2db6:	0f 93       	push	r16
    2db8:	1f 93       	push	r17
    2dba:	df 93       	push	r29
    2dbc:	cf 93       	push	r28
    2dbe:	cd b7       	in	r28, 0x3d	; 61
    2dc0:	de b7       	in	r29, 0x3e	; 62
    2dc2:	c4 55       	subi	r28, 0x54	; 84
    2dc4:	d0 40       	sbci	r29, 0x00	; 0
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	f8 94       	cli
    2dca:	de bf       	out	0x3e, r29	; 62
    2dcc:	0f be       	out	0x3f, r0	; 63
    2dce:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <H_Led_void_setON>
	H_Led_void_setON(BLU_LED);
    2dd6:	82 e0       	ldi	r24, 0x02	; 2
    2dd8:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <H_Led_void_setON>
    2ddc:	fe 01       	movw	r30, r28
    2dde:	ef 5a       	subi	r30, 0xAF	; 175
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	aa ef       	ldi	r26, 0xFA	; 250
    2de8:	b3 e4       	ldi	r27, 0x43	; 67
    2dea:	80 83       	st	Z, r24
    2dec:	91 83       	std	Z+1, r25	; 0x01
    2dee:	a2 83       	std	Z+2, r26	; 0x02
    2df0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df2:	8e 01       	movw	r16, r28
    2df4:	03 5b       	subi	r16, 0xB3	; 179
    2df6:	1f 4f       	sbci	r17, 0xFF	; 255
    2df8:	fe 01       	movw	r30, r28
    2dfa:	ef 5a       	subi	r30, 0xAF	; 175
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	60 81       	ld	r22, Z
    2e00:	71 81       	ldd	r23, Z+1	; 0x01
    2e02:	82 81       	ldd	r24, Z+2	; 0x02
    2e04:	93 81       	ldd	r25, Z+3	; 0x03
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	48 ec       	ldi	r20, 0xC8	; 200
    2e0c:	53 e4       	ldi	r21, 0x43	; 67
    2e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	f8 01       	movw	r30, r16
    2e18:	80 83       	st	Z, r24
    2e1a:	91 83       	std	Z+1, r25	; 0x01
    2e1c:	a2 83       	std	Z+2, r26	; 0x02
    2e1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e20:	fe 01       	movw	r30, r28
    2e22:	e3 5b       	subi	r30, 0xB3	; 179
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	60 81       	ld	r22, Z
    2e28:	71 81       	ldd	r23, Z+1	; 0x01
    2e2a:	82 81       	ldd	r24, Z+2	; 0x02
    2e2c:	93 81       	ldd	r25, Z+3	; 0x03
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	40 e8       	ldi	r20, 0x80	; 128
    2e34:	5f e3       	ldi	r21, 0x3F	; 63
    2e36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e3a:	88 23       	and	r24, r24
    2e3c:	44 f4       	brge	.+16     	; 0x2e4e <Animation1+0x98>
		__ticks = 1;
    2e3e:	fe 01       	movw	r30, r28
    2e40:	e5 5b       	subi	r30, 0xB5	; 181
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	91 83       	std	Z+1, r25	; 0x01
    2e4a:	80 83       	st	Z, r24
    2e4c:	64 c0       	rjmp	.+200    	; 0x2f16 <Animation1+0x160>
	else if (__tmp > 65535)
    2e4e:	fe 01       	movw	r30, r28
    2e50:	e3 5b       	subi	r30, 0xB3	; 179
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	60 81       	ld	r22, Z
    2e56:	71 81       	ldd	r23, Z+1	; 0x01
    2e58:	82 81       	ldd	r24, Z+2	; 0x02
    2e5a:	93 81       	ldd	r25, Z+3	; 0x03
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	3f ef       	ldi	r19, 0xFF	; 255
    2e60:	4f e7       	ldi	r20, 0x7F	; 127
    2e62:	57 e4       	ldi	r21, 0x47	; 71
    2e64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e68:	18 16       	cp	r1, r24
    2e6a:	0c f0       	brlt	.+2      	; 0x2e6e <Animation1+0xb8>
    2e6c:	43 c0       	rjmp	.+134    	; 0x2ef4 <Animation1+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6e:	fe 01       	movw	r30, r28
    2e70:	ef 5a       	subi	r30, 0xAF	; 175
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	60 81       	ld	r22, Z
    2e76:	71 81       	ldd	r23, Z+1	; 0x01
    2e78:	82 81       	ldd	r24, Z+2	; 0x02
    2e7a:	93 81       	ldd	r25, Z+3	; 0x03
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	40 e2       	ldi	r20, 0x20	; 32
    2e82:	51 e4       	ldi	r21, 0x41	; 65
    2e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e88:	dc 01       	movw	r26, r24
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	8e 01       	movw	r16, r28
    2e8e:	05 5b       	subi	r16, 0xB5	; 181
    2e90:	1f 4f       	sbci	r17, 0xFF	; 255
    2e92:	bc 01       	movw	r22, r24
    2e94:	cd 01       	movw	r24, r26
    2e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	f8 01       	movw	r30, r16
    2ea0:	91 83       	std	Z+1, r25	; 0x01
    2ea2:	80 83       	st	Z, r24
    2ea4:	1f c0       	rjmp	.+62     	; 0x2ee4 <Animation1+0x12e>
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	e7 5b       	subi	r30, 0xB7	; 183
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	88 e2       	ldi	r24, 0x28	; 40
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	91 83       	std	Z+1, r25	; 0x01
    2eb2:	80 83       	st	Z, r24
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e7 5b       	subi	r30, 0xB7	; 183
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	80 81       	ld	r24, Z
    2ebc:	91 81       	ldd	r25, Z+1	; 0x01
    2ebe:	01 97       	sbiw	r24, 0x01	; 1
    2ec0:	f1 f7       	brne	.-4      	; 0x2ebe <Animation1+0x108>
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	e7 5b       	subi	r30, 0xB7	; 183
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ecc:	de 01       	movw	r26, r28
    2ece:	a5 5b       	subi	r26, 0xB5	; 181
    2ed0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	e5 5b       	subi	r30, 0xB5	; 181
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	80 81       	ld	r24, Z
    2eda:	91 81       	ldd	r25, Z+1	; 0x01
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	11 96       	adiw	r26, 0x01	; 1
    2ee0:	9c 93       	st	X, r25
    2ee2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	e5 5b       	subi	r30, 0xB5	; 181
    2ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eea:	80 81       	ld	r24, Z
    2eec:	91 81       	ldd	r25, Z+1	; 0x01
    2eee:	00 97       	sbiw	r24, 0x00	; 0
    2ef0:	d1 f6       	brne	.-76     	; 0x2ea6 <Animation1+0xf0>
    2ef2:	27 c0       	rjmp	.+78     	; 0x2f42 <Animation1+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef4:	8e 01       	movw	r16, r28
    2ef6:	05 5b       	subi	r16, 0xB5	; 181
    2ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    2efa:	fe 01       	movw	r30, r28
    2efc:	e3 5b       	subi	r30, 0xB3	; 179
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	60 81       	ld	r22, Z
    2f02:	71 81       	ldd	r23, Z+1	; 0x01
    2f04:	82 81       	ldd	r24, Z+2	; 0x02
    2f06:	93 81       	ldd	r25, Z+3	; 0x03
    2f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	f8 01       	movw	r30, r16
    2f12:	91 83       	std	Z+1, r25	; 0x01
    2f14:	80 83       	st	Z, r24
    2f16:	de 01       	movw	r26, r28
    2f18:	a9 5b       	subi	r26, 0xB9	; 185
    2f1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	e5 5b       	subi	r30, 0xB5	; 181
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	80 81       	ld	r24, Z
    2f24:	91 81       	ldd	r25, Z+1	; 0x01
    2f26:	8d 93       	st	X+, r24
    2f28:	9c 93       	st	X, r25
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	e9 5b       	subi	r30, 0xB9	; 185
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	80 81       	ld	r24, Z
    2f32:	91 81       	ldd	r25, Z+1	; 0x01
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	f1 f7       	brne	.-4      	; 0x2f34 <Animation1+0x17e>
    2f38:	fe 01       	movw	r30, r28
    2f3a:	e9 5b       	subi	r30, 0xB9	; 185
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	91 83       	std	Z+1, r25	; 0x01
    2f40:	80 83       	st	Z, r24
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <H_Led_void_setOFF>
	H_Led_void_setOFF(BLU_LED);
    2f48:	82 e0       	ldi	r24, 0x02	; 2
    2f4a:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <H_Led_void_setOFF>
    2f4e:	fe 01       	movw	r30, r28
    2f50:	ed 5b       	subi	r30, 0xBD	; 189
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	80 e0       	ldi	r24, 0x00	; 0
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	aa ef       	ldi	r26, 0xFA	; 250
    2f5a:	b3 e4       	ldi	r27, 0x43	; 67
    2f5c:	80 83       	st	Z, r24
    2f5e:	91 83       	std	Z+1, r25	; 0x01
    2f60:	a2 83       	std	Z+2, r26	; 0x02
    2f62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f64:	8e 01       	movw	r16, r28
    2f66:	01 5c       	subi	r16, 0xC1	; 193
    2f68:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	ed 5b       	subi	r30, 0xBD	; 189
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	60 81       	ld	r22, Z
    2f72:	71 81       	ldd	r23, Z+1	; 0x01
    2f74:	82 81       	ldd	r24, Z+2	; 0x02
    2f76:	93 81       	ldd	r25, Z+3	; 0x03
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	48 ec       	ldi	r20, 0xC8	; 200
    2f7e:	53 e4       	ldi	r21, 0x43	; 67
    2f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	f8 01       	movw	r30, r16
    2f8a:	80 83       	st	Z, r24
    2f8c:	91 83       	std	Z+1, r25	; 0x01
    2f8e:	a2 83       	std	Z+2, r26	; 0x02
    2f90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f92:	fe 01       	movw	r30, r28
    2f94:	ff 96       	adiw	r30, 0x3f	; 63
    2f96:	60 81       	ld	r22, Z
    2f98:	71 81       	ldd	r23, Z+1	; 0x01
    2f9a:	82 81       	ldd	r24, Z+2	; 0x02
    2f9c:	93 81       	ldd	r25, Z+3	; 0x03
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	40 e8       	ldi	r20, 0x80	; 128
    2fa4:	5f e3       	ldi	r21, 0x3F	; 63
    2fa6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2faa:	88 23       	and	r24, r24
    2fac:	2c f4       	brge	.+10     	; 0x2fb8 <Animation1+0x202>
		__ticks = 1;
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	9e af       	std	Y+62, r25	; 0x3e
    2fb4:	8d af       	std	Y+61, r24	; 0x3d
    2fb6:	46 c0       	rjmp	.+140    	; 0x3044 <Animation1+0x28e>
	else if (__tmp > 65535)
    2fb8:	fe 01       	movw	r30, r28
    2fba:	ff 96       	adiw	r30, 0x3f	; 63
    2fbc:	60 81       	ld	r22, Z
    2fbe:	71 81       	ldd	r23, Z+1	; 0x01
    2fc0:	82 81       	ldd	r24, Z+2	; 0x02
    2fc2:	93 81       	ldd	r25, Z+3	; 0x03
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	3f ef       	ldi	r19, 0xFF	; 255
    2fc8:	4f e7       	ldi	r20, 0x7F	; 127
    2fca:	57 e4       	ldi	r21, 0x47	; 71
    2fcc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fd0:	18 16       	cp	r1, r24
    2fd2:	64 f5       	brge	.+88     	; 0x302c <Animation1+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	ed 5b       	subi	r30, 0xBD	; 189
    2fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fda:	60 81       	ld	r22, Z
    2fdc:	71 81       	ldd	r23, Z+1	; 0x01
    2fde:	82 81       	ldd	r24, Z+2	; 0x02
    2fe0:	93 81       	ldd	r25, Z+3	; 0x03
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	40 e2       	ldi	r20, 0x20	; 32
    2fe8:	51 e4       	ldi	r21, 0x41	; 65
    2fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	bc 01       	movw	r22, r24
    2ff4:	cd 01       	movw	r24, r26
    2ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	9e af       	std	Y+62, r25	; 0x3e
    3000:	8d af       	std	Y+61, r24	; 0x3d
    3002:	0f c0       	rjmp	.+30     	; 0x3022 <Animation1+0x26c>
    3004:	88 e2       	ldi	r24, 0x28	; 40
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	9c af       	std	Y+60, r25	; 0x3c
    300a:	8b af       	std	Y+59, r24	; 0x3b
    300c:	8b ad       	ldd	r24, Y+59	; 0x3b
    300e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	f1 f7       	brne	.-4      	; 0x3010 <Animation1+0x25a>
    3014:	9c af       	std	Y+60, r25	; 0x3c
    3016:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3018:	8d ad       	ldd	r24, Y+61	; 0x3d
    301a:	9e ad       	ldd	r25, Y+62	; 0x3e
    301c:	01 97       	sbiw	r24, 0x01	; 1
    301e:	9e af       	std	Y+62, r25	; 0x3e
    3020:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3022:	8d ad       	ldd	r24, Y+61	; 0x3d
    3024:	9e ad       	ldd	r25, Y+62	; 0x3e
    3026:	00 97       	sbiw	r24, 0x00	; 0
    3028:	69 f7       	brne	.-38     	; 0x3004 <Animation1+0x24e>
    302a:	16 c0       	rjmp	.+44     	; 0x3058 <Animation1+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    302c:	fe 01       	movw	r30, r28
    302e:	ff 96       	adiw	r30, 0x3f	; 63
    3030:	60 81       	ld	r22, Z
    3032:	71 81       	ldd	r23, Z+1	; 0x01
    3034:	82 81       	ldd	r24, Z+2	; 0x02
    3036:	93 81       	ldd	r25, Z+3	; 0x03
    3038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	9e af       	std	Y+62, r25	; 0x3e
    3042:	8d af       	std	Y+61, r24	; 0x3d
    3044:	8d ad       	ldd	r24, Y+61	; 0x3d
    3046:	9e ad       	ldd	r25, Y+62	; 0x3e
    3048:	9a af       	std	Y+58, r25	; 0x3a
    304a:	89 af       	std	Y+57, r24	; 0x39
    304c:	89 ad       	ldd	r24, Y+57	; 0x39
    304e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3050:	01 97       	sbiw	r24, 0x01	; 1
    3052:	f1 f7       	brne	.-4      	; 0x3050 <Animation1+0x29a>
    3054:	9a af       	std	Y+58, r25	; 0x3a
    3056:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
    H_Led_void_setON(BLU_LED);
    3058:	82 e0       	ldi	r24, 0x02	; 2
    305a:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <H_Led_void_setON>
    H_Led_void_setON(GRN_LED);
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <H_Led_void_setON>
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	aa ef       	ldi	r26, 0xFA	; 250
    306a:	b3 e4       	ldi	r27, 0x43	; 67
    306c:	8d ab       	std	Y+53, r24	; 0x35
    306e:	9e ab       	std	Y+54, r25	; 0x36
    3070:	af ab       	std	Y+55, r26	; 0x37
    3072:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3074:	6d a9       	ldd	r22, Y+53	; 0x35
    3076:	7e a9       	ldd	r23, Y+54	; 0x36
    3078:	8f a9       	ldd	r24, Y+55	; 0x37
    307a:	98 ad       	ldd	r25, Y+56	; 0x38
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	48 ec       	ldi	r20, 0xC8	; 200
    3082:	53 e4       	ldi	r21, 0x43	; 67
    3084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	89 ab       	std	Y+49, r24	; 0x31
    308e:	9a ab       	std	Y+50, r25	; 0x32
    3090:	ab ab       	std	Y+51, r26	; 0x33
    3092:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3094:	69 a9       	ldd	r22, Y+49	; 0x31
    3096:	7a a9       	ldd	r23, Y+50	; 0x32
    3098:	8b a9       	ldd	r24, Y+51	; 0x33
    309a:	9c a9       	ldd	r25, Y+52	; 0x34
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e8       	ldi	r20, 0x80	; 128
    30a2:	5f e3       	ldi	r21, 0x3F	; 63
    30a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30a8:	88 23       	and	r24, r24
    30aa:	2c f4       	brge	.+10     	; 0x30b6 <Animation1+0x300>
		__ticks = 1;
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	98 ab       	std	Y+48, r25	; 0x30
    30b2:	8f a7       	std	Y+47, r24	; 0x2f
    30b4:	3f c0       	rjmp	.+126    	; 0x3134 <Animation1+0x37e>
	else if (__tmp > 65535)
    30b6:	69 a9       	ldd	r22, Y+49	; 0x31
    30b8:	7a a9       	ldd	r23, Y+50	; 0x32
    30ba:	8b a9       	ldd	r24, Y+51	; 0x33
    30bc:	9c a9       	ldd	r25, Y+52	; 0x34
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	3f ef       	ldi	r19, 0xFF	; 255
    30c2:	4f e7       	ldi	r20, 0x7F	; 127
    30c4:	57 e4       	ldi	r21, 0x47	; 71
    30c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ca:	18 16       	cp	r1, r24
    30cc:	4c f5       	brge	.+82     	; 0x3120 <Animation1+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ce:	6d a9       	ldd	r22, Y+53	; 0x35
    30d0:	7e a9       	ldd	r23, Y+54	; 0x36
    30d2:	8f a9       	ldd	r24, Y+55	; 0x37
    30d4:	98 ad       	ldd	r25, Y+56	; 0x38
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	40 e2       	ldi	r20, 0x20	; 32
    30dc:	51 e4       	ldi	r21, 0x41	; 65
    30de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	bc 01       	movw	r22, r24
    30e8:	cd 01       	movw	r24, r26
    30ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	98 ab       	std	Y+48, r25	; 0x30
    30f4:	8f a7       	std	Y+47, r24	; 0x2f
    30f6:	0f c0       	rjmp	.+30     	; 0x3116 <Animation1+0x360>
    30f8:	88 e2       	ldi	r24, 0x28	; 40
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	9e a7       	std	Y+46, r25	; 0x2e
    30fe:	8d a7       	std	Y+45, r24	; 0x2d
    3100:	8d a5       	ldd	r24, Y+45	; 0x2d
    3102:	9e a5       	ldd	r25, Y+46	; 0x2e
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	f1 f7       	brne	.-4      	; 0x3104 <Animation1+0x34e>
    3108:	9e a7       	std	Y+46, r25	; 0x2e
    310a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    310c:	8f a5       	ldd	r24, Y+47	; 0x2f
    310e:	98 a9       	ldd	r25, Y+48	; 0x30
    3110:	01 97       	sbiw	r24, 0x01	; 1
    3112:	98 ab       	std	Y+48, r25	; 0x30
    3114:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3116:	8f a5       	ldd	r24, Y+47	; 0x2f
    3118:	98 a9       	ldd	r25, Y+48	; 0x30
    311a:	00 97       	sbiw	r24, 0x00	; 0
    311c:	69 f7       	brne	.-38     	; 0x30f8 <Animation1+0x342>
    311e:	14 c0       	rjmp	.+40     	; 0x3148 <Animation1+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3120:	69 a9       	ldd	r22, Y+49	; 0x31
    3122:	7a a9       	ldd	r23, Y+50	; 0x32
    3124:	8b a9       	ldd	r24, Y+51	; 0x33
    3126:	9c a9       	ldd	r25, Y+52	; 0x34
    3128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	98 ab       	std	Y+48, r25	; 0x30
    3132:	8f a7       	std	Y+47, r24	; 0x2f
    3134:	8f a5       	ldd	r24, Y+47	; 0x2f
    3136:	98 a9       	ldd	r25, Y+48	; 0x30
    3138:	9c a7       	std	Y+44, r25	; 0x2c
    313a:	8b a7       	std	Y+43, r24	; 0x2b
    313c:	8b a5       	ldd	r24, Y+43	; 0x2b
    313e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3140:	01 97       	sbiw	r24, 0x01	; 1
    3142:	f1 f7       	brne	.-4      	; 0x3140 <Animation1+0x38a>
    3144:	9c a7       	std	Y+44, r25	; 0x2c
    3146:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(500);
    H_Led_void_setOFF(BLU_LED);
    3148:	82 e0       	ldi	r24, 0x02	; 2
    314a:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <H_Led_void_setOFF>
    H_Led_void_setOFF(GRN_LED);
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <H_Led_void_setOFF>
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	aa ef       	ldi	r26, 0xFA	; 250
    315a:	b3 e4       	ldi	r27, 0x43	; 67
    315c:	8f a3       	std	Y+39, r24	; 0x27
    315e:	98 a7       	std	Y+40, r25	; 0x28
    3160:	a9 a7       	std	Y+41, r26	; 0x29
    3162:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3164:	6f a1       	ldd	r22, Y+39	; 0x27
    3166:	78 a5       	ldd	r23, Y+40	; 0x28
    3168:	89 a5       	ldd	r24, Y+41	; 0x29
    316a:	9a a5       	ldd	r25, Y+42	; 0x2a
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	48 ec       	ldi	r20, 0xC8	; 200
    3172:	53 e4       	ldi	r21, 0x43	; 67
    3174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3178:	dc 01       	movw	r26, r24
    317a:	cb 01       	movw	r24, r22
    317c:	8b a3       	std	Y+35, r24	; 0x23
    317e:	9c a3       	std	Y+36, r25	; 0x24
    3180:	ad a3       	std	Y+37, r26	; 0x25
    3182:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3184:	6b a1       	ldd	r22, Y+35	; 0x23
    3186:	7c a1       	ldd	r23, Y+36	; 0x24
    3188:	8d a1       	ldd	r24, Y+37	; 0x25
    318a:	9e a1       	ldd	r25, Y+38	; 0x26
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	40 e8       	ldi	r20, 0x80	; 128
    3192:	5f e3       	ldi	r21, 0x3F	; 63
    3194:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3198:	88 23       	and	r24, r24
    319a:	2c f4       	brge	.+10     	; 0x31a6 <Animation1+0x3f0>
		__ticks = 1;
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	9a a3       	std	Y+34, r25	; 0x22
    31a2:	89 a3       	std	Y+33, r24	; 0x21
    31a4:	3f c0       	rjmp	.+126    	; 0x3224 <Animation1+0x46e>
	else if (__tmp > 65535)
    31a6:	6b a1       	ldd	r22, Y+35	; 0x23
    31a8:	7c a1       	ldd	r23, Y+36	; 0x24
    31aa:	8d a1       	ldd	r24, Y+37	; 0x25
    31ac:	9e a1       	ldd	r25, Y+38	; 0x26
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	3f ef       	ldi	r19, 0xFF	; 255
    31b2:	4f e7       	ldi	r20, 0x7F	; 127
    31b4:	57 e4       	ldi	r21, 0x47	; 71
    31b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31ba:	18 16       	cp	r1, r24
    31bc:	4c f5       	brge	.+82     	; 0x3210 <Animation1+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31be:	6f a1       	ldd	r22, Y+39	; 0x27
    31c0:	78 a5       	ldd	r23, Y+40	; 0x28
    31c2:	89 a5       	ldd	r24, Y+41	; 0x29
    31c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	40 e2       	ldi	r20, 0x20	; 32
    31cc:	51 e4       	ldi	r21, 0x41	; 65
    31ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	bc 01       	movw	r22, r24
    31d8:	cd 01       	movw	r24, r26
    31da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	9a a3       	std	Y+34, r25	; 0x22
    31e4:	89 a3       	std	Y+33, r24	; 0x21
    31e6:	0f c0       	rjmp	.+30     	; 0x3206 <Animation1+0x450>
    31e8:	88 e2       	ldi	r24, 0x28	; 40
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	98 a3       	std	Y+32, r25	; 0x20
    31ee:	8f 8f       	std	Y+31, r24	; 0x1f
    31f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31f2:	98 a1       	ldd	r25, Y+32	; 0x20
    31f4:	01 97       	sbiw	r24, 0x01	; 1
    31f6:	f1 f7       	brne	.-4      	; 0x31f4 <Animation1+0x43e>
    31f8:	98 a3       	std	Y+32, r25	; 0x20
    31fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31fc:	89 a1       	ldd	r24, Y+33	; 0x21
    31fe:	9a a1       	ldd	r25, Y+34	; 0x22
    3200:	01 97       	sbiw	r24, 0x01	; 1
    3202:	9a a3       	std	Y+34, r25	; 0x22
    3204:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3206:	89 a1       	ldd	r24, Y+33	; 0x21
    3208:	9a a1       	ldd	r25, Y+34	; 0x22
    320a:	00 97       	sbiw	r24, 0x00	; 0
    320c:	69 f7       	brne	.-38     	; 0x31e8 <Animation1+0x432>
    320e:	14 c0       	rjmp	.+40     	; 0x3238 <Animation1+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3210:	6b a1       	ldd	r22, Y+35	; 0x23
    3212:	7c a1       	ldd	r23, Y+36	; 0x24
    3214:	8d a1       	ldd	r24, Y+37	; 0x25
    3216:	9e a1       	ldd	r25, Y+38	; 0x26
    3218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	9a a3       	std	Y+34, r25	; 0x22
    3222:	89 a3       	std	Y+33, r24	; 0x21
    3224:	89 a1       	ldd	r24, Y+33	; 0x21
    3226:	9a a1       	ldd	r25, Y+34	; 0x22
    3228:	9e 8f       	std	Y+30, r25	; 0x1e
    322a:	8d 8f       	std	Y+29, r24	; 0x1d
    322c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    322e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3230:	01 97       	sbiw	r24, 0x01	; 1
    3232:	f1 f7       	brne	.-4      	; 0x3230 <Animation1+0x47a>
    3234:	9e 8f       	std	Y+30, r25	; 0x1e
    3236:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(500);
    H_Led_void_setON(RED_LED);
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <H_Led_void_setON>
    H_Led_void_setON(GRN_LED);
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <H_Led_void_setON>
    3244:	80 e0       	ldi	r24, 0x00	; 0
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	aa ef       	ldi	r26, 0xFA	; 250
    324a:	b3 e4       	ldi	r27, 0x43	; 67
    324c:	89 8f       	std	Y+25, r24	; 0x19
    324e:	9a 8f       	std	Y+26, r25	; 0x1a
    3250:	ab 8f       	std	Y+27, r26	; 0x1b
    3252:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3254:	69 8d       	ldd	r22, Y+25	; 0x19
    3256:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3258:	8b 8d       	ldd	r24, Y+27	; 0x1b
    325a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	48 ec       	ldi	r20, 0xC8	; 200
    3262:	53 e4       	ldi	r21, 0x43	; 67
    3264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	8d 8b       	std	Y+21, r24	; 0x15
    326e:	9e 8b       	std	Y+22, r25	; 0x16
    3270:	af 8b       	std	Y+23, r26	; 0x17
    3272:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3274:	6d 89       	ldd	r22, Y+21	; 0x15
    3276:	7e 89       	ldd	r23, Y+22	; 0x16
    3278:	8f 89       	ldd	r24, Y+23	; 0x17
    327a:	98 8d       	ldd	r25, Y+24	; 0x18
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	40 e8       	ldi	r20, 0x80	; 128
    3282:	5f e3       	ldi	r21, 0x3F	; 63
    3284:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3288:	88 23       	and	r24, r24
    328a:	2c f4       	brge	.+10     	; 0x3296 <Animation1+0x4e0>
		__ticks = 1;
    328c:	81 e0       	ldi	r24, 0x01	; 1
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	9c 8b       	std	Y+20, r25	; 0x14
    3292:	8b 8b       	std	Y+19, r24	; 0x13
    3294:	3f c0       	rjmp	.+126    	; 0x3314 <Animation1+0x55e>
	else if (__tmp > 65535)
    3296:	6d 89       	ldd	r22, Y+21	; 0x15
    3298:	7e 89       	ldd	r23, Y+22	; 0x16
    329a:	8f 89       	ldd	r24, Y+23	; 0x17
    329c:	98 8d       	ldd	r25, Y+24	; 0x18
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	3f ef       	ldi	r19, 0xFF	; 255
    32a2:	4f e7       	ldi	r20, 0x7F	; 127
    32a4:	57 e4       	ldi	r21, 0x47	; 71
    32a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32aa:	18 16       	cp	r1, r24
    32ac:	4c f5       	brge	.+82     	; 0x3300 <Animation1+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ae:	69 8d       	ldd	r22, Y+25	; 0x19
    32b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	40 e2       	ldi	r20, 0x20	; 32
    32bc:	51 e4       	ldi	r21, 0x41	; 65
    32be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	bc 01       	movw	r22, r24
    32c8:	cd 01       	movw	r24, r26
    32ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	9c 8b       	std	Y+20, r25	; 0x14
    32d4:	8b 8b       	std	Y+19, r24	; 0x13
    32d6:	0f c0       	rjmp	.+30     	; 0x32f6 <Animation1+0x540>
    32d8:	88 e2       	ldi	r24, 0x28	; 40
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	9a 8b       	std	Y+18, r25	; 0x12
    32de:	89 8b       	std	Y+17, r24	; 0x11
    32e0:	89 89       	ldd	r24, Y+17	; 0x11
    32e2:	9a 89       	ldd	r25, Y+18	; 0x12
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	f1 f7       	brne	.-4      	; 0x32e4 <Animation1+0x52e>
    32e8:	9a 8b       	std	Y+18, r25	; 0x12
    32ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ec:	8b 89       	ldd	r24, Y+19	; 0x13
    32ee:	9c 89       	ldd	r25, Y+20	; 0x14
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	9c 8b       	std	Y+20, r25	; 0x14
    32f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f6:	8b 89       	ldd	r24, Y+19	; 0x13
    32f8:	9c 89       	ldd	r25, Y+20	; 0x14
    32fa:	00 97       	sbiw	r24, 0x00	; 0
    32fc:	69 f7       	brne	.-38     	; 0x32d8 <Animation1+0x522>
    32fe:	14 c0       	rjmp	.+40     	; 0x3328 <Animation1+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3300:	6d 89       	ldd	r22, Y+21	; 0x15
    3302:	7e 89       	ldd	r23, Y+22	; 0x16
    3304:	8f 89       	ldd	r24, Y+23	; 0x17
    3306:	98 8d       	ldd	r25, Y+24	; 0x18
    3308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330c:	dc 01       	movw	r26, r24
    330e:	cb 01       	movw	r24, r22
    3310:	9c 8b       	std	Y+20, r25	; 0x14
    3312:	8b 8b       	std	Y+19, r24	; 0x13
    3314:	8b 89       	ldd	r24, Y+19	; 0x13
    3316:	9c 89       	ldd	r25, Y+20	; 0x14
    3318:	98 8b       	std	Y+16, r25	; 0x10
    331a:	8f 87       	std	Y+15, r24	; 0x0f
    331c:	8f 85       	ldd	r24, Y+15	; 0x0f
    331e:	98 89       	ldd	r25, Y+16	; 0x10
    3320:	01 97       	sbiw	r24, 0x01	; 1
    3322:	f1 f7       	brne	.-4      	; 0x3320 <Animation1+0x56a>
    3324:	98 8b       	std	Y+16, r25	; 0x10
    3326:	8f 87       	std	Y+15, r24	; 0x0f
     _delay_ms(500);
     H_Led_void_setOFF(RED_LED);
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <H_Led_void_setOFF>
     H_Led_void_setOFF(GRN_LED);
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <H_Led_void_setOFF>
    3334:	80 e0       	ldi	r24, 0x00	; 0
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	aa ef       	ldi	r26, 0xFA	; 250
    333a:	b3 e4       	ldi	r27, 0x43	; 67
    333c:	8b 87       	std	Y+11, r24	; 0x0b
    333e:	9c 87       	std	Y+12, r25	; 0x0c
    3340:	ad 87       	std	Y+13, r26	; 0x0d
    3342:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3344:	6b 85       	ldd	r22, Y+11	; 0x0b
    3346:	7c 85       	ldd	r23, Y+12	; 0x0c
    3348:	8d 85       	ldd	r24, Y+13	; 0x0d
    334a:	9e 85       	ldd	r25, Y+14	; 0x0e
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	48 ec       	ldi	r20, 0xC8	; 200
    3352:	53 e4       	ldi	r21, 0x43	; 67
    3354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	8f 83       	std	Y+7, r24	; 0x07
    335e:	98 87       	std	Y+8, r25	; 0x08
    3360:	a9 87       	std	Y+9, r26	; 0x09
    3362:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3364:	6f 81       	ldd	r22, Y+7	; 0x07
    3366:	78 85       	ldd	r23, Y+8	; 0x08
    3368:	89 85       	ldd	r24, Y+9	; 0x09
    336a:	9a 85       	ldd	r25, Y+10	; 0x0a
    336c:	20 e0       	ldi	r18, 0x00	; 0
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	40 e8       	ldi	r20, 0x80	; 128
    3372:	5f e3       	ldi	r21, 0x3F	; 63
    3374:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3378:	88 23       	and	r24, r24
    337a:	2c f4       	brge	.+10     	; 0x3386 <Animation1+0x5d0>
		__ticks = 1;
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	9e 83       	std	Y+6, r25	; 0x06
    3382:	8d 83       	std	Y+5, r24	; 0x05
    3384:	3f c0       	rjmp	.+126    	; 0x3404 <Animation1+0x64e>
	else if (__tmp > 65535)
    3386:	6f 81       	ldd	r22, Y+7	; 0x07
    3388:	78 85       	ldd	r23, Y+8	; 0x08
    338a:	89 85       	ldd	r24, Y+9	; 0x09
    338c:	9a 85       	ldd	r25, Y+10	; 0x0a
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	3f ef       	ldi	r19, 0xFF	; 255
    3392:	4f e7       	ldi	r20, 0x7F	; 127
    3394:	57 e4       	ldi	r21, 0x47	; 71
    3396:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    339a:	18 16       	cp	r1, r24
    339c:	4c f5       	brge	.+82     	; 0x33f0 <Animation1+0x63a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339e:	6b 85       	ldd	r22, Y+11	; 0x0b
    33a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    33a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    33a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	40 e2       	ldi	r20, 0x20	; 32
    33ac:	51 e4       	ldi	r21, 0x41	; 65
    33ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	bc 01       	movw	r22, r24
    33b8:	cd 01       	movw	r24, r26
    33ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33be:	dc 01       	movw	r26, r24
    33c0:	cb 01       	movw	r24, r22
    33c2:	9e 83       	std	Y+6, r25	; 0x06
    33c4:	8d 83       	std	Y+5, r24	; 0x05
    33c6:	0f c0       	rjmp	.+30     	; 0x33e6 <Animation1+0x630>
    33c8:	88 e2       	ldi	r24, 0x28	; 40
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	9c 83       	std	Y+4, r25	; 0x04
    33ce:	8b 83       	std	Y+3, r24	; 0x03
    33d0:	8b 81       	ldd	r24, Y+3	; 0x03
    33d2:	9c 81       	ldd	r25, Y+4	; 0x04
    33d4:	01 97       	sbiw	r24, 0x01	; 1
    33d6:	f1 f7       	brne	.-4      	; 0x33d4 <Animation1+0x61e>
    33d8:	9c 83       	std	Y+4, r25	; 0x04
    33da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33dc:	8d 81       	ldd	r24, Y+5	; 0x05
    33de:	9e 81       	ldd	r25, Y+6	; 0x06
    33e0:	01 97       	sbiw	r24, 0x01	; 1
    33e2:	9e 83       	std	Y+6, r25	; 0x06
    33e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e6:	8d 81       	ldd	r24, Y+5	; 0x05
    33e8:	9e 81       	ldd	r25, Y+6	; 0x06
    33ea:	00 97       	sbiw	r24, 0x00	; 0
    33ec:	69 f7       	brne	.-38     	; 0x33c8 <Animation1+0x612>
    33ee:	14 c0       	rjmp	.+40     	; 0x3418 <Animation1+0x662>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f0:	6f 81       	ldd	r22, Y+7	; 0x07
    33f2:	78 85       	ldd	r23, Y+8	; 0x08
    33f4:	89 85       	ldd	r24, Y+9	; 0x09
    33f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	9e 83       	std	Y+6, r25	; 0x06
    3402:	8d 83       	std	Y+5, r24	; 0x05
    3404:	8d 81       	ldd	r24, Y+5	; 0x05
    3406:	9e 81       	ldd	r25, Y+6	; 0x06
    3408:	9a 83       	std	Y+2, r25	; 0x02
    340a:	89 83       	std	Y+1, r24	; 0x01
    340c:	89 81       	ldd	r24, Y+1	; 0x01
    340e:	9a 81       	ldd	r25, Y+2	; 0x02
    3410:	01 97       	sbiw	r24, 0x01	; 1
    3412:	f1 f7       	brne	.-4      	; 0x3410 <Animation1+0x65a>
    3414:	9a 83       	std	Y+2, r25	; 0x02
    3416:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(500);

}
    3418:	cc 5a       	subi	r28, 0xAC	; 172
    341a:	df 4f       	sbci	r29, 0xFF	; 255
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	f8 94       	cli
    3420:	de bf       	out	0x3e, r29	; 62
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	cd bf       	out	0x3d, r28	; 61
    3426:	cf 91       	pop	r28
    3428:	df 91       	pop	r29
    342a:	1f 91       	pop	r17
    342c:	0f 91       	pop	r16
    342e:	08 95       	ret

00003430 <Animation2>:
void Animation2()
{
    3430:	0f 93       	push	r16
    3432:	1f 93       	push	r17
    3434:	df 93       	push	r29
    3436:	cf 93       	push	r28
    3438:	cd b7       	in	r28, 0x3d	; 61
    343a:	de b7       	in	r29, 0x3e	; 62
    343c:	c4 55       	subi	r28, 0x54	; 84
    343e:	d0 40       	sbci	r29, 0x00	; 0
    3440:	0f b6       	in	r0, 0x3f	; 63
    3442:	f8 94       	cli
    3444:	de bf       	out	0x3e, r29	; 62
    3446:	0f be       	out	0x3f, r0	; 63
    3448:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    344a:	80 e0       	ldi	r24, 0x00	; 0
    344c:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <H_Led_void_setON>
    3450:	fe 01       	movw	r30, r28
    3452:	ef 5a       	subi	r30, 0xAF	; 175
    3454:	ff 4f       	sbci	r31, 0xFF	; 255
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	aa ef       	ldi	r26, 0xFA	; 250
    345c:	b3 e4       	ldi	r27, 0x43	; 67
    345e:	80 83       	st	Z, r24
    3460:	91 83       	std	Z+1, r25	; 0x01
    3462:	a2 83       	std	Z+2, r26	; 0x02
    3464:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3466:	8e 01       	movw	r16, r28
    3468:	03 5b       	subi	r16, 0xB3	; 179
    346a:	1f 4f       	sbci	r17, 0xFF	; 255
    346c:	fe 01       	movw	r30, r28
    346e:	ef 5a       	subi	r30, 0xAF	; 175
    3470:	ff 4f       	sbci	r31, 0xFF	; 255
    3472:	60 81       	ld	r22, Z
    3474:	71 81       	ldd	r23, Z+1	; 0x01
    3476:	82 81       	ldd	r24, Z+2	; 0x02
    3478:	93 81       	ldd	r25, Z+3	; 0x03
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	48 ec       	ldi	r20, 0xC8	; 200
    3480:	53 e4       	ldi	r21, 0x43	; 67
    3482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	f8 01       	movw	r30, r16
    348c:	80 83       	st	Z, r24
    348e:	91 83       	std	Z+1, r25	; 0x01
    3490:	a2 83       	std	Z+2, r26	; 0x02
    3492:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3494:	fe 01       	movw	r30, r28
    3496:	e3 5b       	subi	r30, 0xB3	; 179
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	60 81       	ld	r22, Z
    349c:	71 81       	ldd	r23, Z+1	; 0x01
    349e:	82 81       	ldd	r24, Z+2	; 0x02
    34a0:	93 81       	ldd	r25, Z+3	; 0x03
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	40 e8       	ldi	r20, 0x80	; 128
    34a8:	5f e3       	ldi	r21, 0x3F	; 63
    34aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34ae:	88 23       	and	r24, r24
    34b0:	44 f4       	brge	.+16     	; 0x34c2 <Animation2+0x92>
		__ticks = 1;
    34b2:	fe 01       	movw	r30, r28
    34b4:	e5 5b       	subi	r30, 0xB5	; 181
    34b6:	ff 4f       	sbci	r31, 0xFF	; 255
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	91 83       	std	Z+1, r25	; 0x01
    34be:	80 83       	st	Z, r24
    34c0:	64 c0       	rjmp	.+200    	; 0x358a <Animation2+0x15a>
	else if (__tmp > 65535)
    34c2:	fe 01       	movw	r30, r28
    34c4:	e3 5b       	subi	r30, 0xB3	; 179
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	60 81       	ld	r22, Z
    34ca:	71 81       	ldd	r23, Z+1	; 0x01
    34cc:	82 81       	ldd	r24, Z+2	; 0x02
    34ce:	93 81       	ldd	r25, Z+3	; 0x03
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	3f ef       	ldi	r19, 0xFF	; 255
    34d4:	4f e7       	ldi	r20, 0x7F	; 127
    34d6:	57 e4       	ldi	r21, 0x47	; 71
    34d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34dc:	18 16       	cp	r1, r24
    34de:	0c f0       	brlt	.+2      	; 0x34e2 <Animation2+0xb2>
    34e0:	43 c0       	rjmp	.+134    	; 0x3568 <Animation2+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e2:	fe 01       	movw	r30, r28
    34e4:	ef 5a       	subi	r30, 0xAF	; 175
    34e6:	ff 4f       	sbci	r31, 0xFF	; 255
    34e8:	60 81       	ld	r22, Z
    34ea:	71 81       	ldd	r23, Z+1	; 0x01
    34ec:	82 81       	ldd	r24, Z+2	; 0x02
    34ee:	93 81       	ldd	r25, Z+3	; 0x03
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	40 e2       	ldi	r20, 0x20	; 32
    34f6:	51 e4       	ldi	r21, 0x41	; 65
    34f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fc:	dc 01       	movw	r26, r24
    34fe:	cb 01       	movw	r24, r22
    3500:	8e 01       	movw	r16, r28
    3502:	05 5b       	subi	r16, 0xB5	; 181
    3504:	1f 4f       	sbci	r17, 0xFF	; 255
    3506:	bc 01       	movw	r22, r24
    3508:	cd 01       	movw	r24, r26
    350a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	f8 01       	movw	r30, r16
    3514:	91 83       	std	Z+1, r25	; 0x01
    3516:	80 83       	st	Z, r24
    3518:	1f c0       	rjmp	.+62     	; 0x3558 <Animation2+0x128>
    351a:	fe 01       	movw	r30, r28
    351c:	e7 5b       	subi	r30, 0xB7	; 183
    351e:	ff 4f       	sbci	r31, 0xFF	; 255
    3520:	88 e2       	ldi	r24, 0x28	; 40
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	91 83       	std	Z+1, r25	; 0x01
    3526:	80 83       	st	Z, r24
    3528:	fe 01       	movw	r30, r28
    352a:	e7 5b       	subi	r30, 0xB7	; 183
    352c:	ff 4f       	sbci	r31, 0xFF	; 255
    352e:	80 81       	ld	r24, Z
    3530:	91 81       	ldd	r25, Z+1	; 0x01
    3532:	01 97       	sbiw	r24, 0x01	; 1
    3534:	f1 f7       	brne	.-4      	; 0x3532 <Animation2+0x102>
    3536:	fe 01       	movw	r30, r28
    3538:	e7 5b       	subi	r30, 0xB7	; 183
    353a:	ff 4f       	sbci	r31, 0xFF	; 255
    353c:	91 83       	std	Z+1, r25	; 0x01
    353e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3540:	de 01       	movw	r26, r28
    3542:	a5 5b       	subi	r26, 0xB5	; 181
    3544:	bf 4f       	sbci	r27, 0xFF	; 255
    3546:	fe 01       	movw	r30, r28
    3548:	e5 5b       	subi	r30, 0xB5	; 181
    354a:	ff 4f       	sbci	r31, 0xFF	; 255
    354c:	80 81       	ld	r24, Z
    354e:	91 81       	ldd	r25, Z+1	; 0x01
    3550:	01 97       	sbiw	r24, 0x01	; 1
    3552:	11 96       	adiw	r26, 0x01	; 1
    3554:	9c 93       	st	X, r25
    3556:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3558:	fe 01       	movw	r30, r28
    355a:	e5 5b       	subi	r30, 0xB5	; 181
    355c:	ff 4f       	sbci	r31, 0xFF	; 255
    355e:	80 81       	ld	r24, Z
    3560:	91 81       	ldd	r25, Z+1	; 0x01
    3562:	00 97       	sbiw	r24, 0x00	; 0
    3564:	d1 f6       	brne	.-76     	; 0x351a <Animation2+0xea>
    3566:	27 c0       	rjmp	.+78     	; 0x35b6 <Animation2+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3568:	8e 01       	movw	r16, r28
    356a:	05 5b       	subi	r16, 0xB5	; 181
    356c:	1f 4f       	sbci	r17, 0xFF	; 255
    356e:	fe 01       	movw	r30, r28
    3570:	e3 5b       	subi	r30, 0xB3	; 179
    3572:	ff 4f       	sbci	r31, 0xFF	; 255
    3574:	60 81       	ld	r22, Z
    3576:	71 81       	ldd	r23, Z+1	; 0x01
    3578:	82 81       	ldd	r24, Z+2	; 0x02
    357a:	93 81       	ldd	r25, Z+3	; 0x03
    357c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3580:	dc 01       	movw	r26, r24
    3582:	cb 01       	movw	r24, r22
    3584:	f8 01       	movw	r30, r16
    3586:	91 83       	std	Z+1, r25	; 0x01
    3588:	80 83       	st	Z, r24
    358a:	de 01       	movw	r26, r28
    358c:	a9 5b       	subi	r26, 0xB9	; 185
    358e:	bf 4f       	sbci	r27, 0xFF	; 255
    3590:	fe 01       	movw	r30, r28
    3592:	e5 5b       	subi	r30, 0xB5	; 181
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	80 81       	ld	r24, Z
    3598:	91 81       	ldd	r25, Z+1	; 0x01
    359a:	8d 93       	st	X+, r24
    359c:	9c 93       	st	X, r25
    359e:	fe 01       	movw	r30, r28
    35a0:	e9 5b       	subi	r30, 0xB9	; 185
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	80 81       	ld	r24, Z
    35a6:	91 81       	ldd	r25, Z+1	; 0x01
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	f1 f7       	brne	.-4      	; 0x35a8 <Animation2+0x178>
    35ac:	fe 01       	movw	r30, r28
    35ae:	e9 5b       	subi	r30, 0xB9	; 185
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	91 83       	std	Z+1, r25	; 0x01
    35b4:	80 83       	st	Z, r24
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <H_Led_void_setOFF>
    35bc:	fe 01       	movw	r30, r28
    35be:	ed 5b       	subi	r30, 0xBD	; 189
    35c0:	ff 4f       	sbci	r31, 0xFF	; 255
    35c2:	80 e0       	ldi	r24, 0x00	; 0
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	aa ef       	ldi	r26, 0xFA	; 250
    35c8:	b3 e4       	ldi	r27, 0x43	; 67
    35ca:	80 83       	st	Z, r24
    35cc:	91 83       	std	Z+1, r25	; 0x01
    35ce:	a2 83       	std	Z+2, r26	; 0x02
    35d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d2:	8e 01       	movw	r16, r28
    35d4:	01 5c       	subi	r16, 0xC1	; 193
    35d6:	1f 4f       	sbci	r17, 0xFF	; 255
    35d8:	fe 01       	movw	r30, r28
    35da:	ed 5b       	subi	r30, 0xBD	; 189
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	60 81       	ld	r22, Z
    35e0:	71 81       	ldd	r23, Z+1	; 0x01
    35e2:	82 81       	ldd	r24, Z+2	; 0x02
    35e4:	93 81       	ldd	r25, Z+3	; 0x03
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	48 ec       	ldi	r20, 0xC8	; 200
    35ec:	53 e4       	ldi	r21, 0x43	; 67
    35ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	f8 01       	movw	r30, r16
    35f8:	80 83       	st	Z, r24
    35fa:	91 83       	std	Z+1, r25	; 0x01
    35fc:	a2 83       	std	Z+2, r26	; 0x02
    35fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3600:	fe 01       	movw	r30, r28
    3602:	ff 96       	adiw	r30, 0x3f	; 63
    3604:	60 81       	ld	r22, Z
    3606:	71 81       	ldd	r23, Z+1	; 0x01
    3608:	82 81       	ldd	r24, Z+2	; 0x02
    360a:	93 81       	ldd	r25, Z+3	; 0x03
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	40 e8       	ldi	r20, 0x80	; 128
    3612:	5f e3       	ldi	r21, 0x3F	; 63
    3614:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3618:	88 23       	and	r24, r24
    361a:	2c f4       	brge	.+10     	; 0x3626 <Animation2+0x1f6>
		__ticks = 1;
    361c:	81 e0       	ldi	r24, 0x01	; 1
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	9e af       	std	Y+62, r25	; 0x3e
    3622:	8d af       	std	Y+61, r24	; 0x3d
    3624:	46 c0       	rjmp	.+140    	; 0x36b2 <Animation2+0x282>
	else if (__tmp > 65535)
    3626:	fe 01       	movw	r30, r28
    3628:	ff 96       	adiw	r30, 0x3f	; 63
    362a:	60 81       	ld	r22, Z
    362c:	71 81       	ldd	r23, Z+1	; 0x01
    362e:	82 81       	ldd	r24, Z+2	; 0x02
    3630:	93 81       	ldd	r25, Z+3	; 0x03
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	3f ef       	ldi	r19, 0xFF	; 255
    3636:	4f e7       	ldi	r20, 0x7F	; 127
    3638:	57 e4       	ldi	r21, 0x47	; 71
    363a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    363e:	18 16       	cp	r1, r24
    3640:	64 f5       	brge	.+88     	; 0x369a <Animation2+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3642:	fe 01       	movw	r30, r28
    3644:	ed 5b       	subi	r30, 0xBD	; 189
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	60 81       	ld	r22, Z
    364a:	71 81       	ldd	r23, Z+1	; 0x01
    364c:	82 81       	ldd	r24, Z+2	; 0x02
    364e:	93 81       	ldd	r25, Z+3	; 0x03
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	40 e2       	ldi	r20, 0x20	; 32
    3656:	51 e4       	ldi	r21, 0x41	; 65
    3658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	bc 01       	movw	r22, r24
    3662:	cd 01       	movw	r24, r26
    3664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3668:	dc 01       	movw	r26, r24
    366a:	cb 01       	movw	r24, r22
    366c:	9e af       	std	Y+62, r25	; 0x3e
    366e:	8d af       	std	Y+61, r24	; 0x3d
    3670:	0f c0       	rjmp	.+30     	; 0x3690 <Animation2+0x260>
    3672:	88 e2       	ldi	r24, 0x28	; 40
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	9c af       	std	Y+60, r25	; 0x3c
    3678:	8b af       	std	Y+59, r24	; 0x3b
    367a:	8b ad       	ldd	r24, Y+59	; 0x3b
    367c:	9c ad       	ldd	r25, Y+60	; 0x3c
    367e:	01 97       	sbiw	r24, 0x01	; 1
    3680:	f1 f7       	brne	.-4      	; 0x367e <Animation2+0x24e>
    3682:	9c af       	std	Y+60, r25	; 0x3c
    3684:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3686:	8d ad       	ldd	r24, Y+61	; 0x3d
    3688:	9e ad       	ldd	r25, Y+62	; 0x3e
    368a:	01 97       	sbiw	r24, 0x01	; 1
    368c:	9e af       	std	Y+62, r25	; 0x3e
    368e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3690:	8d ad       	ldd	r24, Y+61	; 0x3d
    3692:	9e ad       	ldd	r25, Y+62	; 0x3e
    3694:	00 97       	sbiw	r24, 0x00	; 0
    3696:	69 f7       	brne	.-38     	; 0x3672 <Animation2+0x242>
    3698:	16 c0       	rjmp	.+44     	; 0x36c6 <Animation2+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    369a:	fe 01       	movw	r30, r28
    369c:	ff 96       	adiw	r30, 0x3f	; 63
    369e:	60 81       	ld	r22, Z
    36a0:	71 81       	ldd	r23, Z+1	; 0x01
    36a2:	82 81       	ldd	r24, Z+2	; 0x02
    36a4:	93 81       	ldd	r25, Z+3	; 0x03
    36a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36aa:	dc 01       	movw	r26, r24
    36ac:	cb 01       	movw	r24, r22
    36ae:	9e af       	std	Y+62, r25	; 0x3e
    36b0:	8d af       	std	Y+61, r24	; 0x3d
    36b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    36b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    36b6:	9a af       	std	Y+58, r25	; 0x3a
    36b8:	89 af       	std	Y+57, r24	; 0x39
    36ba:	89 ad       	ldd	r24, Y+57	; 0x39
    36bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    36be:	01 97       	sbiw	r24, 0x01	; 1
    36c0:	f1 f7       	brne	.-4      	; 0x36be <Animation2+0x28e>
    36c2:	9a af       	std	Y+58, r25	; 0x3a
    36c4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
    H_Led_void_setON(BLU_LED);
    36c6:	82 e0       	ldi	r24, 0x02	; 2
    36c8:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <H_Led_void_setON>
    36cc:	80 e0       	ldi	r24, 0x00	; 0
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	aa ef       	ldi	r26, 0xFA	; 250
    36d2:	b3 e4       	ldi	r27, 0x43	; 67
    36d4:	8d ab       	std	Y+53, r24	; 0x35
    36d6:	9e ab       	std	Y+54, r25	; 0x36
    36d8:	af ab       	std	Y+55, r26	; 0x37
    36da:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36dc:	6d a9       	ldd	r22, Y+53	; 0x35
    36de:	7e a9       	ldd	r23, Y+54	; 0x36
    36e0:	8f a9       	ldd	r24, Y+55	; 0x37
    36e2:	98 ad       	ldd	r25, Y+56	; 0x38
    36e4:	20 e0       	ldi	r18, 0x00	; 0
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	48 ec       	ldi	r20, 0xC8	; 200
    36ea:	53 e4       	ldi	r21, 0x43	; 67
    36ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	89 ab       	std	Y+49, r24	; 0x31
    36f6:	9a ab       	std	Y+50, r25	; 0x32
    36f8:	ab ab       	std	Y+51, r26	; 0x33
    36fa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    36fc:	69 a9       	ldd	r22, Y+49	; 0x31
    36fe:	7a a9       	ldd	r23, Y+50	; 0x32
    3700:	8b a9       	ldd	r24, Y+51	; 0x33
    3702:	9c a9       	ldd	r25, Y+52	; 0x34
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	40 e8       	ldi	r20, 0x80	; 128
    370a:	5f e3       	ldi	r21, 0x3F	; 63
    370c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3710:	88 23       	and	r24, r24
    3712:	2c f4       	brge	.+10     	; 0x371e <Animation2+0x2ee>
		__ticks = 1;
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	98 ab       	std	Y+48, r25	; 0x30
    371a:	8f a7       	std	Y+47, r24	; 0x2f
    371c:	3f c0       	rjmp	.+126    	; 0x379c <Animation2+0x36c>
	else if (__tmp > 65535)
    371e:	69 a9       	ldd	r22, Y+49	; 0x31
    3720:	7a a9       	ldd	r23, Y+50	; 0x32
    3722:	8b a9       	ldd	r24, Y+51	; 0x33
    3724:	9c a9       	ldd	r25, Y+52	; 0x34
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	3f ef       	ldi	r19, 0xFF	; 255
    372a:	4f e7       	ldi	r20, 0x7F	; 127
    372c:	57 e4       	ldi	r21, 0x47	; 71
    372e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3732:	18 16       	cp	r1, r24
    3734:	4c f5       	brge	.+82     	; 0x3788 <Animation2+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3736:	6d a9       	ldd	r22, Y+53	; 0x35
    3738:	7e a9       	ldd	r23, Y+54	; 0x36
    373a:	8f a9       	ldd	r24, Y+55	; 0x37
    373c:	98 ad       	ldd	r25, Y+56	; 0x38
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	40 e2       	ldi	r20, 0x20	; 32
    3744:	51 e4       	ldi	r21, 0x41	; 65
    3746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    374a:	dc 01       	movw	r26, r24
    374c:	cb 01       	movw	r24, r22
    374e:	bc 01       	movw	r22, r24
    3750:	cd 01       	movw	r24, r26
    3752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	98 ab       	std	Y+48, r25	; 0x30
    375c:	8f a7       	std	Y+47, r24	; 0x2f
    375e:	0f c0       	rjmp	.+30     	; 0x377e <Animation2+0x34e>
    3760:	88 e2       	ldi	r24, 0x28	; 40
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	9e a7       	std	Y+46, r25	; 0x2e
    3766:	8d a7       	std	Y+45, r24	; 0x2d
    3768:	8d a5       	ldd	r24, Y+45	; 0x2d
    376a:	9e a5       	ldd	r25, Y+46	; 0x2e
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	f1 f7       	brne	.-4      	; 0x376c <Animation2+0x33c>
    3770:	9e a7       	std	Y+46, r25	; 0x2e
    3772:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3774:	8f a5       	ldd	r24, Y+47	; 0x2f
    3776:	98 a9       	ldd	r25, Y+48	; 0x30
    3778:	01 97       	sbiw	r24, 0x01	; 1
    377a:	98 ab       	std	Y+48, r25	; 0x30
    377c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    377e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3780:	98 a9       	ldd	r25, Y+48	; 0x30
    3782:	00 97       	sbiw	r24, 0x00	; 0
    3784:	69 f7       	brne	.-38     	; 0x3760 <Animation2+0x330>
    3786:	14 c0       	rjmp	.+40     	; 0x37b0 <Animation2+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3788:	69 a9       	ldd	r22, Y+49	; 0x31
    378a:	7a a9       	ldd	r23, Y+50	; 0x32
    378c:	8b a9       	ldd	r24, Y+51	; 0x33
    378e:	9c a9       	ldd	r25, Y+52	; 0x34
    3790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3794:	dc 01       	movw	r26, r24
    3796:	cb 01       	movw	r24, r22
    3798:	98 ab       	std	Y+48, r25	; 0x30
    379a:	8f a7       	std	Y+47, r24	; 0x2f
    379c:	8f a5       	ldd	r24, Y+47	; 0x2f
    379e:	98 a9       	ldd	r25, Y+48	; 0x30
    37a0:	9c a7       	std	Y+44, r25	; 0x2c
    37a2:	8b a7       	std	Y+43, r24	; 0x2b
    37a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    37a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    37a8:	01 97       	sbiw	r24, 0x01	; 1
    37aa:	f1 f7       	brne	.-4      	; 0x37a8 <Animation2+0x378>
    37ac:	9c a7       	std	Y+44, r25	; 0x2c
    37ae:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(500);
    H_Led_void_setOFF(BLU_LED);
    37b0:	82 e0       	ldi	r24, 0x02	; 2
    37b2:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <H_Led_void_setOFF>
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	aa ef       	ldi	r26, 0xFA	; 250
    37bc:	b3 e4       	ldi	r27, 0x43	; 67
    37be:	8f a3       	std	Y+39, r24	; 0x27
    37c0:	98 a7       	std	Y+40, r25	; 0x28
    37c2:	a9 a7       	std	Y+41, r26	; 0x29
    37c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37c6:	6f a1       	ldd	r22, Y+39	; 0x27
    37c8:	78 a5       	ldd	r23, Y+40	; 0x28
    37ca:	89 a5       	ldd	r24, Y+41	; 0x29
    37cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	48 ec       	ldi	r20, 0xC8	; 200
    37d4:	53 e4       	ldi	r21, 0x43	; 67
    37d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37da:	dc 01       	movw	r26, r24
    37dc:	cb 01       	movw	r24, r22
    37de:	8b a3       	std	Y+35, r24	; 0x23
    37e0:	9c a3       	std	Y+36, r25	; 0x24
    37e2:	ad a3       	std	Y+37, r26	; 0x25
    37e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37e6:	6b a1       	ldd	r22, Y+35	; 0x23
    37e8:	7c a1       	ldd	r23, Y+36	; 0x24
    37ea:	8d a1       	ldd	r24, Y+37	; 0x25
    37ec:	9e a1       	ldd	r25, Y+38	; 0x26
    37ee:	20 e0       	ldi	r18, 0x00	; 0
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	40 e8       	ldi	r20, 0x80	; 128
    37f4:	5f e3       	ldi	r21, 0x3F	; 63
    37f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37fa:	88 23       	and	r24, r24
    37fc:	2c f4       	brge	.+10     	; 0x3808 <Animation2+0x3d8>
		__ticks = 1;
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	9a a3       	std	Y+34, r25	; 0x22
    3804:	89 a3       	std	Y+33, r24	; 0x21
    3806:	3f c0       	rjmp	.+126    	; 0x3886 <Animation2+0x456>
	else if (__tmp > 65535)
    3808:	6b a1       	ldd	r22, Y+35	; 0x23
    380a:	7c a1       	ldd	r23, Y+36	; 0x24
    380c:	8d a1       	ldd	r24, Y+37	; 0x25
    380e:	9e a1       	ldd	r25, Y+38	; 0x26
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	3f ef       	ldi	r19, 0xFF	; 255
    3814:	4f e7       	ldi	r20, 0x7F	; 127
    3816:	57 e4       	ldi	r21, 0x47	; 71
    3818:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    381c:	18 16       	cp	r1, r24
    381e:	4c f5       	brge	.+82     	; 0x3872 <Animation2+0x442>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3820:	6f a1       	ldd	r22, Y+39	; 0x27
    3822:	78 a5       	ldd	r23, Y+40	; 0x28
    3824:	89 a5       	ldd	r24, Y+41	; 0x29
    3826:	9a a5       	ldd	r25, Y+42	; 0x2a
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	40 e2       	ldi	r20, 0x20	; 32
    382e:	51 e4       	ldi	r21, 0x41	; 65
    3830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3834:	dc 01       	movw	r26, r24
    3836:	cb 01       	movw	r24, r22
    3838:	bc 01       	movw	r22, r24
    383a:	cd 01       	movw	r24, r26
    383c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3840:	dc 01       	movw	r26, r24
    3842:	cb 01       	movw	r24, r22
    3844:	9a a3       	std	Y+34, r25	; 0x22
    3846:	89 a3       	std	Y+33, r24	; 0x21
    3848:	0f c0       	rjmp	.+30     	; 0x3868 <Animation2+0x438>
    384a:	88 e2       	ldi	r24, 0x28	; 40
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	98 a3       	std	Y+32, r25	; 0x20
    3850:	8f 8f       	std	Y+31, r24	; 0x1f
    3852:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3854:	98 a1       	ldd	r25, Y+32	; 0x20
    3856:	01 97       	sbiw	r24, 0x01	; 1
    3858:	f1 f7       	brne	.-4      	; 0x3856 <Animation2+0x426>
    385a:	98 a3       	std	Y+32, r25	; 0x20
    385c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    385e:	89 a1       	ldd	r24, Y+33	; 0x21
    3860:	9a a1       	ldd	r25, Y+34	; 0x22
    3862:	01 97       	sbiw	r24, 0x01	; 1
    3864:	9a a3       	std	Y+34, r25	; 0x22
    3866:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3868:	89 a1       	ldd	r24, Y+33	; 0x21
    386a:	9a a1       	ldd	r25, Y+34	; 0x22
    386c:	00 97       	sbiw	r24, 0x00	; 0
    386e:	69 f7       	brne	.-38     	; 0x384a <Animation2+0x41a>
    3870:	14 c0       	rjmp	.+40     	; 0x389a <Animation2+0x46a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3872:	6b a1       	ldd	r22, Y+35	; 0x23
    3874:	7c a1       	ldd	r23, Y+36	; 0x24
    3876:	8d a1       	ldd	r24, Y+37	; 0x25
    3878:	9e a1       	ldd	r25, Y+38	; 0x26
    387a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387e:	dc 01       	movw	r26, r24
    3880:	cb 01       	movw	r24, r22
    3882:	9a a3       	std	Y+34, r25	; 0x22
    3884:	89 a3       	std	Y+33, r24	; 0x21
    3886:	89 a1       	ldd	r24, Y+33	; 0x21
    3888:	9a a1       	ldd	r25, Y+34	; 0x22
    388a:	9e 8f       	std	Y+30, r25	; 0x1e
    388c:	8d 8f       	std	Y+29, r24	; 0x1d
    388e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3890:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3892:	01 97       	sbiw	r24, 0x01	; 1
    3894:	f1 f7       	brne	.-4      	; 0x3892 <Animation2+0x462>
    3896:	9e 8f       	std	Y+30, r25	; 0x1e
    3898:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(500);
    H_Led_void_setON(GRN_LED);
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <H_Led_void_setON>
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	aa ef       	ldi	r26, 0xFA	; 250
    38a6:	b3 e4       	ldi	r27, 0x43	; 67
    38a8:	89 8f       	std	Y+25, r24	; 0x19
    38aa:	9a 8f       	std	Y+26, r25	; 0x1a
    38ac:	ab 8f       	std	Y+27, r26	; 0x1b
    38ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38b0:	69 8d       	ldd	r22, Y+25	; 0x19
    38b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38b8:	20 e0       	ldi	r18, 0x00	; 0
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	48 ec       	ldi	r20, 0xC8	; 200
    38be:	53 e4       	ldi	r21, 0x43	; 67
    38c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c4:	dc 01       	movw	r26, r24
    38c6:	cb 01       	movw	r24, r22
    38c8:	8d 8b       	std	Y+21, r24	; 0x15
    38ca:	9e 8b       	std	Y+22, r25	; 0x16
    38cc:	af 8b       	std	Y+23, r26	; 0x17
    38ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38d0:	6d 89       	ldd	r22, Y+21	; 0x15
    38d2:	7e 89       	ldd	r23, Y+22	; 0x16
    38d4:	8f 89       	ldd	r24, Y+23	; 0x17
    38d6:	98 8d       	ldd	r25, Y+24	; 0x18
    38d8:	20 e0       	ldi	r18, 0x00	; 0
    38da:	30 e0       	ldi	r19, 0x00	; 0
    38dc:	40 e8       	ldi	r20, 0x80	; 128
    38de:	5f e3       	ldi	r21, 0x3F	; 63
    38e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38e4:	88 23       	and	r24, r24
    38e6:	2c f4       	brge	.+10     	; 0x38f2 <Animation2+0x4c2>
		__ticks = 1;
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	9c 8b       	std	Y+20, r25	; 0x14
    38ee:	8b 8b       	std	Y+19, r24	; 0x13
    38f0:	3f c0       	rjmp	.+126    	; 0x3970 <Animation2+0x540>
	else if (__tmp > 65535)
    38f2:	6d 89       	ldd	r22, Y+21	; 0x15
    38f4:	7e 89       	ldd	r23, Y+22	; 0x16
    38f6:	8f 89       	ldd	r24, Y+23	; 0x17
    38f8:	98 8d       	ldd	r25, Y+24	; 0x18
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	3f ef       	ldi	r19, 0xFF	; 255
    38fe:	4f e7       	ldi	r20, 0x7F	; 127
    3900:	57 e4       	ldi	r21, 0x47	; 71
    3902:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3906:	18 16       	cp	r1, r24
    3908:	4c f5       	brge	.+82     	; 0x395c <Animation2+0x52c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    390a:	69 8d       	ldd	r22, Y+25	; 0x19
    390c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    390e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3910:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	40 e2       	ldi	r20, 0x20	; 32
    3918:	51 e4       	ldi	r21, 0x41	; 65
    391a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391e:	dc 01       	movw	r26, r24
    3920:	cb 01       	movw	r24, r22
    3922:	bc 01       	movw	r22, r24
    3924:	cd 01       	movw	r24, r26
    3926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    392a:	dc 01       	movw	r26, r24
    392c:	cb 01       	movw	r24, r22
    392e:	9c 8b       	std	Y+20, r25	; 0x14
    3930:	8b 8b       	std	Y+19, r24	; 0x13
    3932:	0f c0       	rjmp	.+30     	; 0x3952 <Animation2+0x522>
    3934:	88 e2       	ldi	r24, 0x28	; 40
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	9a 8b       	std	Y+18, r25	; 0x12
    393a:	89 8b       	std	Y+17, r24	; 0x11
    393c:	89 89       	ldd	r24, Y+17	; 0x11
    393e:	9a 89       	ldd	r25, Y+18	; 0x12
    3940:	01 97       	sbiw	r24, 0x01	; 1
    3942:	f1 f7       	brne	.-4      	; 0x3940 <Animation2+0x510>
    3944:	9a 8b       	std	Y+18, r25	; 0x12
    3946:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3948:	8b 89       	ldd	r24, Y+19	; 0x13
    394a:	9c 89       	ldd	r25, Y+20	; 0x14
    394c:	01 97       	sbiw	r24, 0x01	; 1
    394e:	9c 8b       	std	Y+20, r25	; 0x14
    3950:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3952:	8b 89       	ldd	r24, Y+19	; 0x13
    3954:	9c 89       	ldd	r25, Y+20	; 0x14
    3956:	00 97       	sbiw	r24, 0x00	; 0
    3958:	69 f7       	brne	.-38     	; 0x3934 <Animation2+0x504>
    395a:	14 c0       	rjmp	.+40     	; 0x3984 <Animation2+0x554>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    395c:	6d 89       	ldd	r22, Y+21	; 0x15
    395e:	7e 89       	ldd	r23, Y+22	; 0x16
    3960:	8f 89       	ldd	r24, Y+23	; 0x17
    3962:	98 8d       	ldd	r25, Y+24	; 0x18
    3964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3968:	dc 01       	movw	r26, r24
    396a:	cb 01       	movw	r24, r22
    396c:	9c 8b       	std	Y+20, r25	; 0x14
    396e:	8b 8b       	std	Y+19, r24	; 0x13
    3970:	8b 89       	ldd	r24, Y+19	; 0x13
    3972:	9c 89       	ldd	r25, Y+20	; 0x14
    3974:	98 8b       	std	Y+16, r25	; 0x10
    3976:	8f 87       	std	Y+15, r24	; 0x0f
    3978:	8f 85       	ldd	r24, Y+15	; 0x0f
    397a:	98 89       	ldd	r25, Y+16	; 0x10
    397c:	01 97       	sbiw	r24, 0x01	; 1
    397e:	f1 f7       	brne	.-4      	; 0x397c <Animation2+0x54c>
    3980:	98 8b       	std	Y+16, r25	; 0x10
    3982:	8f 87       	std	Y+15, r24	; 0x0f
     _delay_ms(500);
    H_Led_void_setOFF(GRN_LED);
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <H_Led_void_setOFF>
    398a:	80 e0       	ldi	r24, 0x00	; 0
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	aa ef       	ldi	r26, 0xFA	; 250
    3990:	b3 e4       	ldi	r27, 0x43	; 67
    3992:	8b 87       	std	Y+11, r24	; 0x0b
    3994:	9c 87       	std	Y+12, r25	; 0x0c
    3996:	ad 87       	std	Y+13, r26	; 0x0d
    3998:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    399a:	6b 85       	ldd	r22, Y+11	; 0x0b
    399c:	7c 85       	ldd	r23, Y+12	; 0x0c
    399e:	8d 85       	ldd	r24, Y+13	; 0x0d
    39a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	48 ec       	ldi	r20, 0xC8	; 200
    39a8:	53 e4       	ldi	r21, 0x43	; 67
    39aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	8f 83       	std	Y+7, r24	; 0x07
    39b4:	98 87       	std	Y+8, r25	; 0x08
    39b6:	a9 87       	std	Y+9, r26	; 0x09
    39b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39ba:	6f 81       	ldd	r22, Y+7	; 0x07
    39bc:	78 85       	ldd	r23, Y+8	; 0x08
    39be:	89 85       	ldd	r24, Y+9	; 0x09
    39c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c2:	20 e0       	ldi	r18, 0x00	; 0
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	40 e8       	ldi	r20, 0x80	; 128
    39c8:	5f e3       	ldi	r21, 0x3F	; 63
    39ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39ce:	88 23       	and	r24, r24
    39d0:	2c f4       	brge	.+10     	; 0x39dc <Animation2+0x5ac>
		__ticks = 1;
    39d2:	81 e0       	ldi	r24, 0x01	; 1
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	9e 83       	std	Y+6, r25	; 0x06
    39d8:	8d 83       	std	Y+5, r24	; 0x05
    39da:	3f c0       	rjmp	.+126    	; 0x3a5a <Animation2+0x62a>
	else if (__tmp > 65535)
    39dc:	6f 81       	ldd	r22, Y+7	; 0x07
    39de:	78 85       	ldd	r23, Y+8	; 0x08
    39e0:	89 85       	ldd	r24, Y+9	; 0x09
    39e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e4:	20 e0       	ldi	r18, 0x00	; 0
    39e6:	3f ef       	ldi	r19, 0xFF	; 255
    39e8:	4f e7       	ldi	r20, 0x7F	; 127
    39ea:	57 e4       	ldi	r21, 0x47	; 71
    39ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39f0:	18 16       	cp	r1, r24
    39f2:	4c f5       	brge	.+82     	; 0x3a46 <Animation2+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    39f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e2       	ldi	r20, 0x20	; 32
    3a02:	51 e4       	ldi	r21, 0x41	; 65
    3a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	bc 01       	movw	r22, r24
    3a0e:	cd 01       	movw	r24, r26
    3a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	9e 83       	std	Y+6, r25	; 0x06
    3a1a:	8d 83       	std	Y+5, r24	; 0x05
    3a1c:	0f c0       	rjmp	.+30     	; 0x3a3c <Animation2+0x60c>
    3a1e:	88 e2       	ldi	r24, 0x28	; 40
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	9c 83       	std	Y+4, r25	; 0x04
    3a24:	8b 83       	std	Y+3, r24	; 0x03
    3a26:	8b 81       	ldd	r24, Y+3	; 0x03
    3a28:	9c 81       	ldd	r25, Y+4	; 0x04
    3a2a:	01 97       	sbiw	r24, 0x01	; 1
    3a2c:	f1 f7       	brne	.-4      	; 0x3a2a <Animation2+0x5fa>
    3a2e:	9c 83       	std	Y+4, r25	; 0x04
    3a30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a32:	8d 81       	ldd	r24, Y+5	; 0x05
    3a34:	9e 81       	ldd	r25, Y+6	; 0x06
    3a36:	01 97       	sbiw	r24, 0x01	; 1
    3a38:	9e 83       	std	Y+6, r25	; 0x06
    3a3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a40:	00 97       	sbiw	r24, 0x00	; 0
    3a42:	69 f7       	brne	.-38     	; 0x3a1e <Animation2+0x5ee>
    3a44:	14 c0       	rjmp	.+40     	; 0x3a6e <Animation2+0x63e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a46:	6f 81       	ldd	r22, Y+7	; 0x07
    3a48:	78 85       	ldd	r23, Y+8	; 0x08
    3a4a:	89 85       	ldd	r24, Y+9	; 0x09
    3a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	9e 83       	std	Y+6, r25	; 0x06
    3a58:	8d 83       	std	Y+5, r24	; 0x05
    3a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a5e:	9a 83       	std	Y+2, r25	; 0x02
    3a60:	89 83       	std	Y+1, r24	; 0x01
    3a62:	89 81       	ldd	r24, Y+1	; 0x01
    3a64:	9a 81       	ldd	r25, Y+2	; 0x02
    3a66:	01 97       	sbiw	r24, 0x01	; 1
    3a68:	f1 f7       	brne	.-4      	; 0x3a66 <Animation2+0x636>
    3a6a:	9a 83       	std	Y+2, r25	; 0x02
    3a6c:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(500);

}
    3a6e:	cc 5a       	subi	r28, 0xAC	; 172
    3a70:	df 4f       	sbci	r29, 0xFF	; 255
    3a72:	0f b6       	in	r0, 0x3f	; 63
    3a74:	f8 94       	cli
    3a76:	de bf       	out	0x3e, r29	; 62
    3a78:	0f be       	out	0x3f, r0	; 63
    3a7a:	cd bf       	out	0x3d, r28	; 61
    3a7c:	cf 91       	pop	r28
    3a7e:	df 91       	pop	r29
    3a80:	1f 91       	pop	r17
    3a82:	0f 91       	pop	r16
    3a84:	08 95       	ret

00003a86 <Animation3>:
void Animation3()
{
    3a86:	df 93       	push	r29
    3a88:	cf 93       	push	r28
    3a8a:	cd b7       	in	r28, 0x3d	; 61
    3a8c:	de b7       	in	r29, 0x3e	; 62
    3a8e:	6c 97       	sbiw	r28, 0x1c	; 28
    3a90:	0f b6       	in	r0, 0x3f	; 63
    3a92:	f8 94       	cli
    3a94:	de bf       	out	0x3e, r29	; 62
    3a96:	0f be       	out	0x3f, r0	; 63
    3a98:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    3a9a:	80 e0       	ldi	r24, 0x00	; 0
    3a9c:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <H_Led_void_setON>
	H_Led_void_setON(BLU_LED);
    3aa0:	82 e0       	ldi	r24, 0x02	; 2
    3aa2:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <H_Led_void_setON>
	H_Led_void_setON(GRN_LED);
    3aa6:	81 e0       	ldi	r24, 0x01	; 1
    3aa8:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <H_Led_void_setON>
    3aac:	80 e0       	ldi	r24, 0x00	; 0
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	aa ef       	ldi	r26, 0xFA	; 250
    3ab2:	b3 e4       	ldi	r27, 0x43	; 67
    3ab4:	89 8f       	std	Y+25, r24	; 0x19
    3ab6:	9a 8f       	std	Y+26, r25	; 0x1a
    3ab8:	ab 8f       	std	Y+27, r26	; 0x1b
    3aba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3abc:	69 8d       	ldd	r22, Y+25	; 0x19
    3abe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ac0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ac2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ac4:	20 e0       	ldi	r18, 0x00	; 0
    3ac6:	30 e0       	ldi	r19, 0x00	; 0
    3ac8:	48 ec       	ldi	r20, 0xC8	; 200
    3aca:	53 e4       	ldi	r21, 0x43	; 67
    3acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad0:	dc 01       	movw	r26, r24
    3ad2:	cb 01       	movw	r24, r22
    3ad4:	8d 8b       	std	Y+21, r24	; 0x15
    3ad6:	9e 8b       	std	Y+22, r25	; 0x16
    3ad8:	af 8b       	std	Y+23, r26	; 0x17
    3ada:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3adc:	6d 89       	ldd	r22, Y+21	; 0x15
    3ade:	7e 89       	ldd	r23, Y+22	; 0x16
    3ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    3ae2:	98 8d       	ldd	r25, Y+24	; 0x18
    3ae4:	20 e0       	ldi	r18, 0x00	; 0
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	40 e8       	ldi	r20, 0x80	; 128
    3aea:	5f e3       	ldi	r21, 0x3F	; 63
    3aec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3af0:	88 23       	and	r24, r24
    3af2:	2c f4       	brge	.+10     	; 0x3afe <Animation3+0x78>
		__ticks = 1;
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	9c 8b       	std	Y+20, r25	; 0x14
    3afa:	8b 8b       	std	Y+19, r24	; 0x13
    3afc:	3f c0       	rjmp	.+126    	; 0x3b7c <Animation3+0xf6>
	else if (__tmp > 65535)
    3afe:	6d 89       	ldd	r22, Y+21	; 0x15
    3b00:	7e 89       	ldd	r23, Y+22	; 0x16
    3b02:	8f 89       	ldd	r24, Y+23	; 0x17
    3b04:	98 8d       	ldd	r25, Y+24	; 0x18
    3b06:	20 e0       	ldi	r18, 0x00	; 0
    3b08:	3f ef       	ldi	r19, 0xFF	; 255
    3b0a:	4f e7       	ldi	r20, 0x7F	; 127
    3b0c:	57 e4       	ldi	r21, 0x47	; 71
    3b0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b12:	18 16       	cp	r1, r24
    3b14:	4c f5       	brge	.+82     	; 0x3b68 <Animation3+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b16:	69 8d       	ldd	r22, Y+25	; 0x19
    3b18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b1e:	20 e0       	ldi	r18, 0x00	; 0
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	40 e2       	ldi	r20, 0x20	; 32
    3b24:	51 e4       	ldi	r21, 0x41	; 65
    3b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	cb 01       	movw	r24, r22
    3b2e:	bc 01       	movw	r22, r24
    3b30:	cd 01       	movw	r24, r26
    3b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b36:	dc 01       	movw	r26, r24
    3b38:	cb 01       	movw	r24, r22
    3b3a:	9c 8b       	std	Y+20, r25	; 0x14
    3b3c:	8b 8b       	std	Y+19, r24	; 0x13
    3b3e:	0f c0       	rjmp	.+30     	; 0x3b5e <Animation3+0xd8>
    3b40:	88 e2       	ldi	r24, 0x28	; 40
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	9a 8b       	std	Y+18, r25	; 0x12
    3b46:	89 8b       	std	Y+17, r24	; 0x11
    3b48:	89 89       	ldd	r24, Y+17	; 0x11
    3b4a:	9a 89       	ldd	r25, Y+18	; 0x12
    3b4c:	01 97       	sbiw	r24, 0x01	; 1
    3b4e:	f1 f7       	brne	.-4      	; 0x3b4c <Animation3+0xc6>
    3b50:	9a 8b       	std	Y+18, r25	; 0x12
    3b52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b54:	8b 89       	ldd	r24, Y+19	; 0x13
    3b56:	9c 89       	ldd	r25, Y+20	; 0x14
    3b58:	01 97       	sbiw	r24, 0x01	; 1
    3b5a:	9c 8b       	std	Y+20, r25	; 0x14
    3b5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b5e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b60:	9c 89       	ldd	r25, Y+20	; 0x14
    3b62:	00 97       	sbiw	r24, 0x00	; 0
    3b64:	69 f7       	brne	.-38     	; 0x3b40 <Animation3+0xba>
    3b66:	14 c0       	rjmp	.+40     	; 0x3b90 <Animation3+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b68:	6d 89       	ldd	r22, Y+21	; 0x15
    3b6a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b6c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b6e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b74:	dc 01       	movw	r26, r24
    3b76:	cb 01       	movw	r24, r22
    3b78:	9c 8b       	std	Y+20, r25	; 0x14
    3b7a:	8b 8b       	std	Y+19, r24	; 0x13
    3b7c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b7e:	9c 89       	ldd	r25, Y+20	; 0x14
    3b80:	98 8b       	std	Y+16, r25	; 0x10
    3b82:	8f 87       	std	Y+15, r24	; 0x0f
    3b84:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b86:	98 89       	ldd	r25, Y+16	; 0x10
    3b88:	01 97       	sbiw	r24, 0x01	; 1
    3b8a:	f1 f7       	brne	.-4      	; 0x3b88 <Animation3+0x102>
    3b8c:	98 8b       	std	Y+16, r25	; 0x10
    3b8e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    3b90:	80 e0       	ldi	r24, 0x00	; 0
    3b92:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <H_Led_void_setOFF>
	H_Led_void_setOFF(BLU_LED);
    3b96:	82 e0       	ldi	r24, 0x02	; 2
    3b98:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <H_Led_void_setOFF>
	H_Led_void_setOFF(GRN_LED);
    3b9c:	81 e0       	ldi	r24, 0x01	; 1
    3b9e:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <H_Led_void_setOFF>
    3ba2:	80 e0       	ldi	r24, 0x00	; 0
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	aa ef       	ldi	r26, 0xFA	; 250
    3ba8:	b3 e4       	ldi	r27, 0x43	; 67
    3baa:	8b 87       	std	Y+11, r24	; 0x0b
    3bac:	9c 87       	std	Y+12, r25	; 0x0c
    3bae:	ad 87       	std	Y+13, r26	; 0x0d
    3bb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	48 ec       	ldi	r20, 0xC8	; 200
    3bc0:	53 e4       	ldi	r21, 0x43	; 67
    3bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	8f 83       	std	Y+7, r24	; 0x07
    3bcc:	98 87       	std	Y+8, r25	; 0x08
    3bce:	a9 87       	std	Y+9, r26	; 0x09
    3bd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bd2:	6f 81       	ldd	r22, Y+7	; 0x07
    3bd4:	78 85       	ldd	r23, Y+8	; 0x08
    3bd6:	89 85       	ldd	r24, Y+9	; 0x09
    3bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bda:	20 e0       	ldi	r18, 0x00	; 0
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	40 e8       	ldi	r20, 0x80	; 128
    3be0:	5f e3       	ldi	r21, 0x3F	; 63
    3be2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3be6:	88 23       	and	r24, r24
    3be8:	2c f4       	brge	.+10     	; 0x3bf4 <Animation3+0x16e>
		__ticks = 1;
    3bea:	81 e0       	ldi	r24, 0x01	; 1
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	9e 83       	std	Y+6, r25	; 0x06
    3bf0:	8d 83       	std	Y+5, r24	; 0x05
    3bf2:	3f c0       	rjmp	.+126    	; 0x3c72 <Animation3+0x1ec>
	else if (__tmp > 65535)
    3bf4:	6f 81       	ldd	r22, Y+7	; 0x07
    3bf6:	78 85       	ldd	r23, Y+8	; 0x08
    3bf8:	89 85       	ldd	r24, Y+9	; 0x09
    3bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bfc:	20 e0       	ldi	r18, 0x00	; 0
    3bfe:	3f ef       	ldi	r19, 0xFF	; 255
    3c00:	4f e7       	ldi	r20, 0x7F	; 127
    3c02:	57 e4       	ldi	r21, 0x47	; 71
    3c04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c08:	18 16       	cp	r1, r24
    3c0a:	4c f5       	brge	.+82     	; 0x3c5e <Animation3+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c10:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c12:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c14:	20 e0       	ldi	r18, 0x00	; 0
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	40 e2       	ldi	r20, 0x20	; 32
    3c1a:	51 e4       	ldi	r21, 0x41	; 65
    3c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c20:	dc 01       	movw	r26, r24
    3c22:	cb 01       	movw	r24, r22
    3c24:	bc 01       	movw	r22, r24
    3c26:	cd 01       	movw	r24, r26
    3c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c2c:	dc 01       	movw	r26, r24
    3c2e:	cb 01       	movw	r24, r22
    3c30:	9e 83       	std	Y+6, r25	; 0x06
    3c32:	8d 83       	std	Y+5, r24	; 0x05
    3c34:	0f c0       	rjmp	.+30     	; 0x3c54 <Animation3+0x1ce>
    3c36:	88 e2       	ldi	r24, 0x28	; 40
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	9c 83       	std	Y+4, r25	; 0x04
    3c3c:	8b 83       	std	Y+3, r24	; 0x03
    3c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c40:	9c 81       	ldd	r25, Y+4	; 0x04
    3c42:	01 97       	sbiw	r24, 0x01	; 1
    3c44:	f1 f7       	brne	.-4      	; 0x3c42 <Animation3+0x1bc>
    3c46:	9c 83       	std	Y+4, r25	; 0x04
    3c48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c4e:	01 97       	sbiw	r24, 0x01	; 1
    3c50:	9e 83       	std	Y+6, r25	; 0x06
    3c52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c54:	8d 81       	ldd	r24, Y+5	; 0x05
    3c56:	9e 81       	ldd	r25, Y+6	; 0x06
    3c58:	00 97       	sbiw	r24, 0x00	; 0
    3c5a:	69 f7       	brne	.-38     	; 0x3c36 <Animation3+0x1b0>
    3c5c:	14 c0       	rjmp	.+40     	; 0x3c86 <Animation3+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c5e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c60:	78 85       	ldd	r23, Y+8	; 0x08
    3c62:	89 85       	ldd	r24, Y+9	; 0x09
    3c64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	cb 01       	movw	r24, r22
    3c6e:	9e 83       	std	Y+6, r25	; 0x06
    3c70:	8d 83       	std	Y+5, r24	; 0x05
    3c72:	8d 81       	ldd	r24, Y+5	; 0x05
    3c74:	9e 81       	ldd	r25, Y+6	; 0x06
    3c76:	9a 83       	std	Y+2, r25	; 0x02
    3c78:	89 83       	std	Y+1, r24	; 0x01
    3c7a:	89 81       	ldd	r24, Y+1	; 0x01
    3c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c7e:	01 97       	sbiw	r24, 0x01	; 1
    3c80:	f1 f7       	brne	.-4      	; 0x3c7e <Animation3+0x1f8>
    3c82:	9a 83       	std	Y+2, r25	; 0x02
    3c84:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

}
    3c86:	6c 96       	adiw	r28, 0x1c	; 28
    3c88:	0f b6       	in	r0, 0x3f	; 63
    3c8a:	f8 94       	cli
    3c8c:	de bf       	out	0x3e, r29	; 62
    3c8e:	0f be       	out	0x3f, r0	; 63
    3c90:	cd bf       	out	0x3d, r28	; 61
    3c92:	cf 91       	pop	r28
    3c94:	df 91       	pop	r29
    3c96:	08 95       	ret

00003c98 <H_LCD_void_Init>:

#include "LCD_priv.h"
#include "LCD_config.h"
#include "LCD_int.h"
void H_LCD_void_Init(void)
{
    3c98:	df 93       	push	r29
    3c9a:	cf 93       	push	r28
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
    3ca0:	aa 97       	sbiw	r28, 0x2a	; 42
    3ca2:	0f b6       	in	r0, 0x3f	; 63
    3ca4:	f8 94       	cli
    3ca6:	de bf       	out	0x3e, r29	; 62
    3ca8:	0f be       	out	0x3f, r0	; 63
    3caa:	cd bf       	out	0x3d, r28	; 61

	// set direction Rs, EN
	M_DIO_void_setPinDir(LCD_RS_PORT, LCD_RS_PIN,OUT);
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	61 e0       	ldi	r22, 0x01	; 1
    3cb0:	41 e0       	ldi	r20, 0x01	; 1
    3cb2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_EN_PORT,LCD_EN_PIN,OUT);
    3cb6:	80 e0       	ldi	r24, 0x00	; 0
    3cb8:	62 e0       	ldi	r22, 0x02	; 2
    3cba:	41 e0       	ldi	r20, 0x01	; 1
    3cbc:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	//set direction D4 .. D7
	M_DIO_void_setPinDir(LCD_D7_PORT,LCD_D7_PIN,OUT);
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
    3cc2:	66 e0       	ldi	r22, 0x06	; 6
    3cc4:	41 e0       	ldi	r20, 0x01	; 1
    3cc6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D6_PORT,LCD_D6_PIN,OUT);
    3cca:	80 e0       	ldi	r24, 0x00	; 0
    3ccc:	65 e0       	ldi	r22, 0x05	; 5
    3cce:	41 e0       	ldi	r20, 0x01	; 1
    3cd0:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D5_PORT,LCD_D5_PIN,OUT);
    3cd4:	80 e0       	ldi	r24, 0x00	; 0
    3cd6:	64 e0       	ldi	r22, 0x04	; 4
    3cd8:	41 e0       	ldi	r20, 0x01	; 1
    3cda:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D4_PORT,LCD_D4_PIN,OUT);
    3cde:	80 e0       	ldi	r24, 0x00	; 0
    3ce0:	63 e0       	ldi	r22, 0x03	; 3
    3ce2:	41 e0       	ldi	r20, 0x01	; 1
    3ce4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
    3ce8:	80 e0       	ldi	r24, 0x00	; 0
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	ac e0       	ldi	r26, 0x0C	; 12
    3cee:	b2 e4       	ldi	r27, 0x42	; 66
    3cf0:	8f a3       	std	Y+39, r24	; 0x27
    3cf2:	98 a7       	std	Y+40, r25	; 0x28
    3cf4:	a9 a7       	std	Y+41, r26	; 0x29
    3cf6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cf8:	6f a1       	ldd	r22, Y+39	; 0x27
    3cfa:	78 a5       	ldd	r23, Y+40	; 0x28
    3cfc:	89 a5       	ldd	r24, Y+41	; 0x29
    3cfe:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d00:	20 e0       	ldi	r18, 0x00	; 0
    3d02:	30 e0       	ldi	r19, 0x00	; 0
    3d04:	48 ec       	ldi	r20, 0xC8	; 200
    3d06:	53 e4       	ldi	r21, 0x43	; 67
    3d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d0c:	dc 01       	movw	r26, r24
    3d0e:	cb 01       	movw	r24, r22
    3d10:	8b a3       	std	Y+35, r24	; 0x23
    3d12:	9c a3       	std	Y+36, r25	; 0x24
    3d14:	ad a3       	std	Y+37, r26	; 0x25
    3d16:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d18:	6b a1       	ldd	r22, Y+35	; 0x23
    3d1a:	7c a1       	ldd	r23, Y+36	; 0x24
    3d1c:	8d a1       	ldd	r24, Y+37	; 0x25
    3d1e:	9e a1       	ldd	r25, Y+38	; 0x26
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	40 e8       	ldi	r20, 0x80	; 128
    3d26:	5f e3       	ldi	r21, 0x3F	; 63
    3d28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d2c:	88 23       	and	r24, r24
    3d2e:	2c f4       	brge	.+10     	; 0x3d3a <H_LCD_void_Init+0xa2>
		__ticks = 1;
    3d30:	81 e0       	ldi	r24, 0x01	; 1
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	9a a3       	std	Y+34, r25	; 0x22
    3d36:	89 a3       	std	Y+33, r24	; 0x21
    3d38:	3f c0       	rjmp	.+126    	; 0x3db8 <H_LCD_void_Init+0x120>
	else if (__tmp > 65535)
    3d3a:	6b a1       	ldd	r22, Y+35	; 0x23
    3d3c:	7c a1       	ldd	r23, Y+36	; 0x24
    3d3e:	8d a1       	ldd	r24, Y+37	; 0x25
    3d40:	9e a1       	ldd	r25, Y+38	; 0x26
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	3f ef       	ldi	r19, 0xFF	; 255
    3d46:	4f e7       	ldi	r20, 0x7F	; 127
    3d48:	57 e4       	ldi	r21, 0x47	; 71
    3d4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d4e:	18 16       	cp	r1, r24
    3d50:	4c f5       	brge	.+82     	; 0x3da4 <H_LCD_void_Init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d52:	6f a1       	ldd	r22, Y+39	; 0x27
    3d54:	78 a5       	ldd	r23, Y+40	; 0x28
    3d56:	89 a5       	ldd	r24, Y+41	; 0x29
    3d58:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d5a:	20 e0       	ldi	r18, 0x00	; 0
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	40 e2       	ldi	r20, 0x20	; 32
    3d60:	51 e4       	ldi	r21, 0x41	; 65
    3d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d66:	dc 01       	movw	r26, r24
    3d68:	cb 01       	movw	r24, r22
    3d6a:	bc 01       	movw	r22, r24
    3d6c:	cd 01       	movw	r24, r26
    3d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d72:	dc 01       	movw	r26, r24
    3d74:	cb 01       	movw	r24, r22
    3d76:	9a a3       	std	Y+34, r25	; 0x22
    3d78:	89 a3       	std	Y+33, r24	; 0x21
    3d7a:	0f c0       	rjmp	.+30     	; 0x3d9a <H_LCD_void_Init+0x102>
    3d7c:	88 e2       	ldi	r24, 0x28	; 40
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	98 a3       	std	Y+32, r25	; 0x20
    3d82:	8f 8f       	std	Y+31, r24	; 0x1f
    3d84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d86:	98 a1       	ldd	r25, Y+32	; 0x20
    3d88:	01 97       	sbiw	r24, 0x01	; 1
    3d8a:	f1 f7       	brne	.-4      	; 0x3d88 <H_LCD_void_Init+0xf0>
    3d8c:	98 a3       	std	Y+32, r25	; 0x20
    3d8e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d90:	89 a1       	ldd	r24, Y+33	; 0x21
    3d92:	9a a1       	ldd	r25, Y+34	; 0x22
    3d94:	01 97       	sbiw	r24, 0x01	; 1
    3d96:	9a a3       	std	Y+34, r25	; 0x22
    3d98:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d9a:	89 a1       	ldd	r24, Y+33	; 0x21
    3d9c:	9a a1       	ldd	r25, Y+34	; 0x22
    3d9e:	00 97       	sbiw	r24, 0x00	; 0
    3da0:	69 f7       	brne	.-38     	; 0x3d7c <H_LCD_void_Init+0xe4>
    3da2:	14 c0       	rjmp	.+40     	; 0x3dcc <H_LCD_void_Init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3da4:	6b a1       	ldd	r22, Y+35	; 0x23
    3da6:	7c a1       	ldd	r23, Y+36	; 0x24
    3da8:	8d a1       	ldd	r24, Y+37	; 0x25
    3daa:	9e a1       	ldd	r25, Y+38	; 0x26
    3dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db0:	dc 01       	movw	r26, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	9a a3       	std	Y+34, r25	; 0x22
    3db6:	89 a3       	std	Y+33, r24	; 0x21
    3db8:	89 a1       	ldd	r24, Y+33	; 0x21
    3dba:	9a a1       	ldd	r25, Y+34	; 0x22
    3dbc:	9e 8f       	std	Y+30, r25	; 0x1e
    3dbe:	8d 8f       	std	Y+29, r24	; 0x1d
    3dc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dc2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3dc4:	01 97       	sbiw	r24, 0x01	; 1
    3dc6:	f1 f7       	brne	.-4      	; 0x3dc4 <H_LCD_void_Init+0x12c>
    3dc8:	9e 8f       	std	Y+30, r25	; 0x1e
    3dca:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(35);
	H_LCD_void_sendCommand(LCD_8BIT_MODE_2LINES_5X7);
#elif(LCD_MODE ==  LCD_4BIT_MODE_)
	_delay_ms(35);
	// Rs = command = 0
	M_DIO_void_setPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    3dcc:	80 e0       	ldi	r24, 0x00	; 0
    3dce:	61 e0       	ldi	r22, 0x01	; 1
    3dd0:	40 e0       	ldi	r20, 0x00	; 0
    3dd2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
	// EN = 0 disabled
	M_DIO_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    3dd6:	80 e0       	ldi	r24, 0x00	; 0
    3dd8:	62 e0       	ldi	r22, 0x02	; 2
    3dda:	40 e0       	ldi	r20, 0x00	; 0
    3ddc:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
	// prepare data
	M_DIO_void_setPinValue(LCD_D7_PORT,LCD_D7_PIN,0);
    3de0:	80 e0       	ldi	r24, 0x00	; 0
    3de2:	66 e0       	ldi	r22, 0x06	; 6
    3de4:	40 e0       	ldi	r20, 0x00	; 0
    3de6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D6_PORT,LCD_D6_PIN,0);
    3dea:	80 e0       	ldi	r24, 0x00	; 0
    3dec:	65 e0       	ldi	r22, 0x05	; 5
    3dee:	40 e0       	ldi	r20, 0x00	; 0
    3df0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D5_PORT,LCD_D5_PIN,1);
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	64 e0       	ldi	r22, 0x04	; 4
    3df8:	41 e0       	ldi	r20, 0x01	; 1
    3dfa:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D4_PORT,LCD_D4_PIN,0);
    3dfe:	80 e0       	ldi	r24, 0x00	; 0
    3e00:	63 e0       	ldi	r22, 0x03	; 3
    3e02:	40 e0       	ldi	r20, 0x00	; 0
    3e04:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
	//EN = 1
	M_DIO_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    3e08:	80 e0       	ldi	r24, 0x00	; 0
    3e0a:	62 e0       	ldi	r22, 0x02	; 2
    3e0c:	41 e0       	ldi	r20, 0x01	; 1
    3e0e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    3e12:	80 e0       	ldi	r24, 0x00	; 0
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	a0 e8       	ldi	r26, 0x80	; 128
    3e18:	bf e3       	ldi	r27, 0x3F	; 63
    3e1a:	89 8f       	std	Y+25, r24	; 0x19
    3e1c:	9a 8f       	std	Y+26, r25	; 0x1a
    3e1e:	ab 8f       	std	Y+27, r26	; 0x1b
    3e20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e22:	69 8d       	ldd	r22, Y+25	; 0x19
    3e24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e2a:	20 e0       	ldi	r18, 0x00	; 0
    3e2c:	30 e0       	ldi	r19, 0x00	; 0
    3e2e:	48 ec       	ldi	r20, 0xC8	; 200
    3e30:	53 e4       	ldi	r21, 0x43	; 67
    3e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e36:	dc 01       	movw	r26, r24
    3e38:	cb 01       	movw	r24, r22
    3e3a:	8d 8b       	std	Y+21, r24	; 0x15
    3e3c:	9e 8b       	std	Y+22, r25	; 0x16
    3e3e:	af 8b       	std	Y+23, r26	; 0x17
    3e40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e42:	6d 89       	ldd	r22, Y+21	; 0x15
    3e44:	7e 89       	ldd	r23, Y+22	; 0x16
    3e46:	8f 89       	ldd	r24, Y+23	; 0x17
    3e48:	98 8d       	ldd	r25, Y+24	; 0x18
    3e4a:	20 e0       	ldi	r18, 0x00	; 0
    3e4c:	30 e0       	ldi	r19, 0x00	; 0
    3e4e:	40 e8       	ldi	r20, 0x80	; 128
    3e50:	5f e3       	ldi	r21, 0x3F	; 63
    3e52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e56:	88 23       	and	r24, r24
    3e58:	2c f4       	brge	.+10     	; 0x3e64 <H_LCD_void_Init+0x1cc>
		__ticks = 1;
    3e5a:	81 e0       	ldi	r24, 0x01	; 1
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	9c 8b       	std	Y+20, r25	; 0x14
    3e60:	8b 8b       	std	Y+19, r24	; 0x13
    3e62:	3f c0       	rjmp	.+126    	; 0x3ee2 <H_LCD_void_Init+0x24a>
	else if (__tmp > 65535)
    3e64:	6d 89       	ldd	r22, Y+21	; 0x15
    3e66:	7e 89       	ldd	r23, Y+22	; 0x16
    3e68:	8f 89       	ldd	r24, Y+23	; 0x17
    3e6a:	98 8d       	ldd	r25, Y+24	; 0x18
    3e6c:	20 e0       	ldi	r18, 0x00	; 0
    3e6e:	3f ef       	ldi	r19, 0xFF	; 255
    3e70:	4f e7       	ldi	r20, 0x7F	; 127
    3e72:	57 e4       	ldi	r21, 0x47	; 71
    3e74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e78:	18 16       	cp	r1, r24
    3e7a:	4c f5       	brge	.+82     	; 0x3ece <H_LCD_void_Init+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e7c:	69 8d       	ldd	r22, Y+25	; 0x19
    3e7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e84:	20 e0       	ldi	r18, 0x00	; 0
    3e86:	30 e0       	ldi	r19, 0x00	; 0
    3e88:	40 e2       	ldi	r20, 0x20	; 32
    3e8a:	51 e4       	ldi	r21, 0x41	; 65
    3e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e90:	dc 01       	movw	r26, r24
    3e92:	cb 01       	movw	r24, r22
    3e94:	bc 01       	movw	r22, r24
    3e96:	cd 01       	movw	r24, r26
    3e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e9c:	dc 01       	movw	r26, r24
    3e9e:	cb 01       	movw	r24, r22
    3ea0:	9c 8b       	std	Y+20, r25	; 0x14
    3ea2:	8b 8b       	std	Y+19, r24	; 0x13
    3ea4:	0f c0       	rjmp	.+30     	; 0x3ec4 <H_LCD_void_Init+0x22c>
    3ea6:	88 e2       	ldi	r24, 0x28	; 40
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	9a 8b       	std	Y+18, r25	; 0x12
    3eac:	89 8b       	std	Y+17, r24	; 0x11
    3eae:	89 89       	ldd	r24, Y+17	; 0x11
    3eb0:	9a 89       	ldd	r25, Y+18	; 0x12
    3eb2:	01 97       	sbiw	r24, 0x01	; 1
    3eb4:	f1 f7       	brne	.-4      	; 0x3eb2 <H_LCD_void_Init+0x21a>
    3eb6:	9a 8b       	std	Y+18, r25	; 0x12
    3eb8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eba:	8b 89       	ldd	r24, Y+19	; 0x13
    3ebc:	9c 89       	ldd	r25, Y+20	; 0x14
    3ebe:	01 97       	sbiw	r24, 0x01	; 1
    3ec0:	9c 8b       	std	Y+20, r25	; 0x14
    3ec2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ec4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ec6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ec8:	00 97       	sbiw	r24, 0x00	; 0
    3eca:	69 f7       	brne	.-38     	; 0x3ea6 <H_LCD_void_Init+0x20e>
    3ecc:	14 c0       	rjmp	.+40     	; 0x3ef6 <H_LCD_void_Init+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ece:	6d 89       	ldd	r22, Y+21	; 0x15
    3ed0:	7e 89       	ldd	r23, Y+22	; 0x16
    3ed2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ed4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eda:	dc 01       	movw	r26, r24
    3edc:	cb 01       	movw	r24, r22
    3ede:	9c 8b       	std	Y+20, r25	; 0x14
    3ee0:	8b 8b       	std	Y+19, r24	; 0x13
    3ee2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ee4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ee6:	98 8b       	std	Y+16, r25	; 0x10
    3ee8:	8f 87       	std	Y+15, r24	; 0x0f
    3eea:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eec:	98 89       	ldd	r25, Y+16	; 0x10
    3eee:	01 97       	sbiw	r24, 0x01	; 1
    3ef0:	f1 f7       	brne	.-4      	; 0x3eee <H_LCD_void_Init+0x256>
    3ef2:	98 8b       	std	Y+16, r25	; 0x10
    3ef4:	8f 87       	std	Y+15, r24	; 0x0f
	// delay 1 msec (to allow latching)
	_delay_ms(1);
	// EN = 0
	M_DIO_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    3ef6:	80 e0       	ldi	r24, 0x00	; 0
    3ef8:	62 e0       	ldi	r22, 0x02	; 2
    3efa:	40 e0       	ldi	r20, 0x00	; 0
    3efc:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    3f00:	80 e0       	ldi	r24, 0x00	; 0
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	a0 ea       	ldi	r26, 0xA0	; 160
    3f06:	b0 e4       	ldi	r27, 0x40	; 64
    3f08:	8b 87       	std	Y+11, r24	; 0x0b
    3f0a:	9c 87       	std	Y+12, r25	; 0x0c
    3f0c:	ad 87       	std	Y+13, r26	; 0x0d
    3f0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f10:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f12:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f14:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f16:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f18:	20 e0       	ldi	r18, 0x00	; 0
    3f1a:	30 e0       	ldi	r19, 0x00	; 0
    3f1c:	48 ec       	ldi	r20, 0xC8	; 200
    3f1e:	53 e4       	ldi	r21, 0x43	; 67
    3f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f24:	dc 01       	movw	r26, r24
    3f26:	cb 01       	movw	r24, r22
    3f28:	8f 83       	std	Y+7, r24	; 0x07
    3f2a:	98 87       	std	Y+8, r25	; 0x08
    3f2c:	a9 87       	std	Y+9, r26	; 0x09
    3f2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f30:	6f 81       	ldd	r22, Y+7	; 0x07
    3f32:	78 85       	ldd	r23, Y+8	; 0x08
    3f34:	89 85       	ldd	r24, Y+9	; 0x09
    3f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f38:	20 e0       	ldi	r18, 0x00	; 0
    3f3a:	30 e0       	ldi	r19, 0x00	; 0
    3f3c:	40 e8       	ldi	r20, 0x80	; 128
    3f3e:	5f e3       	ldi	r21, 0x3F	; 63
    3f40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f44:	88 23       	and	r24, r24
    3f46:	2c f4       	brge	.+10     	; 0x3f52 <H_LCD_void_Init+0x2ba>
		__ticks = 1;
    3f48:	81 e0       	ldi	r24, 0x01	; 1
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	9e 83       	std	Y+6, r25	; 0x06
    3f4e:	8d 83       	std	Y+5, r24	; 0x05
    3f50:	3f c0       	rjmp	.+126    	; 0x3fd0 <H_LCD_void_Init+0x338>
	else if (__tmp > 65535)
    3f52:	6f 81       	ldd	r22, Y+7	; 0x07
    3f54:	78 85       	ldd	r23, Y+8	; 0x08
    3f56:	89 85       	ldd	r24, Y+9	; 0x09
    3f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f5a:	20 e0       	ldi	r18, 0x00	; 0
    3f5c:	3f ef       	ldi	r19, 0xFF	; 255
    3f5e:	4f e7       	ldi	r20, 0x7F	; 127
    3f60:	57 e4       	ldi	r21, 0x47	; 71
    3f62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f66:	18 16       	cp	r1, r24
    3f68:	4c f5       	brge	.+82     	; 0x3fbc <H_LCD_void_Init+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f70:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f72:	20 e0       	ldi	r18, 0x00	; 0
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	40 e2       	ldi	r20, 0x20	; 32
    3f78:	51 e4       	ldi	r21, 0x41	; 65
    3f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f7e:	dc 01       	movw	r26, r24
    3f80:	cb 01       	movw	r24, r22
    3f82:	bc 01       	movw	r22, r24
    3f84:	cd 01       	movw	r24, r26
    3f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f8a:	dc 01       	movw	r26, r24
    3f8c:	cb 01       	movw	r24, r22
    3f8e:	9e 83       	std	Y+6, r25	; 0x06
    3f90:	8d 83       	std	Y+5, r24	; 0x05
    3f92:	0f c0       	rjmp	.+30     	; 0x3fb2 <H_LCD_void_Init+0x31a>
    3f94:	88 e2       	ldi	r24, 0x28	; 40
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	9c 83       	std	Y+4, r25	; 0x04
    3f9a:	8b 83       	std	Y+3, r24	; 0x03
    3f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa0:	01 97       	sbiw	r24, 0x01	; 1
    3fa2:	f1 f7       	brne	.-4      	; 0x3fa0 <H_LCD_void_Init+0x308>
    3fa4:	9c 83       	std	Y+4, r25	; 0x04
    3fa6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    3faa:	9e 81       	ldd	r25, Y+6	; 0x06
    3fac:	01 97       	sbiw	r24, 0x01	; 1
    3fae:	9e 83       	std	Y+6, r25	; 0x06
    3fb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb6:	00 97       	sbiw	r24, 0x00	; 0
    3fb8:	69 f7       	brne	.-38     	; 0x3f94 <H_LCD_void_Init+0x2fc>
    3fba:	14 c0       	rjmp	.+40     	; 0x3fe4 <H_LCD_void_Init+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fbc:	6f 81       	ldd	r22, Y+7	; 0x07
    3fbe:	78 85       	ldd	r23, Y+8	; 0x08
    3fc0:	89 85       	ldd	r24, Y+9	; 0x09
    3fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc8:	dc 01       	movw	r26, r24
    3fca:	cb 01       	movw	r24, r22
    3fcc:	9e 83       	std	Y+6, r25	; 0x06
    3fce:	8d 83       	std	Y+5, r24	; 0x05
    3fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd4:	9a 83       	std	Y+2, r25	; 0x02
    3fd6:	89 83       	std	Y+1, r24	; 0x01
    3fd8:	89 81       	ldd	r24, Y+1	; 0x01
    3fda:	9a 81       	ldd	r25, Y+2	; 0x02
    3fdc:	01 97       	sbiw	r24, 0x01	; 1
    3fde:	f1 f7       	brne	.-4      	; 0x3fdc <H_LCD_void_Init+0x344>
    3fe0:	9a 83       	std	Y+2, r25	; 0x02
    3fe2:	89 83       	std	Y+1, r24	; 0x01
	// delay to allow processing
	_delay_ms(5);
	H_LCD_void_sendCommand(LCD_4BIT_MODE_2LINES_5X7);
    3fe4:	88 e2       	ldi	r24, 0x28	; 40
    3fe6:	0e 94 19 20 	call	0x4032	; 0x4032 <H_LCD_void_sendCommand>
#else
  #error("wrong LCD Mode")
#endif
	// display ON/OFF
	H_LCD_void_sendCommand(LCD_DISPON_CURSON_BLINKOFF);
    3fea:	8e e0       	ldi	r24, 0x0E	; 14
    3fec:	0e 94 19 20 	call	0x4032	; 0x4032 <H_LCD_void_sendCommand>
	// display Clear
	H_LCD_void_sendCommand(LCD_CLEAR_DISPALY);
    3ff0:	81 e0       	ldi	r24, 0x01	; 1
    3ff2:	0e 94 19 20 	call	0x4032	; 0x4032 <H_LCD_void_sendCommand>
	// Entry Mode Set
	H_LCD_void_sendCommand(LCD_ENTRY_MODE_SET);
    3ff6:	86 e0       	ldi	r24, 0x06	; 6
    3ff8:	0e 94 19 20 	call	0x4032	; 0x4032 <H_LCD_void_sendCommand>

}
    3ffc:	aa 96       	adiw	r28, 0x2a	; 42
    3ffe:	0f b6       	in	r0, 0x3f	; 63
    4000:	f8 94       	cli
    4002:	de bf       	out	0x3e, r29	; 62
    4004:	0f be       	out	0x3f, r0	; 63
    4006:	cd bf       	out	0x3d, r28	; 61
    4008:	cf 91       	pop	r28
    400a:	df 91       	pop	r29
    400c:	08 95       	ret

0000400e <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
    400e:	df 93       	push	r29
    4010:	cf 93       	push	r28
    4012:	0f 92       	push	r0
    4014:	cd b7       	in	r28, 0x3d	; 61
    4016:	de b7       	in	r29, 0x3e	; 62
    4018:	89 83       	std	Y+1, r24	; 0x01
  // step 1 : select RS to be in data mode (RS = 1)
	M_DIO_void_setPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    401a:	80 e0       	ldi	r24, 0x00	; 0
    401c:	61 e0       	ldi	r22, 0x01	; 1
    401e:	41 e0       	ldi	r20, 0x01	; 1
    4020:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
  // step 2 : write data
   H_LCD_void_writeNlatch(copy_u8data);
    4024:	89 81       	ldd	r24, Y+1	; 0x01
    4026:	0e 94 33 21 	call	0x4266	; 0x4266 <H_LCD_void_writeNlatch>
}
    402a:	0f 90       	pop	r0
    402c:	cf 91       	pop	r28
    402e:	df 91       	pop	r29
    4030:	08 95       	ret

00004032 <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8Command)
{
    4032:	df 93       	push	r29
    4034:	cf 93       	push	r28
    4036:	0f 92       	push	r0
    4038:	cd b7       	in	r28, 0x3d	; 61
    403a:	de b7       	in	r29, 0x3e	; 62
    403c:	89 83       	std	Y+1, r24	; 0x01
	// step 1 : select RS to be in command mode (RS = 0)
	M_DIO_void_setPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    403e:	80 e0       	ldi	r24, 0x00	; 0
    4040:	61 e0       	ldi	r22, 0x01	; 1
    4042:	40 e0       	ldi	r20, 0x00	; 0
    4044:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
	// step 2 : write command
	H_LCD_void_writeNlatch(copy_u8Command);
    4048:	89 81       	ldd	r24, Y+1	; 0x01
    404a:	0e 94 33 21 	call	0x4266	; 0x4266 <H_LCD_void_writeNlatch>

}
    404e:	0f 90       	pop	r0
    4050:	cf 91       	pop	r28
    4052:	df 91       	pop	r29
    4054:	08 95       	ret

00004056 <H_LCD_void_sendString>:
void H_LCD_void_sendString(const s8 * pstr)
{
    4056:	df 93       	push	r29
    4058:	cf 93       	push	r28
    405a:	00 d0       	rcall	.+0      	; 0x405c <H_LCD_void_sendString+0x6>
    405c:	cd b7       	in	r28, 0x3d	; 61
    405e:	de b7       	in	r29, 0x3e	; 62
    4060:	9a 83       	std	Y+2, r25	; 0x02
    4062:	89 83       	std	Y+1, r24	; 0x01
    4064:	0a c0       	rjmp	.+20     	; 0x407a <H_LCD_void_sendString+0x24>
   while(*pstr)
   {
	   H_LCD_void_sendData(*pstr);
    4066:	e9 81       	ldd	r30, Y+1	; 0x01
    4068:	fa 81       	ldd	r31, Y+2	; 0x02
    406a:	80 81       	ld	r24, Z
    406c:	0e 94 07 20 	call	0x400e	; 0x400e <H_LCD_void_sendData>
	   pstr++;
    4070:	89 81       	ldd	r24, Y+1	; 0x01
    4072:	9a 81       	ldd	r25, Y+2	; 0x02
    4074:	01 96       	adiw	r24, 0x01	; 1
    4076:	9a 83       	std	Y+2, r25	; 0x02
    4078:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_writeNlatch(copy_u8Command);

}
void H_LCD_void_sendString(const s8 * pstr)
{
   while(*pstr)
    407a:	e9 81       	ldd	r30, Y+1	; 0x01
    407c:	fa 81       	ldd	r31, Y+2	; 0x02
    407e:	80 81       	ld	r24, Z
    4080:	88 23       	and	r24, r24
    4082:	89 f7       	brne	.-30     	; 0x4066 <H_LCD_void_sendString+0x10>
   {
	   H_LCD_void_sendData(*pstr);
	   pstr++;
   }
}
    4084:	0f 90       	pop	r0
    4086:	0f 90       	pop	r0
    4088:	cf 91       	pop	r28
    408a:	df 91       	pop	r29
    408c:	08 95       	ret

0000408e <H_LCD_void_clear>:
void H_LCD_void_clear(void)
{
    408e:	df 93       	push	r29
    4090:	cf 93       	push	r28
    4092:	cd b7       	in	r28, 0x3d	; 61
    4094:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(LCD_CLEAR_DISPALY);
    4096:	81 e0       	ldi	r24, 0x01	; 1
    4098:	0e 94 19 20 	call	0x4032	; 0x4032 <H_LCD_void_sendCommand>
}
    409c:	cf 91       	pop	r28
    409e:	df 91       	pop	r29
    40a0:	08 95       	ret

000040a2 <H_LCD_void_sendIntNum>:
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    40a2:	0f 93       	push	r16
    40a4:	1f 93       	push	r17
    40a6:	df 93       	push	r29
    40a8:	cf 93       	push	r28
    40aa:	cd b7       	in	r28, 0x3d	; 61
    40ac:	de b7       	in	r29, 0x3e	; 62
    40ae:	2f 97       	sbiw	r28, 0x0f	; 15
    40b0:	0f b6       	in	r0, 0x3f	; 63
    40b2:	f8 94       	cli
    40b4:	de bf       	out	0x3e, r29	; 62
    40b6:	0f be       	out	0x3f, r0	; 63
    40b8:	cd bf       	out	0x3d, r28	; 61
    40ba:	6c 87       	std	Y+12, r22	; 0x0c
    40bc:	7d 87       	std	Y+13, r23	; 0x0d
    40be:	8e 87       	std	Y+14, r24	; 0x0e
    40c0:	9f 87       	std	Y+15, r25	; 0x0f
   u8 Loc_Arr[10]= {0};
    40c2:	8a e0       	ldi	r24, 0x0A	; 10
    40c4:	fe 01       	movw	r30, r28
    40c6:	32 96       	adiw	r30, 0x02	; 2
    40c8:	df 01       	movw	r26, r30
    40ca:	98 2f       	mov	r25, r24
    40cc:	1d 92       	st	X+, r1
    40ce:	9a 95       	dec	r25
    40d0:	e9 f7       	brne	.-6      	; 0x40cc <H_LCD_void_sendIntNum+0x2a>
   s8 i = 0;
    40d2:	19 82       	std	Y+1, r1	; 0x01
   if(copy_s32Num == 0)
    40d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    40d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    40d8:	ae 85       	ldd	r26, Y+14	; 0x0e
    40da:	bf 85       	ldd	r27, Y+15	; 0x0f
    40dc:	00 97       	sbiw	r24, 0x00	; 0
    40de:	a1 05       	cpc	r26, r1
    40e0:	b1 05       	cpc	r27, r1
    40e2:	21 f4       	brne	.+8      	; 0x40ec <H_LCD_void_sendIntNum+0x4a>
   {
	   H_LCD_void_sendData('0');
    40e4:	80 e3       	ldi	r24, 0x30	; 48
    40e6:	0e 94 07 20 	call	0x400e	; 0x400e <H_LCD_void_sendData>
    40ea:	69 c0       	rjmp	.+210    	; 0x41be <H_LCD_void_sendIntNum+0x11c>
	   return ;
   }
   else if(copy_s32Num < 0)//negative
    40ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    40ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    40f0:	ae 85       	ldd	r26, Y+14	; 0x0e
    40f2:	bf 85       	ldd	r27, Y+15	; 0x0f
    40f4:	bb 23       	and	r27, r27
    40f6:	0c f0       	brlt	.+2      	; 0x40fa <H_LCD_void_sendIntNum+0x58>
    40f8:	42 c0       	rjmp	.+132    	; 0x417e <H_LCD_void_sendIntNum+0xdc>
   {
	   H_LCD_void_sendData('-');
    40fa:	8d e2       	ldi	r24, 0x2D	; 45
    40fc:	0e 94 07 20 	call	0x400e	; 0x400e <H_LCD_void_sendData>
	   copy_s32Num *= -1;
    4100:	8c 85       	ldd	r24, Y+12	; 0x0c
    4102:	9d 85       	ldd	r25, Y+13	; 0x0d
    4104:	ae 85       	ldd	r26, Y+14	; 0x0e
    4106:	bf 85       	ldd	r27, Y+15	; 0x0f
    4108:	b0 95       	com	r27
    410a:	a0 95       	com	r26
    410c:	90 95       	com	r25
    410e:	81 95       	neg	r24
    4110:	9f 4f       	sbci	r25, 0xFF	; 255
    4112:	af 4f       	sbci	r26, 0xFF	; 255
    4114:	bf 4f       	sbci	r27, 0xFF	; 255
    4116:	8c 87       	std	Y+12, r24	; 0x0c
    4118:	9d 87       	std	Y+13, r25	; 0x0d
    411a:	ae 87       	std	Y+14, r26	; 0x0e
    411c:	bf 87       	std	Y+15, r27	; 0x0f
    411e:	2f c0       	rjmp	.+94     	; 0x417e <H_LCD_void_sendIntNum+0xdc>
   }
   while(copy_s32Num != 0)
   {
	   Loc_Arr[i] = copy_s32Num % 10;
    4120:	89 81       	ldd	r24, Y+1	; 0x01
    4122:	08 2f       	mov	r16, r24
    4124:	11 27       	eor	r17, r17
    4126:	07 fd       	sbrc	r16, 7
    4128:	10 95       	com	r17
    412a:	8c 85       	ldd	r24, Y+12	; 0x0c
    412c:	9d 85       	ldd	r25, Y+13	; 0x0d
    412e:	ae 85       	ldd	r26, Y+14	; 0x0e
    4130:	bf 85       	ldd	r27, Y+15	; 0x0f
    4132:	2a e0       	ldi	r18, 0x0A	; 10
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	40 e0       	ldi	r20, 0x00	; 0
    4138:	50 e0       	ldi	r21, 0x00	; 0
    413a:	bc 01       	movw	r22, r24
    413c:	cd 01       	movw	r24, r26
    413e:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <__divmodsi4>
    4142:	dc 01       	movw	r26, r24
    4144:	cb 01       	movw	r24, r22
    4146:	28 2f       	mov	r18, r24
    4148:	ce 01       	movw	r24, r28
    414a:	02 96       	adiw	r24, 0x02	; 2
    414c:	fc 01       	movw	r30, r24
    414e:	e0 0f       	add	r30, r16
    4150:	f1 1f       	adc	r31, r17
    4152:	20 83       	st	Z, r18
	   copy_s32Num = copy_s32Num /10 ;
    4154:	8c 85       	ldd	r24, Y+12	; 0x0c
    4156:	9d 85       	ldd	r25, Y+13	; 0x0d
    4158:	ae 85       	ldd	r26, Y+14	; 0x0e
    415a:	bf 85       	ldd	r27, Y+15	; 0x0f
    415c:	2a e0       	ldi	r18, 0x0A	; 10
    415e:	30 e0       	ldi	r19, 0x00	; 0
    4160:	40 e0       	ldi	r20, 0x00	; 0
    4162:	50 e0       	ldi	r21, 0x00	; 0
    4164:	bc 01       	movw	r22, r24
    4166:	cd 01       	movw	r24, r26
    4168:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <__divmodsi4>
    416c:	da 01       	movw	r26, r20
    416e:	c9 01       	movw	r24, r18
    4170:	8c 87       	std	Y+12, r24	; 0x0c
    4172:	9d 87       	std	Y+13, r25	; 0x0d
    4174:	ae 87       	std	Y+14, r26	; 0x0e
    4176:	bf 87       	std	Y+15, r27	; 0x0f
	   i++;
    4178:	89 81       	ldd	r24, Y+1	; 0x01
    417a:	8f 5f       	subi	r24, 0xFF	; 255
    417c:	89 83       	std	Y+1, r24	; 0x01
   else if(copy_s32Num < 0)//negative
   {
	   H_LCD_void_sendData('-');
	   copy_s32Num *= -1;
   }
   while(copy_s32Num != 0)
    417e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4180:	9d 85       	ldd	r25, Y+13	; 0x0d
    4182:	ae 85       	ldd	r26, Y+14	; 0x0e
    4184:	bf 85       	ldd	r27, Y+15	; 0x0f
    4186:	00 97       	sbiw	r24, 0x00	; 0
    4188:	a1 05       	cpc	r26, r1
    418a:	b1 05       	cpc	r27, r1
    418c:	49 f6       	brne	.-110    	; 0x4120 <H_LCD_void_sendIntNum+0x7e>
   {
	   Loc_Arr[i] = copy_s32Num % 10;
	   copy_s32Num = copy_s32Num /10 ;
	   i++;
   }
   i--;
    418e:	89 81       	ldd	r24, Y+1	; 0x01
    4190:	81 50       	subi	r24, 0x01	; 1
    4192:	89 83       	std	Y+1, r24	; 0x01
    4194:	11 c0       	rjmp	.+34     	; 0x41b8 <H_LCD_void_sendIntNum+0x116>
   while(i>=0)
   {
	   H_LCD_void_sendData(Loc_Arr[i]+'0');
    4196:	89 81       	ldd	r24, Y+1	; 0x01
    4198:	28 2f       	mov	r18, r24
    419a:	33 27       	eor	r19, r19
    419c:	27 fd       	sbrc	r18, 7
    419e:	30 95       	com	r19
    41a0:	ce 01       	movw	r24, r28
    41a2:	02 96       	adiw	r24, 0x02	; 2
    41a4:	fc 01       	movw	r30, r24
    41a6:	e2 0f       	add	r30, r18
    41a8:	f3 1f       	adc	r31, r19
    41aa:	80 81       	ld	r24, Z
    41ac:	80 5d       	subi	r24, 0xD0	; 208
    41ae:	0e 94 07 20 	call	0x400e	; 0x400e <H_LCD_void_sendData>
	   i--;
    41b2:	89 81       	ldd	r24, Y+1	; 0x01
    41b4:	81 50       	subi	r24, 0x01	; 1
    41b6:	89 83       	std	Y+1, r24	; 0x01
	   Loc_Arr[i] = copy_s32Num % 10;
	   copy_s32Num = copy_s32Num /10 ;
	   i++;
   }
   i--;
   while(i>=0)
    41b8:	89 81       	ldd	r24, Y+1	; 0x01
    41ba:	88 23       	and	r24, r24
    41bc:	64 f7       	brge	.-40     	; 0x4196 <H_LCD_void_sendIntNum+0xf4>
   {
	   H_LCD_void_sendData(Loc_Arr[i]+'0');
	   i--;
   }
}
    41be:	2f 96       	adiw	r28, 0x0f	; 15
    41c0:	0f b6       	in	r0, 0x3f	; 63
    41c2:	f8 94       	cli
    41c4:	de bf       	out	0x3e, r29	; 62
    41c6:	0f be       	out	0x3f, r0	; 63
    41c8:	cd bf       	out	0x3d, r28	; 61
    41ca:	cf 91       	pop	r28
    41cc:	df 91       	pop	r29
    41ce:	1f 91       	pop	r17
    41d0:	0f 91       	pop	r16
    41d2:	08 95       	ret

000041d4 <H_LCD_void_gotXY>:
void H_LCD_void_gotXY(u8 copy_u8Row,u8 copy_u8Col)
{
    41d4:	df 93       	push	r29
    41d6:	cf 93       	push	r28
    41d8:	00 d0       	rcall	.+0      	; 0x41da <H_LCD_void_gotXY+0x6>
    41da:	00 d0       	rcall	.+0      	; 0x41dc <H_LCD_void_gotXY+0x8>
    41dc:	cd b7       	in	r28, 0x3d	; 61
    41de:	de b7       	in	r29, 0x3e	; 62
    41e0:	89 83       	std	Y+1, r24	; 0x01
    41e2:	6a 83       	std	Y+2, r22	; 0x02
  if(copy_u8Row == 0 || copy_u8Row == 1) //check on row
    41e4:	89 81       	ldd	r24, Y+1	; 0x01
    41e6:	88 23       	and	r24, r24
    41e8:	19 f0       	breq	.+6      	; 0x41f0 <H_LCD_void_gotXY+0x1c>
    41ea:	89 81       	ldd	r24, Y+1	; 0x01
    41ec:	81 30       	cpi	r24, 0x01	; 1
    41ee:	d9 f4       	brne	.+54     	; 0x4226 <H_LCD_void_gotXY+0x52>
  {
	  if(copy_u8Col >= 0 && copy_u8Col <= 15)// check on col
    41f0:	8a 81       	ldd	r24, Y+2	; 0x02
    41f2:	80 31       	cpi	r24, 0x10	; 16
    41f4:	c0 f4       	brcc	.+48     	; 0x4226 <H_LCD_void_gotXY+0x52>
	  {
          switch(copy_u8Row)
    41f6:	89 81       	ldd	r24, Y+1	; 0x01
    41f8:	28 2f       	mov	r18, r24
    41fa:	30 e0       	ldi	r19, 0x00	; 0
    41fc:	3c 83       	std	Y+4, r19	; 0x04
    41fe:	2b 83       	std	Y+3, r18	; 0x03
    4200:	8b 81       	ldd	r24, Y+3	; 0x03
    4202:	9c 81       	ldd	r25, Y+4	; 0x04
    4204:	00 97       	sbiw	r24, 0x00	; 0
    4206:	31 f0       	breq	.+12     	; 0x4214 <H_LCD_void_gotXY+0x40>
    4208:	2b 81       	ldd	r18, Y+3	; 0x03
    420a:	3c 81       	ldd	r19, Y+4	; 0x04
    420c:	21 30       	cpi	r18, 0x01	; 1
    420e:	31 05       	cpc	r19, r1
    4210:	31 f0       	breq	.+12     	; 0x421e <H_LCD_void_gotXY+0x4a>
    4212:	09 c0       	rjmp	.+18     	; 0x4226 <H_LCD_void_gotXY+0x52>
          {
          case 0 :
        	  H_LCD_void_sendCommand(LCD_SET_R0C0_ + copy_u8Col);
    4214:	8a 81       	ldd	r24, Y+2	; 0x02
    4216:	80 58       	subi	r24, 0x80	; 128
    4218:	0e 94 19 20 	call	0x4032	; 0x4032 <H_LCD_void_sendCommand>
    421c:	04 c0       	rjmp	.+8      	; 0x4226 <H_LCD_void_gotXY+0x52>
        	  break;
          case 1 :
        	  H_LCD_void_sendCommand(LCD_SET_R1C0_ + copy_u8Col);
    421e:	8a 81       	ldd	r24, Y+2	; 0x02
    4220:	80 54       	subi	r24, 0x40	; 64
    4222:	0e 94 19 20 	call	0x4032	; 0x4032 <H_LCD_void_sendCommand>
        	  break;
          }
	  }
  }
}
    4226:	0f 90       	pop	r0
    4228:	0f 90       	pop	r0
    422a:	0f 90       	pop	r0
    422c:	0f 90       	pop	r0
    422e:	cf 91       	pop	r28
    4230:	df 91       	pop	r29
    4232:	08 95       	ret

00004234 <H_LCD_void_creatCustomChar>:
void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charCode)
{
    4234:	df 93       	push	r29
    4236:	cf 93       	push	r28
    4238:	00 d0       	rcall	.+0      	; 0x423a <H_LCD_void_creatCustomChar+0x6>
    423a:	0f 92       	push	r0
    423c:	cd b7       	in	r28, 0x3d	; 61
    423e:	de b7       	in	r29, 0x3e	; 62
    4240:	9a 83       	std	Y+2, r25	; 0x02
    4242:	89 83       	std	Y+1, r24	; 0x01
    4244:	6b 83       	std	Y+3, r22	; 0x03

}
    4246:	0f 90       	pop	r0
    4248:	0f 90       	pop	r0
    424a:	0f 90       	pop	r0
    424c:	cf 91       	pop	r28
    424e:	df 91       	pop	r29
    4250:	08 95       	ret

00004252 <H_LCD_void_displayCustomChar>:
void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{
    4252:	df 93       	push	r29
    4254:	cf 93       	push	r28
    4256:	0f 92       	push	r0
    4258:	cd b7       	in	r28, 0x3d	; 61
    425a:	de b7       	in	r29, 0x3e	; 62
    425c:	89 83       	std	Y+1, r24	; 0x01

}
    425e:	0f 90       	pop	r0
    4260:	cf 91       	pop	r28
    4262:	df 91       	pop	r29
    4264:	08 95       	ret

00004266 <H_LCD_void_writeNlatch>:
static void H_LCD_void_writeNlatch(u8 copy_u8Byte)
{
    4266:	df 93       	push	r29
    4268:	cf 93       	push	r28
    426a:	cd b7       	in	r28, 0x3d	; 61
    426c:	de b7       	in	r29, 0x3e	; 62
    426e:	e9 97       	sbiw	r28, 0x39	; 57
    4270:	0f b6       	in	r0, 0x3f	; 63
    4272:	f8 94       	cli
    4274:	de bf       	out	0x3e, r29	; 62
    4276:	0f be       	out	0x3f, r0	; 63
    4278:	cd bf       	out	0x3d, r28	; 61
    427a:	89 af       	std	Y+57, r24	; 0x39
 	M_Dio_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
  // step 5 : delay to allow LCD to process
 	_delay_ms(5);
#elif(LCD_MODE ==  LCD_4BIT_MODE_)
 	// EN = 0 disabled
 	M_DIO_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    427c:	80 e0       	ldi	r24, 0x00	; 0
    427e:	62 e0       	ldi	r22, 0x02	; 2
    4280:	40 e0       	ldi	r20, 0x00	; 0
    4282:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
 	// devide Byte to 2 (4 bits )
 	// step 1 :send high order bits on pins (D7 .. D4)
 	M_DIO_void_setPinValue(LCD_D4_PORT ,LCD_D4_PIN  , GET_BIT(copy_u8Byte,4));
    4286:	89 ad       	ldd	r24, Y+57	; 0x39
    4288:	82 95       	swap	r24
    428a:	8f 70       	andi	r24, 0x0F	; 15
    428c:	98 2f       	mov	r25, r24
    428e:	91 70       	andi	r25, 0x01	; 1
    4290:	80 e0       	ldi	r24, 0x00	; 0
    4292:	63 e0       	ldi	r22, 0x03	; 3
    4294:	49 2f       	mov	r20, r25
    4296:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
 	M_DIO_void_setPinValue(LCD_D5_PORT ,LCD_D5_PIN  , GET_BIT(copy_u8Byte,5));
    429a:	89 ad       	ldd	r24, Y+57	; 0x39
    429c:	82 95       	swap	r24
    429e:	86 95       	lsr	r24
    42a0:	87 70       	andi	r24, 0x07	; 7
    42a2:	98 2f       	mov	r25, r24
    42a4:	91 70       	andi	r25, 0x01	; 1
    42a6:	80 e0       	ldi	r24, 0x00	; 0
    42a8:	64 e0       	ldi	r22, 0x04	; 4
    42aa:	49 2f       	mov	r20, r25
    42ac:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
 	M_DIO_void_setPinValue(LCD_D6_PORT ,LCD_D6_PIN  , GET_BIT(copy_u8Byte,6));
    42b0:	89 ad       	ldd	r24, Y+57	; 0x39
    42b2:	82 95       	swap	r24
    42b4:	86 95       	lsr	r24
    42b6:	86 95       	lsr	r24
    42b8:	83 70       	andi	r24, 0x03	; 3
    42ba:	98 2f       	mov	r25, r24
    42bc:	91 70       	andi	r25, 0x01	; 1
    42be:	80 e0       	ldi	r24, 0x00	; 0
    42c0:	65 e0       	ldi	r22, 0x05	; 5
    42c2:	49 2f       	mov	r20, r25
    42c4:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
 	M_DIO_void_setPinValue(LCD_D7_PORT ,LCD_D7_PIN  , GET_BIT(copy_u8Byte,7));
    42c8:	89 ad       	ldd	r24, Y+57	; 0x39
    42ca:	98 2f       	mov	r25, r24
    42cc:	99 1f       	adc	r25, r25
    42ce:	99 27       	eor	r25, r25
    42d0:	99 1f       	adc	r25, r25
    42d2:	80 e0       	ldi	r24, 0x00	; 0
    42d4:	66 e0       	ldi	r22, 0x06	; 6
    42d6:	49 2f       	mov	r20, r25
    42d8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
 	  //step 2 : Activate Enable ,( E = 1)
 	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,HIGH);
    42dc:	80 e0       	ldi	r24, 0x00	; 0
    42de:	62 e0       	ldi	r22, 0x02	; 2
    42e0:	41 e0       	ldi	r20, 0x01	; 1
    42e2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    42e6:	80 e0       	ldi	r24, 0x00	; 0
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	a0 e8       	ldi	r26, 0x80	; 128
    42ec:	bf e3       	ldi	r27, 0x3F	; 63
    42ee:	8d ab       	std	Y+53, r24	; 0x35
    42f0:	9e ab       	std	Y+54, r25	; 0x36
    42f2:	af ab       	std	Y+55, r26	; 0x37
    42f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42f6:	6d a9       	ldd	r22, Y+53	; 0x35
    42f8:	7e a9       	ldd	r23, Y+54	; 0x36
    42fa:	8f a9       	ldd	r24, Y+55	; 0x37
    42fc:	98 ad       	ldd	r25, Y+56	; 0x38
    42fe:	20 e0       	ldi	r18, 0x00	; 0
    4300:	30 e0       	ldi	r19, 0x00	; 0
    4302:	48 ec       	ldi	r20, 0xC8	; 200
    4304:	53 e4       	ldi	r21, 0x43	; 67
    4306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    430a:	dc 01       	movw	r26, r24
    430c:	cb 01       	movw	r24, r22
    430e:	89 ab       	std	Y+49, r24	; 0x31
    4310:	9a ab       	std	Y+50, r25	; 0x32
    4312:	ab ab       	std	Y+51, r26	; 0x33
    4314:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4316:	69 a9       	ldd	r22, Y+49	; 0x31
    4318:	7a a9       	ldd	r23, Y+50	; 0x32
    431a:	8b a9       	ldd	r24, Y+51	; 0x33
    431c:	9c a9       	ldd	r25, Y+52	; 0x34
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	30 e0       	ldi	r19, 0x00	; 0
    4322:	40 e8       	ldi	r20, 0x80	; 128
    4324:	5f e3       	ldi	r21, 0x3F	; 63
    4326:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    432a:	88 23       	and	r24, r24
    432c:	2c f4       	brge	.+10     	; 0x4338 <H_LCD_void_writeNlatch+0xd2>
		__ticks = 1;
    432e:	81 e0       	ldi	r24, 0x01	; 1
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	98 ab       	std	Y+48, r25	; 0x30
    4334:	8f a7       	std	Y+47, r24	; 0x2f
    4336:	3f c0       	rjmp	.+126    	; 0x43b6 <H_LCD_void_writeNlatch+0x150>
	else if (__tmp > 65535)
    4338:	69 a9       	ldd	r22, Y+49	; 0x31
    433a:	7a a9       	ldd	r23, Y+50	; 0x32
    433c:	8b a9       	ldd	r24, Y+51	; 0x33
    433e:	9c a9       	ldd	r25, Y+52	; 0x34
    4340:	20 e0       	ldi	r18, 0x00	; 0
    4342:	3f ef       	ldi	r19, 0xFF	; 255
    4344:	4f e7       	ldi	r20, 0x7F	; 127
    4346:	57 e4       	ldi	r21, 0x47	; 71
    4348:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    434c:	18 16       	cp	r1, r24
    434e:	4c f5       	brge	.+82     	; 0x43a2 <H_LCD_void_writeNlatch+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4350:	6d a9       	ldd	r22, Y+53	; 0x35
    4352:	7e a9       	ldd	r23, Y+54	; 0x36
    4354:	8f a9       	ldd	r24, Y+55	; 0x37
    4356:	98 ad       	ldd	r25, Y+56	; 0x38
    4358:	20 e0       	ldi	r18, 0x00	; 0
    435a:	30 e0       	ldi	r19, 0x00	; 0
    435c:	40 e2       	ldi	r20, 0x20	; 32
    435e:	51 e4       	ldi	r21, 0x41	; 65
    4360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4364:	dc 01       	movw	r26, r24
    4366:	cb 01       	movw	r24, r22
    4368:	bc 01       	movw	r22, r24
    436a:	cd 01       	movw	r24, r26
    436c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4370:	dc 01       	movw	r26, r24
    4372:	cb 01       	movw	r24, r22
    4374:	98 ab       	std	Y+48, r25	; 0x30
    4376:	8f a7       	std	Y+47, r24	; 0x2f
    4378:	0f c0       	rjmp	.+30     	; 0x4398 <H_LCD_void_writeNlatch+0x132>
    437a:	88 e2       	ldi	r24, 0x28	; 40
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	9e a7       	std	Y+46, r25	; 0x2e
    4380:	8d a7       	std	Y+45, r24	; 0x2d
    4382:	8d a5       	ldd	r24, Y+45	; 0x2d
    4384:	9e a5       	ldd	r25, Y+46	; 0x2e
    4386:	01 97       	sbiw	r24, 0x01	; 1
    4388:	f1 f7       	brne	.-4      	; 0x4386 <H_LCD_void_writeNlatch+0x120>
    438a:	9e a7       	std	Y+46, r25	; 0x2e
    438c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    438e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4390:	98 a9       	ldd	r25, Y+48	; 0x30
    4392:	01 97       	sbiw	r24, 0x01	; 1
    4394:	98 ab       	std	Y+48, r25	; 0x30
    4396:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4398:	8f a5       	ldd	r24, Y+47	; 0x2f
    439a:	98 a9       	ldd	r25, Y+48	; 0x30
    439c:	00 97       	sbiw	r24, 0x00	; 0
    439e:	69 f7       	brne	.-38     	; 0x437a <H_LCD_void_writeNlatch+0x114>
    43a0:	14 c0       	rjmp	.+40     	; 0x43ca <H_LCD_void_writeNlatch+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43a2:	69 a9       	ldd	r22, Y+49	; 0x31
    43a4:	7a a9       	ldd	r23, Y+50	; 0x32
    43a6:	8b a9       	ldd	r24, Y+51	; 0x33
    43a8:	9c a9       	ldd	r25, Y+52	; 0x34
    43aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ae:	dc 01       	movw	r26, r24
    43b0:	cb 01       	movw	r24, r22
    43b2:	98 ab       	std	Y+48, r25	; 0x30
    43b4:	8f a7       	std	Y+47, r24	; 0x2f
    43b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    43b8:	98 a9       	ldd	r25, Y+48	; 0x30
    43ba:	9c a7       	std	Y+44, r25	; 0x2c
    43bc:	8b a7       	std	Y+43, r24	; 0x2b
    43be:	8b a5       	ldd	r24, Y+43	; 0x2b
    43c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    43c2:	01 97       	sbiw	r24, 0x01	; 1
    43c4:	f1 f7       	brne	.-4      	; 0x43c2 <H_LCD_void_writeNlatch+0x15c>
    43c6:	9c a7       	std	Y+44, r25	; 0x2c
    43c8:	8b a7       	std	Y+43, r24	; 0x2b
 	  // step 3 : delay for 1 msec 	to allow latching
 	 	_delay_ms(1);
 	  // step 4 : deactivate Enable (E = 0)
 	 	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
    43ca:	80 e0       	ldi	r24, 0x00	; 0
    43cc:	62 e0       	ldi	r22, 0x02	; 2
    43ce:	40 e0       	ldi	r20, 0x00	; 0
    43d0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    43d4:	80 e0       	ldi	r24, 0x00	; 0
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	a0 ea       	ldi	r26, 0xA0	; 160
    43da:	b0 e4       	ldi	r27, 0x40	; 64
    43dc:	8f a3       	std	Y+39, r24	; 0x27
    43de:	98 a7       	std	Y+40, r25	; 0x28
    43e0:	a9 a7       	std	Y+41, r26	; 0x29
    43e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43e4:	6f a1       	ldd	r22, Y+39	; 0x27
    43e6:	78 a5       	ldd	r23, Y+40	; 0x28
    43e8:	89 a5       	ldd	r24, Y+41	; 0x29
    43ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    43ec:	20 e0       	ldi	r18, 0x00	; 0
    43ee:	30 e0       	ldi	r19, 0x00	; 0
    43f0:	48 ec       	ldi	r20, 0xC8	; 200
    43f2:	53 e4       	ldi	r21, 0x43	; 67
    43f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43f8:	dc 01       	movw	r26, r24
    43fa:	cb 01       	movw	r24, r22
    43fc:	8b a3       	std	Y+35, r24	; 0x23
    43fe:	9c a3       	std	Y+36, r25	; 0x24
    4400:	ad a3       	std	Y+37, r26	; 0x25
    4402:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4404:	6b a1       	ldd	r22, Y+35	; 0x23
    4406:	7c a1       	ldd	r23, Y+36	; 0x24
    4408:	8d a1       	ldd	r24, Y+37	; 0x25
    440a:	9e a1       	ldd	r25, Y+38	; 0x26
    440c:	20 e0       	ldi	r18, 0x00	; 0
    440e:	30 e0       	ldi	r19, 0x00	; 0
    4410:	40 e8       	ldi	r20, 0x80	; 128
    4412:	5f e3       	ldi	r21, 0x3F	; 63
    4414:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4418:	88 23       	and	r24, r24
    441a:	2c f4       	brge	.+10     	; 0x4426 <H_LCD_void_writeNlatch+0x1c0>
		__ticks = 1;
    441c:	81 e0       	ldi	r24, 0x01	; 1
    441e:	90 e0       	ldi	r25, 0x00	; 0
    4420:	9a a3       	std	Y+34, r25	; 0x22
    4422:	89 a3       	std	Y+33, r24	; 0x21
    4424:	3f c0       	rjmp	.+126    	; 0x44a4 <H_LCD_void_writeNlatch+0x23e>
	else if (__tmp > 65535)
    4426:	6b a1       	ldd	r22, Y+35	; 0x23
    4428:	7c a1       	ldd	r23, Y+36	; 0x24
    442a:	8d a1       	ldd	r24, Y+37	; 0x25
    442c:	9e a1       	ldd	r25, Y+38	; 0x26
    442e:	20 e0       	ldi	r18, 0x00	; 0
    4430:	3f ef       	ldi	r19, 0xFF	; 255
    4432:	4f e7       	ldi	r20, 0x7F	; 127
    4434:	57 e4       	ldi	r21, 0x47	; 71
    4436:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    443a:	18 16       	cp	r1, r24
    443c:	4c f5       	brge	.+82     	; 0x4490 <H_LCD_void_writeNlatch+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    443e:	6f a1       	ldd	r22, Y+39	; 0x27
    4440:	78 a5       	ldd	r23, Y+40	; 0x28
    4442:	89 a5       	ldd	r24, Y+41	; 0x29
    4444:	9a a5       	ldd	r25, Y+42	; 0x2a
    4446:	20 e0       	ldi	r18, 0x00	; 0
    4448:	30 e0       	ldi	r19, 0x00	; 0
    444a:	40 e2       	ldi	r20, 0x20	; 32
    444c:	51 e4       	ldi	r21, 0x41	; 65
    444e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4452:	dc 01       	movw	r26, r24
    4454:	cb 01       	movw	r24, r22
    4456:	bc 01       	movw	r22, r24
    4458:	cd 01       	movw	r24, r26
    445a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    445e:	dc 01       	movw	r26, r24
    4460:	cb 01       	movw	r24, r22
    4462:	9a a3       	std	Y+34, r25	; 0x22
    4464:	89 a3       	std	Y+33, r24	; 0x21
    4466:	0f c0       	rjmp	.+30     	; 0x4486 <H_LCD_void_writeNlatch+0x220>
    4468:	88 e2       	ldi	r24, 0x28	; 40
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	98 a3       	std	Y+32, r25	; 0x20
    446e:	8f 8f       	std	Y+31, r24	; 0x1f
    4470:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4472:	98 a1       	ldd	r25, Y+32	; 0x20
    4474:	01 97       	sbiw	r24, 0x01	; 1
    4476:	f1 f7       	brne	.-4      	; 0x4474 <H_LCD_void_writeNlatch+0x20e>
    4478:	98 a3       	std	Y+32, r25	; 0x20
    447a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    447c:	89 a1       	ldd	r24, Y+33	; 0x21
    447e:	9a a1       	ldd	r25, Y+34	; 0x22
    4480:	01 97       	sbiw	r24, 0x01	; 1
    4482:	9a a3       	std	Y+34, r25	; 0x22
    4484:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4486:	89 a1       	ldd	r24, Y+33	; 0x21
    4488:	9a a1       	ldd	r25, Y+34	; 0x22
    448a:	00 97       	sbiw	r24, 0x00	; 0
    448c:	69 f7       	brne	.-38     	; 0x4468 <H_LCD_void_writeNlatch+0x202>
    448e:	14 c0       	rjmp	.+40     	; 0x44b8 <H_LCD_void_writeNlatch+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4490:	6b a1       	ldd	r22, Y+35	; 0x23
    4492:	7c a1       	ldd	r23, Y+36	; 0x24
    4494:	8d a1       	ldd	r24, Y+37	; 0x25
    4496:	9e a1       	ldd	r25, Y+38	; 0x26
    4498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    449c:	dc 01       	movw	r26, r24
    449e:	cb 01       	movw	r24, r22
    44a0:	9a a3       	std	Y+34, r25	; 0x22
    44a2:	89 a3       	std	Y+33, r24	; 0x21
    44a4:	89 a1       	ldd	r24, Y+33	; 0x21
    44a6:	9a a1       	ldd	r25, Y+34	; 0x22
    44a8:	9e 8f       	std	Y+30, r25	; 0x1e
    44aa:	8d 8f       	std	Y+29, r24	; 0x1d
    44ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44b0:	01 97       	sbiw	r24, 0x01	; 1
    44b2:	f1 f7       	brne	.-4      	; 0x44b0 <H_LCD_void_writeNlatch+0x24a>
    44b4:	9e 8f       	std	Y+30, r25	; 0x1e
    44b6:	8d 8f       	std	Y+29, r24	; 0x1d
 	  // step 5 : delay to allow LCD to process
 	 	_delay_ms(5);
 	 	// step 6 :send Low order bits on pins (D7 .. D4)
 	 	M_DIO_void_setPinValue(LCD_D4_PORT ,LCD_D4_PIN  , GET_BIT(copy_u8Byte,0));
    44b8:	89 ad       	ldd	r24, Y+57	; 0x39
    44ba:	98 2f       	mov	r25, r24
    44bc:	91 70       	andi	r25, 0x01	; 1
    44be:	80 e0       	ldi	r24, 0x00	; 0
    44c0:	63 e0       	ldi	r22, 0x03	; 3
    44c2:	49 2f       	mov	r20, r25
    44c4:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
 	 	M_DIO_void_setPinValue(LCD_D5_PORT ,LCD_D5_PIN  , GET_BIT(copy_u8Byte,1));
    44c8:	89 ad       	ldd	r24, Y+57	; 0x39
    44ca:	86 95       	lsr	r24
    44cc:	98 2f       	mov	r25, r24
    44ce:	91 70       	andi	r25, 0x01	; 1
    44d0:	80 e0       	ldi	r24, 0x00	; 0
    44d2:	64 e0       	ldi	r22, 0x04	; 4
    44d4:	49 2f       	mov	r20, r25
    44d6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
 	 	M_DIO_void_setPinValue(LCD_D6_PORT ,LCD_D6_PIN  , GET_BIT(copy_u8Byte,2));
    44da:	89 ad       	ldd	r24, Y+57	; 0x39
    44dc:	86 95       	lsr	r24
    44de:	86 95       	lsr	r24
    44e0:	98 2f       	mov	r25, r24
    44e2:	91 70       	andi	r25, 0x01	; 1
    44e4:	80 e0       	ldi	r24, 0x00	; 0
    44e6:	65 e0       	ldi	r22, 0x05	; 5
    44e8:	49 2f       	mov	r20, r25
    44ea:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
 	 	M_DIO_void_setPinValue(LCD_D7_PORT ,LCD_D7_PIN  , GET_BIT(copy_u8Byte,3));
    44ee:	89 ad       	ldd	r24, Y+57	; 0x39
    44f0:	86 95       	lsr	r24
    44f2:	86 95       	lsr	r24
    44f4:	86 95       	lsr	r24
    44f6:	98 2f       	mov	r25, r24
    44f8:	91 70       	andi	r25, 0x01	; 1
    44fa:	80 e0       	ldi	r24, 0x00	; 0
    44fc:	66 e0       	ldi	r22, 0x06	; 6
    44fe:	49 2f       	mov	r20, r25
    4500:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
 	 	 //step 7 : Activate Enable ,( E = 1)
 	 	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,HIGH);
    4504:	80 e0       	ldi	r24, 0x00	; 0
    4506:	62 e0       	ldi	r22, 0x02	; 2
    4508:	41 e0       	ldi	r20, 0x01	; 1
    450a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    450e:	80 e0       	ldi	r24, 0x00	; 0
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	a0 e8       	ldi	r26, 0x80	; 128
    4514:	bf e3       	ldi	r27, 0x3F	; 63
    4516:	89 8f       	std	Y+25, r24	; 0x19
    4518:	9a 8f       	std	Y+26, r25	; 0x1a
    451a:	ab 8f       	std	Y+27, r26	; 0x1b
    451c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    451e:	69 8d       	ldd	r22, Y+25	; 0x19
    4520:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4522:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4524:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4526:	20 e0       	ldi	r18, 0x00	; 0
    4528:	30 e0       	ldi	r19, 0x00	; 0
    452a:	48 ec       	ldi	r20, 0xC8	; 200
    452c:	53 e4       	ldi	r21, 0x43	; 67
    452e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4532:	dc 01       	movw	r26, r24
    4534:	cb 01       	movw	r24, r22
    4536:	8d 8b       	std	Y+21, r24	; 0x15
    4538:	9e 8b       	std	Y+22, r25	; 0x16
    453a:	af 8b       	std	Y+23, r26	; 0x17
    453c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    453e:	6d 89       	ldd	r22, Y+21	; 0x15
    4540:	7e 89       	ldd	r23, Y+22	; 0x16
    4542:	8f 89       	ldd	r24, Y+23	; 0x17
    4544:	98 8d       	ldd	r25, Y+24	; 0x18
    4546:	20 e0       	ldi	r18, 0x00	; 0
    4548:	30 e0       	ldi	r19, 0x00	; 0
    454a:	40 e8       	ldi	r20, 0x80	; 128
    454c:	5f e3       	ldi	r21, 0x3F	; 63
    454e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4552:	88 23       	and	r24, r24
    4554:	2c f4       	brge	.+10     	; 0x4560 <H_LCD_void_writeNlatch+0x2fa>
		__ticks = 1;
    4556:	81 e0       	ldi	r24, 0x01	; 1
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	9c 8b       	std	Y+20, r25	; 0x14
    455c:	8b 8b       	std	Y+19, r24	; 0x13
    455e:	3f c0       	rjmp	.+126    	; 0x45de <H_LCD_void_writeNlatch+0x378>
	else if (__tmp > 65535)
    4560:	6d 89       	ldd	r22, Y+21	; 0x15
    4562:	7e 89       	ldd	r23, Y+22	; 0x16
    4564:	8f 89       	ldd	r24, Y+23	; 0x17
    4566:	98 8d       	ldd	r25, Y+24	; 0x18
    4568:	20 e0       	ldi	r18, 0x00	; 0
    456a:	3f ef       	ldi	r19, 0xFF	; 255
    456c:	4f e7       	ldi	r20, 0x7F	; 127
    456e:	57 e4       	ldi	r21, 0x47	; 71
    4570:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4574:	18 16       	cp	r1, r24
    4576:	4c f5       	brge	.+82     	; 0x45ca <H_LCD_void_writeNlatch+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4578:	69 8d       	ldd	r22, Y+25	; 0x19
    457a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    457c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    457e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4580:	20 e0       	ldi	r18, 0x00	; 0
    4582:	30 e0       	ldi	r19, 0x00	; 0
    4584:	40 e2       	ldi	r20, 0x20	; 32
    4586:	51 e4       	ldi	r21, 0x41	; 65
    4588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    458c:	dc 01       	movw	r26, r24
    458e:	cb 01       	movw	r24, r22
    4590:	bc 01       	movw	r22, r24
    4592:	cd 01       	movw	r24, r26
    4594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4598:	dc 01       	movw	r26, r24
    459a:	cb 01       	movw	r24, r22
    459c:	9c 8b       	std	Y+20, r25	; 0x14
    459e:	8b 8b       	std	Y+19, r24	; 0x13
    45a0:	0f c0       	rjmp	.+30     	; 0x45c0 <H_LCD_void_writeNlatch+0x35a>
    45a2:	88 e2       	ldi	r24, 0x28	; 40
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	9a 8b       	std	Y+18, r25	; 0x12
    45a8:	89 8b       	std	Y+17, r24	; 0x11
    45aa:	89 89       	ldd	r24, Y+17	; 0x11
    45ac:	9a 89       	ldd	r25, Y+18	; 0x12
    45ae:	01 97       	sbiw	r24, 0x01	; 1
    45b0:	f1 f7       	brne	.-4      	; 0x45ae <H_LCD_void_writeNlatch+0x348>
    45b2:	9a 8b       	std	Y+18, r25	; 0x12
    45b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45b6:	8b 89       	ldd	r24, Y+19	; 0x13
    45b8:	9c 89       	ldd	r25, Y+20	; 0x14
    45ba:	01 97       	sbiw	r24, 0x01	; 1
    45bc:	9c 8b       	std	Y+20, r25	; 0x14
    45be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45c0:	8b 89       	ldd	r24, Y+19	; 0x13
    45c2:	9c 89       	ldd	r25, Y+20	; 0x14
    45c4:	00 97       	sbiw	r24, 0x00	; 0
    45c6:	69 f7       	brne	.-38     	; 0x45a2 <H_LCD_void_writeNlatch+0x33c>
    45c8:	14 c0       	rjmp	.+40     	; 0x45f2 <H_LCD_void_writeNlatch+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45ca:	6d 89       	ldd	r22, Y+21	; 0x15
    45cc:	7e 89       	ldd	r23, Y+22	; 0x16
    45ce:	8f 89       	ldd	r24, Y+23	; 0x17
    45d0:	98 8d       	ldd	r25, Y+24	; 0x18
    45d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45d6:	dc 01       	movw	r26, r24
    45d8:	cb 01       	movw	r24, r22
    45da:	9c 8b       	std	Y+20, r25	; 0x14
    45dc:	8b 8b       	std	Y+19, r24	; 0x13
    45de:	8b 89       	ldd	r24, Y+19	; 0x13
    45e0:	9c 89       	ldd	r25, Y+20	; 0x14
    45e2:	98 8b       	std	Y+16, r25	; 0x10
    45e4:	8f 87       	std	Y+15, r24	; 0x0f
    45e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    45e8:	98 89       	ldd	r25, Y+16	; 0x10
    45ea:	01 97       	sbiw	r24, 0x01	; 1
    45ec:	f1 f7       	brne	.-4      	; 0x45ea <H_LCD_void_writeNlatch+0x384>
    45ee:	98 8b       	std	Y+16, r25	; 0x10
    45f0:	8f 87       	std	Y+15, r24	; 0x0f
 	 	 // step 8 : delay for 1 msec 	to allow latching
 	 	_delay_ms(1);
 	 	 // step 9 : deactivate Enable (E = 0)
 	 	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
    45f2:	80 e0       	ldi	r24, 0x00	; 0
    45f4:	62 e0       	ldi	r22, 0x02	; 2
    45f6:	40 e0       	ldi	r20, 0x00	; 0
    45f8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    45fc:	80 e0       	ldi	r24, 0x00	; 0
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	a0 ea       	ldi	r26, 0xA0	; 160
    4602:	b0 e4       	ldi	r27, 0x40	; 64
    4604:	8b 87       	std	Y+11, r24	; 0x0b
    4606:	9c 87       	std	Y+12, r25	; 0x0c
    4608:	ad 87       	std	Y+13, r26	; 0x0d
    460a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    460c:	6b 85       	ldd	r22, Y+11	; 0x0b
    460e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4610:	8d 85       	ldd	r24, Y+13	; 0x0d
    4612:	9e 85       	ldd	r25, Y+14	; 0x0e
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	30 e0       	ldi	r19, 0x00	; 0
    4618:	48 ec       	ldi	r20, 0xC8	; 200
    461a:	53 e4       	ldi	r21, 0x43	; 67
    461c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4620:	dc 01       	movw	r26, r24
    4622:	cb 01       	movw	r24, r22
    4624:	8f 83       	std	Y+7, r24	; 0x07
    4626:	98 87       	std	Y+8, r25	; 0x08
    4628:	a9 87       	std	Y+9, r26	; 0x09
    462a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    462c:	6f 81       	ldd	r22, Y+7	; 0x07
    462e:	78 85       	ldd	r23, Y+8	; 0x08
    4630:	89 85       	ldd	r24, Y+9	; 0x09
    4632:	9a 85       	ldd	r25, Y+10	; 0x0a
    4634:	20 e0       	ldi	r18, 0x00	; 0
    4636:	30 e0       	ldi	r19, 0x00	; 0
    4638:	40 e8       	ldi	r20, 0x80	; 128
    463a:	5f e3       	ldi	r21, 0x3F	; 63
    463c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4640:	88 23       	and	r24, r24
    4642:	2c f4       	brge	.+10     	; 0x464e <H_LCD_void_writeNlatch+0x3e8>
		__ticks = 1;
    4644:	81 e0       	ldi	r24, 0x01	; 1
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	9e 83       	std	Y+6, r25	; 0x06
    464a:	8d 83       	std	Y+5, r24	; 0x05
    464c:	3f c0       	rjmp	.+126    	; 0x46cc <H_LCD_void_writeNlatch+0x466>
	else if (__tmp > 65535)
    464e:	6f 81       	ldd	r22, Y+7	; 0x07
    4650:	78 85       	ldd	r23, Y+8	; 0x08
    4652:	89 85       	ldd	r24, Y+9	; 0x09
    4654:	9a 85       	ldd	r25, Y+10	; 0x0a
    4656:	20 e0       	ldi	r18, 0x00	; 0
    4658:	3f ef       	ldi	r19, 0xFF	; 255
    465a:	4f e7       	ldi	r20, 0x7F	; 127
    465c:	57 e4       	ldi	r21, 0x47	; 71
    465e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4662:	18 16       	cp	r1, r24
    4664:	4c f5       	brge	.+82     	; 0x46b8 <H_LCD_void_writeNlatch+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4666:	6b 85       	ldd	r22, Y+11	; 0x0b
    4668:	7c 85       	ldd	r23, Y+12	; 0x0c
    466a:	8d 85       	ldd	r24, Y+13	; 0x0d
    466c:	9e 85       	ldd	r25, Y+14	; 0x0e
    466e:	20 e0       	ldi	r18, 0x00	; 0
    4670:	30 e0       	ldi	r19, 0x00	; 0
    4672:	40 e2       	ldi	r20, 0x20	; 32
    4674:	51 e4       	ldi	r21, 0x41	; 65
    4676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    467a:	dc 01       	movw	r26, r24
    467c:	cb 01       	movw	r24, r22
    467e:	bc 01       	movw	r22, r24
    4680:	cd 01       	movw	r24, r26
    4682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4686:	dc 01       	movw	r26, r24
    4688:	cb 01       	movw	r24, r22
    468a:	9e 83       	std	Y+6, r25	; 0x06
    468c:	8d 83       	std	Y+5, r24	; 0x05
    468e:	0f c0       	rjmp	.+30     	; 0x46ae <H_LCD_void_writeNlatch+0x448>
    4690:	88 e2       	ldi	r24, 0x28	; 40
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	9c 83       	std	Y+4, r25	; 0x04
    4696:	8b 83       	std	Y+3, r24	; 0x03
    4698:	8b 81       	ldd	r24, Y+3	; 0x03
    469a:	9c 81       	ldd	r25, Y+4	; 0x04
    469c:	01 97       	sbiw	r24, 0x01	; 1
    469e:	f1 f7       	brne	.-4      	; 0x469c <H_LCD_void_writeNlatch+0x436>
    46a0:	9c 83       	std	Y+4, r25	; 0x04
    46a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46a4:	8d 81       	ldd	r24, Y+5	; 0x05
    46a6:	9e 81       	ldd	r25, Y+6	; 0x06
    46a8:	01 97       	sbiw	r24, 0x01	; 1
    46aa:	9e 83       	std	Y+6, r25	; 0x06
    46ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ae:	8d 81       	ldd	r24, Y+5	; 0x05
    46b0:	9e 81       	ldd	r25, Y+6	; 0x06
    46b2:	00 97       	sbiw	r24, 0x00	; 0
    46b4:	69 f7       	brne	.-38     	; 0x4690 <H_LCD_void_writeNlatch+0x42a>
    46b6:	14 c0       	rjmp	.+40     	; 0x46e0 <H_LCD_void_writeNlatch+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46b8:	6f 81       	ldd	r22, Y+7	; 0x07
    46ba:	78 85       	ldd	r23, Y+8	; 0x08
    46bc:	89 85       	ldd	r24, Y+9	; 0x09
    46be:	9a 85       	ldd	r25, Y+10	; 0x0a
    46c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46c4:	dc 01       	movw	r26, r24
    46c6:	cb 01       	movw	r24, r22
    46c8:	9e 83       	std	Y+6, r25	; 0x06
    46ca:	8d 83       	std	Y+5, r24	; 0x05
    46cc:	8d 81       	ldd	r24, Y+5	; 0x05
    46ce:	9e 81       	ldd	r25, Y+6	; 0x06
    46d0:	9a 83       	std	Y+2, r25	; 0x02
    46d2:	89 83       	std	Y+1, r24	; 0x01
    46d4:	89 81       	ldd	r24, Y+1	; 0x01
    46d6:	9a 81       	ldd	r25, Y+2	; 0x02
    46d8:	01 97       	sbiw	r24, 0x01	; 1
    46da:	f1 f7       	brne	.-4      	; 0x46d8 <H_LCD_void_writeNlatch+0x472>
    46dc:	9a 83       	std	Y+2, r25	; 0x02
    46de:	89 83       	std	Y+1, r24	; 0x01
 	 	_delay_ms(5);
#else
  #error("Wrong LCD mode")
#endif

}
    46e0:	e9 96       	adiw	r28, 0x39	; 57
    46e2:	0f b6       	in	r0, 0x3f	; 63
    46e4:	f8 94       	cli
    46e6:	de bf       	out	0x3e, r29	; 62
    46e8:	0f be       	out	0x3f, r0	; 63
    46ea:	cd bf       	out	0x3d, r28	; 61
    46ec:	cf 91       	pop	r28
    46ee:	df 91       	pop	r29
    46f0:	08 95       	ret

000046f2 <H_KEYPAD_void_init>:
#include"KEYPAD_config.h"
#include"KEYPAD_int.h"
#include<util/delay.h>

void H_KEYPAD_void_init()
{
    46f2:	df 93       	push	r29
    46f4:	cf 93       	push	r28
    46f6:	cd b7       	in	r28, 0x3d	; 61
    46f8:	de b7       	in	r29, 0x3e	; 62
	//set all rows  direction as output
	M_DIO_void_setPinDir(KEYPAD_R0_PORT, KEYPAD_R0_PIN, OUT);
    46fa:	81 e0       	ldi	r24, 0x01	; 1
    46fc:	64 e0       	ldi	r22, 0x04	; 4
    46fe:	41 e0       	ldi	r20, 0x01	; 1
    4700:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R1_PORT, KEYPAD_R1_PIN, OUT);
    4704:	81 e0       	ldi	r24, 0x01	; 1
    4706:	65 e0       	ldi	r22, 0x05	; 5
    4708:	41 e0       	ldi	r20, 0x01	; 1
    470a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R2_PORT, KEYPAD_R2_PIN, OUT);
    470e:	81 e0       	ldi	r24, 0x01	; 1
    4710:	66 e0       	ldi	r22, 0x06	; 6
    4712:	41 e0       	ldi	r20, 0x01	; 1
    4714:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R3_PORT, KEYPAD_R3_PIN, OUT);
    4718:	81 e0       	ldi	r24, 0x01	; 1
    471a:	67 e0       	ldi	r22, 0x07	; 7
    471c:	41 e0       	ldi	r20, 0x01	; 1
    471e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>

	//set all collums direction as input
	M_DIO_void_setPinDir(KEYPAD_C0_PORT, KEYPAD_C0_PIN, IN);
    4722:	83 e0       	ldi	r24, 0x03	; 3
    4724:	62 e0       	ldi	r22, 0x02	; 2
    4726:	40 e0       	ldi	r20, 0x00	; 0
    4728:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C1_PORT, KEYPAD_C1_PIN, IN);
    472c:	83 e0       	ldi	r24, 0x03	; 3
    472e:	63 e0       	ldi	r22, 0x03	; 3
    4730:	40 e0       	ldi	r20, 0x00	; 0
    4732:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C2_PORT, KEYPAD_C2_PIN, IN);
    4736:	83 e0       	ldi	r24, 0x03	; 3
    4738:	64 e0       	ldi	r22, 0x04	; 4
    473a:	40 e0       	ldi	r20, 0x00	; 0
    473c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C3_PORT, KEYPAD_C3_PIN, IN);
    4740:	83 e0       	ldi	r24, 0x03	; 3
    4742:	65 e0       	ldi	r22, 0x05	; 5
    4744:	40 e0       	ldi	r20, 0x00	; 0
    4746:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>

	//deactivate rows (high)
	M_DIO_void_setPinValue(KEYPAD_R0_PORT,KEYPAD_R0_PIN,HIGH);
    474a:	81 e0       	ldi	r24, 0x01	; 1
    474c:	64 e0       	ldi	r22, 0x04	; 4
    474e:	41 e0       	ldi	r20, 0x01	; 1
    4750:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R1_PORT,KEYPAD_R1_PIN,HIGH);
    4754:	81 e0       	ldi	r24, 0x01	; 1
    4756:	65 e0       	ldi	r22, 0x05	; 5
    4758:	41 e0       	ldi	r20, 0x01	; 1
    475a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R2_PORT,KEYPAD_R2_PIN,HIGH);
    475e:	81 e0       	ldi	r24, 0x01	; 1
    4760:	66 e0       	ldi	r22, 0x06	; 6
    4762:	41 e0       	ldi	r20, 0x01	; 1
    4764:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R3_PORT,KEYPAD_R3_PIN,HIGH);
    4768:	81 e0       	ldi	r24, 0x01	; 1
    476a:	67 e0       	ldi	r22, 0x07	; 7
    476c:	41 e0       	ldi	r20, 0x01	; 1
    476e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
    }
    4772:	cf 91       	pop	r28
    4774:	df 91       	pop	r29
    4776:	08 95       	ret

00004778 <H_KEYPAD_void_getPressedKey>:

u8 H_KEYPAD_void_getPressedKey()
{
    4778:	df 93       	push	r29
    477a:	cf 93       	push	r28
    477c:	cd b7       	in	r28, 0x3d	; 61
    477e:	de b7       	in	r29, 0x3e	; 62
    4780:	a8 97       	sbiw	r28, 0x28	; 40
    4782:	0f b6       	in	r0, 0x3f	; 63
    4784:	f8 94       	cli
    4786:	de bf       	out	0x3e, r29	; 62
    4788:	0f be       	out	0x3f, r0	; 63
    478a:	cd bf       	out	0x3d, r28	; 61
	u8 loc_Key= NUM_PRESSED_KEY ;
    478c:	8f ef       	ldi	r24, 0xFF	; 255
    478e:	89 8b       	std	Y+17, r24	; 0x11
	u8 loc_row_indx;
	u8 loc_col_indx;
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
    4790:	ce 01       	movw	r24, r28
    4792:	42 96       	adiw	r24, 0x12	; 18
    4794:	9d a3       	std	Y+37, r25	; 0x25
    4796:	8c a3       	std	Y+36, r24	; 0x24
    4798:	ef e7       	ldi	r30, 0x7F	; 127
    479a:	f1 e0       	ldi	r31, 0x01	; 1
    479c:	ff a3       	std	Y+39, r31	; 0x27
    479e:	ee a3       	std	Y+38, r30	; 0x26
    47a0:	f0 e1       	ldi	r31, 0x10	; 16
    47a2:	f8 a7       	std	Y+40, r31	; 0x28
    47a4:	ee a1       	ldd	r30, Y+38	; 0x26
    47a6:	ff a1       	ldd	r31, Y+39	; 0x27
    47a8:	00 80       	ld	r0, Z
    47aa:	8e a1       	ldd	r24, Y+38	; 0x26
    47ac:	9f a1       	ldd	r25, Y+39	; 0x27
    47ae:	01 96       	adiw	r24, 0x01	; 1
    47b0:	9f a3       	std	Y+39, r25	; 0x27
    47b2:	8e a3       	std	Y+38, r24	; 0x26
    47b4:	ec a1       	ldd	r30, Y+36	; 0x24
    47b6:	fd a1       	ldd	r31, Y+37	; 0x25
    47b8:	00 82       	st	Z, r0
    47ba:	8c a1       	ldd	r24, Y+36	; 0x24
    47bc:	9d a1       	ldd	r25, Y+37	; 0x25
    47be:	01 96       	adiw	r24, 0x01	; 1
    47c0:	9d a3       	std	Y+37, r25	; 0x25
    47c2:	8c a3       	std	Y+36, r24	; 0x24
    47c4:	98 a5       	ldd	r25, Y+40	; 0x28
    47c6:	91 50       	subi	r25, 0x01	; 1
    47c8:	98 a7       	std	Y+40, r25	; 0x28
    47ca:	e8 a5       	ldd	r30, Y+40	; 0x28
    47cc:	ee 23       	and	r30, r30
    47ce:	51 f7       	brne	.-44     	; 0x47a4 <H_KEYPAD_void_getPressedKey+0x2c>
	u8 read;
	for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
    47d0:	84 e0       	ldi	r24, 0x04	; 4
    47d2:	88 8b       	std	Y+16, r24	; 0x10
    47d4:	c9 c0       	rjmp	.+402    	; 0x4968 <H_KEYPAD_void_getPressedKey+0x1f0>
	{
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,LOW);
    47d6:	81 e0       	ldi	r24, 0x01	; 1
    47d8:	68 89       	ldd	r22, Y+16	; 0x10
    47da:	40 e0       	ldi	r20, 0x00	; 0
    47dc:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
		for (loc_col_indx=KEYPAD_C0_PIN;loc_col_indx<=KEYPAD_C3_PIN;loc_col_indx ++)
    47e0:	82 e0       	ldi	r24, 0x02	; 2
    47e2:	8f 87       	std	Y+15, r24	; 0x0f
    47e4:	b5 c0       	rjmp	.+362    	; 0x4950 <H_KEYPAD_void_getPressedKey+0x1d8>
		{
			M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
    47e6:	9e 01       	movw	r18, r28
    47e8:	2e 5d       	subi	r18, 0xDE	; 222
    47ea:	3f 4f       	sbci	r19, 0xFF	; 255
    47ec:	83 e0       	ldi	r24, 0x03	; 3
    47ee:	6f 85       	ldd	r22, Y+15	; 0x0f
    47f0:	a9 01       	movw	r20, r18
    47f2:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <M_DIO_void_getPinValue>
			if(read==ACTIVE_LOW_PRESSED)
    47f6:	8a a1       	ldd	r24, Y+34	; 0x22
    47f8:	88 23       	and	r24, r24
    47fa:	09 f0       	breq	.+2      	; 0x47fe <H_KEYPAD_void_getPressedKey+0x86>
    47fc:	a6 c0       	rjmp	.+332    	; 0x494a <H_KEYPAD_void_getPressedKey+0x1d2>
    47fe:	80 e0       	ldi	r24, 0x00	; 0
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	a8 ec       	ldi	r26, 0xC8	; 200
    4804:	b2 e4       	ldi	r27, 0x42	; 66
    4806:	8b 87       	std	Y+11, r24	; 0x0b
    4808:	9c 87       	std	Y+12, r25	; 0x0c
    480a:	ad 87       	std	Y+13, r26	; 0x0d
    480c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    480e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4810:	7c 85       	ldd	r23, Y+12	; 0x0c
    4812:	8d 85       	ldd	r24, Y+13	; 0x0d
    4814:	9e 85       	ldd	r25, Y+14	; 0x0e
    4816:	20 e0       	ldi	r18, 0x00	; 0
    4818:	30 e0       	ldi	r19, 0x00	; 0
    481a:	48 ec       	ldi	r20, 0xC8	; 200
    481c:	53 e4       	ldi	r21, 0x43	; 67
    481e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4822:	dc 01       	movw	r26, r24
    4824:	cb 01       	movw	r24, r22
    4826:	8f 83       	std	Y+7, r24	; 0x07
    4828:	98 87       	std	Y+8, r25	; 0x08
    482a:	a9 87       	std	Y+9, r26	; 0x09
    482c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    482e:	6f 81       	ldd	r22, Y+7	; 0x07
    4830:	78 85       	ldd	r23, Y+8	; 0x08
    4832:	89 85       	ldd	r24, Y+9	; 0x09
    4834:	9a 85       	ldd	r25, Y+10	; 0x0a
    4836:	20 e0       	ldi	r18, 0x00	; 0
    4838:	30 e0       	ldi	r19, 0x00	; 0
    483a:	40 e8       	ldi	r20, 0x80	; 128
    483c:	5f e3       	ldi	r21, 0x3F	; 63
    483e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4842:	88 23       	and	r24, r24
    4844:	2c f4       	brge	.+10     	; 0x4850 <H_KEYPAD_void_getPressedKey+0xd8>
		__ticks = 1;
    4846:	81 e0       	ldi	r24, 0x01	; 1
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	9e 83       	std	Y+6, r25	; 0x06
    484c:	8d 83       	std	Y+5, r24	; 0x05
    484e:	3f c0       	rjmp	.+126    	; 0x48ce <H_KEYPAD_void_getPressedKey+0x156>
	else if (__tmp > 65535)
    4850:	6f 81       	ldd	r22, Y+7	; 0x07
    4852:	78 85       	ldd	r23, Y+8	; 0x08
    4854:	89 85       	ldd	r24, Y+9	; 0x09
    4856:	9a 85       	ldd	r25, Y+10	; 0x0a
    4858:	20 e0       	ldi	r18, 0x00	; 0
    485a:	3f ef       	ldi	r19, 0xFF	; 255
    485c:	4f e7       	ldi	r20, 0x7F	; 127
    485e:	57 e4       	ldi	r21, 0x47	; 71
    4860:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4864:	18 16       	cp	r1, r24
    4866:	4c f5       	brge	.+82     	; 0x48ba <H_KEYPAD_void_getPressedKey+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4868:	6b 85       	ldd	r22, Y+11	; 0x0b
    486a:	7c 85       	ldd	r23, Y+12	; 0x0c
    486c:	8d 85       	ldd	r24, Y+13	; 0x0d
    486e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4870:	20 e0       	ldi	r18, 0x00	; 0
    4872:	30 e0       	ldi	r19, 0x00	; 0
    4874:	40 e2       	ldi	r20, 0x20	; 32
    4876:	51 e4       	ldi	r21, 0x41	; 65
    4878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    487c:	dc 01       	movw	r26, r24
    487e:	cb 01       	movw	r24, r22
    4880:	bc 01       	movw	r22, r24
    4882:	cd 01       	movw	r24, r26
    4884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4888:	dc 01       	movw	r26, r24
    488a:	cb 01       	movw	r24, r22
    488c:	9e 83       	std	Y+6, r25	; 0x06
    488e:	8d 83       	std	Y+5, r24	; 0x05
    4890:	0f c0       	rjmp	.+30     	; 0x48b0 <H_KEYPAD_void_getPressedKey+0x138>
    4892:	88 e2       	ldi	r24, 0x28	; 40
    4894:	90 e0       	ldi	r25, 0x00	; 0
    4896:	9c 83       	std	Y+4, r25	; 0x04
    4898:	8b 83       	std	Y+3, r24	; 0x03
    489a:	8b 81       	ldd	r24, Y+3	; 0x03
    489c:	9c 81       	ldd	r25, Y+4	; 0x04
    489e:	01 97       	sbiw	r24, 0x01	; 1
    48a0:	f1 f7       	brne	.-4      	; 0x489e <H_KEYPAD_void_getPressedKey+0x126>
    48a2:	9c 83       	std	Y+4, r25	; 0x04
    48a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48a6:	8d 81       	ldd	r24, Y+5	; 0x05
    48a8:	9e 81       	ldd	r25, Y+6	; 0x06
    48aa:	01 97       	sbiw	r24, 0x01	; 1
    48ac:	9e 83       	std	Y+6, r25	; 0x06
    48ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48b0:	8d 81       	ldd	r24, Y+5	; 0x05
    48b2:	9e 81       	ldd	r25, Y+6	; 0x06
    48b4:	00 97       	sbiw	r24, 0x00	; 0
    48b6:	69 f7       	brne	.-38     	; 0x4892 <H_KEYPAD_void_getPressedKey+0x11a>
    48b8:	14 c0       	rjmp	.+40     	; 0x48e2 <H_KEYPAD_void_getPressedKey+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48ba:	6f 81       	ldd	r22, Y+7	; 0x07
    48bc:	78 85       	ldd	r23, Y+8	; 0x08
    48be:	89 85       	ldd	r24, Y+9	; 0x09
    48c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    48c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48c6:	dc 01       	movw	r26, r24
    48c8:	cb 01       	movw	r24, r22
    48ca:	9e 83       	std	Y+6, r25	; 0x06
    48cc:	8d 83       	std	Y+5, r24	; 0x05
    48ce:	8d 81       	ldd	r24, Y+5	; 0x05
    48d0:	9e 81       	ldd	r25, Y+6	; 0x06
    48d2:	9a 83       	std	Y+2, r25	; 0x02
    48d4:	89 83       	std	Y+1, r24	; 0x01
    48d6:	89 81       	ldd	r24, Y+1	; 0x01
    48d8:	9a 81       	ldd	r25, Y+2	; 0x02
    48da:	01 97       	sbiw	r24, 0x01	; 1
    48dc:	f1 f7       	brne	.-4      	; 0x48da <H_KEYPAD_void_getPressedKey+0x162>
    48de:	9a 83       	std	Y+2, r25	; 0x02
    48e0:	89 83       	std	Y+1, r24	; 0x01
			{
				//debouncing delay
				_delay_ms(100);
				M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
    48e2:	9e 01       	movw	r18, r28
    48e4:	2e 5d       	subi	r18, 0xDE	; 222
    48e6:	3f 4f       	sbci	r19, 0xFF	; 255
    48e8:	83 e0       	ldi	r24, 0x03	; 3
    48ea:	6f 85       	ldd	r22, Y+15	; 0x0f
    48ec:	a9 01       	movw	r20, r18
    48ee:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <M_DIO_void_getPinValue>
				if(read==ACTIVE_LOW_PRESSED)
    48f2:	8a a1       	ldd	r24, Y+34	; 0x22
    48f4:	88 23       	and	r24, r24
    48f6:	49 f5       	brne	.+82     	; 0x494a <H_KEYPAD_void_getPressedKey+0x1d2>
    48f8:	08 c0       	rjmp	.+16     	; 0x490a <H_KEYPAD_void_getPressedKey+0x192>
				{

						while(read==ACTIVE_LOW_PRESSED)
						{
							M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
    48fa:	9e 01       	movw	r18, r28
    48fc:	2e 5d       	subi	r18, 0xDE	; 222
    48fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4900:	83 e0       	ldi	r24, 0x03	; 3
    4902:	6f 85       	ldd	r22, Y+15	; 0x0f
    4904:	a9 01       	movw	r20, r18
    4906:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <M_DIO_void_getPinValue>
				_delay_ms(100);
				M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
				if(read==ACTIVE_LOW_PRESSED)
				{

						while(read==ACTIVE_LOW_PRESSED)
    490a:	8a a1       	ldd	r24, Y+34	; 0x22
    490c:	88 23       	and	r24, r24
    490e:	a9 f3       	breq	.-22     	; 0x48fa <H_KEYPAD_void_getPressedKey+0x182>
						{
							M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
						}//while
						loc_Key =loc_keypad_arr[loc_row_indx - KEYPAD_R0_PIN][loc_col_indx - KEYPAD_C0_PIN];
    4910:	88 89       	ldd	r24, Y+16	; 0x10
    4912:	88 2f       	mov	r24, r24
    4914:	90 e0       	ldi	r25, 0x00	; 0
    4916:	9c 01       	movw	r18, r24
    4918:	24 50       	subi	r18, 0x04	; 4
    491a:	30 40       	sbci	r19, 0x00	; 0
    491c:	8f 85       	ldd	r24, Y+15	; 0x0f
    491e:	88 2f       	mov	r24, r24
    4920:	90 e0       	ldi	r25, 0x00	; 0
    4922:	ac 01       	movw	r20, r24
    4924:	42 50       	subi	r20, 0x02	; 2
    4926:	50 40       	sbci	r21, 0x00	; 0
    4928:	22 0f       	add	r18, r18
    492a:	33 1f       	adc	r19, r19
    492c:	22 0f       	add	r18, r18
    492e:	33 1f       	adc	r19, r19
    4930:	ce 01       	movw	r24, r28
    4932:	01 96       	adiw	r24, 0x01	; 1
    4934:	82 0f       	add	r24, r18
    4936:	93 1f       	adc	r25, r19
    4938:	84 0f       	add	r24, r20
    493a:	95 1f       	adc	r25, r21
    493c:	fc 01       	movw	r30, r24
    493e:	71 96       	adiw	r30, 0x11	; 17
    4940:	80 81       	ld	r24, Z
    4942:	89 8b       	std	Y+17, r24	; 0x11
						return loc_Key;
    4944:	f9 89       	ldd	r31, Y+17	; 0x11
    4946:	fb a3       	std	Y+35, r31	; 0x23
    4948:	15 c0       	rjmp	.+42     	; 0x4974 <H_KEYPAD_void_getPressedKey+0x1fc>
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
	u8 read;
	for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
	{
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,LOW);
		for (loc_col_indx=KEYPAD_C0_PIN;loc_col_indx<=KEYPAD_C3_PIN;loc_col_indx ++)
    494a:	8f 85       	ldd	r24, Y+15	; 0x0f
    494c:	8f 5f       	subi	r24, 0xFF	; 255
    494e:	8f 87       	std	Y+15, r24	; 0x0f
    4950:	8f 85       	ldd	r24, Y+15	; 0x0f
    4952:	86 30       	cpi	r24, 0x06	; 6
    4954:	08 f4       	brcc	.+2      	; 0x4958 <H_KEYPAD_void_getPressedKey+0x1e0>
    4956:	47 cf       	rjmp	.-370    	; 0x47e6 <H_KEYPAD_void_getPressedKey+0x6e>
					}// if 2nd reading
				}// if 1St reading

			}// for
			// Deactivate row (HIGH )
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,HIGH);
    4958:	81 e0       	ldi	r24, 0x01	; 1
    495a:	68 89       	ldd	r22, Y+16	; 0x10
    495c:	41 e0       	ldi	r20, 0x01	; 1
    495e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <M_DIO_void_setPinValue>
	u8 loc_Key= NUM_PRESSED_KEY ;
	u8 loc_row_indx;
	u8 loc_col_indx;
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
	u8 read;
	for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
    4962:	88 89       	ldd	r24, Y+16	; 0x10
    4964:	8f 5f       	subi	r24, 0xFF	; 255
    4966:	88 8b       	std	Y+16, r24	; 0x10
    4968:	88 89       	ldd	r24, Y+16	; 0x10
    496a:	88 30       	cpi	r24, 0x08	; 8
    496c:	08 f4       	brcc	.+2      	; 0x4970 <H_KEYPAD_void_getPressedKey+0x1f8>
    496e:	33 cf       	rjmp	.-410    	; 0x47d6 <H_KEYPAD_void_getPressedKey+0x5e>

			}// for
			// Deactivate row (HIGH )
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,HIGH);
		}
		return loc_Key;
    4970:	89 89       	ldd	r24, Y+17	; 0x11
    4972:	8b a3       	std	Y+35, r24	; 0x23
    4974:	8b a1       	ldd	r24, Y+35	; 0x23
	}
    4976:	a8 96       	adiw	r28, 0x28	; 40
    4978:	0f b6       	in	r0, 0x3f	; 63
    497a:	f8 94       	cli
    497c:	de bf       	out	0x3e, r29	; 62
    497e:	0f be       	out	0x3f, r0	; 63
    4980:	cd bf       	out	0x3d, r28	; 61
    4982:	cf 91       	pop	r28
    4984:	df 91       	pop	r29
    4986:	08 95       	ret

00004988 <main>:
#include "LCD_int.h"
#include"GIE_int.h"

#if (1)

void main(){
    4988:	df 93       	push	r29
    498a:	cf 93       	push	r28
    498c:	cd b7       	in	r28, 0x3d	; 61
    498e:	de b7       	in	r29, 0x3e	; 62

	H_LCD_void_Init();
    4990:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <H_LCD_void_Init>
	H_LCD_void_sendString("aH");
    4994:	80 e6       	ldi	r24, 0x60	; 96
    4996:	90 e0       	ldi	r25, 0x00	; 0
    4998:	0e 94 2b 20 	call	0x4056	; 0x4056 <H_LCD_void_sendString>
}
    499c:	cf 91       	pop	r28
    499e:	df 91       	pop	r29
    49a0:	08 95       	ret

000049a2 <__mulsi3>:
    49a2:	62 9f       	mul	r22, r18
    49a4:	d0 01       	movw	r26, r0
    49a6:	73 9f       	mul	r23, r19
    49a8:	f0 01       	movw	r30, r0
    49aa:	82 9f       	mul	r24, r18
    49ac:	e0 0d       	add	r30, r0
    49ae:	f1 1d       	adc	r31, r1
    49b0:	64 9f       	mul	r22, r20
    49b2:	e0 0d       	add	r30, r0
    49b4:	f1 1d       	adc	r31, r1
    49b6:	92 9f       	mul	r25, r18
    49b8:	f0 0d       	add	r31, r0
    49ba:	83 9f       	mul	r24, r19
    49bc:	f0 0d       	add	r31, r0
    49be:	74 9f       	mul	r23, r20
    49c0:	f0 0d       	add	r31, r0
    49c2:	65 9f       	mul	r22, r21
    49c4:	f0 0d       	add	r31, r0
    49c6:	99 27       	eor	r25, r25
    49c8:	72 9f       	mul	r23, r18
    49ca:	b0 0d       	add	r27, r0
    49cc:	e1 1d       	adc	r30, r1
    49ce:	f9 1f       	adc	r31, r25
    49d0:	63 9f       	mul	r22, r19
    49d2:	b0 0d       	add	r27, r0
    49d4:	e1 1d       	adc	r30, r1
    49d6:	f9 1f       	adc	r31, r25
    49d8:	bd 01       	movw	r22, r26
    49da:	cf 01       	movw	r24, r30
    49dc:	11 24       	eor	r1, r1
    49de:	08 95       	ret

000049e0 <__udivmodqi4>:
    49e0:	99 1b       	sub	r25, r25
    49e2:	79 e0       	ldi	r23, 0x09	; 9
    49e4:	04 c0       	rjmp	.+8      	; 0x49ee <__udivmodqi4_ep>

000049e6 <__udivmodqi4_loop>:
    49e6:	99 1f       	adc	r25, r25
    49e8:	96 17       	cp	r25, r22
    49ea:	08 f0       	brcs	.+2      	; 0x49ee <__udivmodqi4_ep>
    49ec:	96 1b       	sub	r25, r22

000049ee <__udivmodqi4_ep>:
    49ee:	88 1f       	adc	r24, r24
    49f0:	7a 95       	dec	r23
    49f2:	c9 f7       	brne	.-14     	; 0x49e6 <__udivmodqi4_loop>
    49f4:	80 95       	com	r24
    49f6:	08 95       	ret

000049f8 <__divmodhi4>:
    49f8:	97 fb       	bst	r25, 7
    49fa:	09 2e       	mov	r0, r25
    49fc:	07 26       	eor	r0, r23
    49fe:	0a d0       	rcall	.+20     	; 0x4a14 <__divmodhi4_neg1>
    4a00:	77 fd       	sbrc	r23, 7
    4a02:	04 d0       	rcall	.+8      	; 0x4a0c <__divmodhi4_neg2>
    4a04:	27 d0       	rcall	.+78     	; 0x4a54 <__udivmodhi4>
    4a06:	06 d0       	rcall	.+12     	; 0x4a14 <__divmodhi4_neg1>
    4a08:	00 20       	and	r0, r0
    4a0a:	1a f4       	brpl	.+6      	; 0x4a12 <__divmodhi4_exit>

00004a0c <__divmodhi4_neg2>:
    4a0c:	70 95       	com	r23
    4a0e:	61 95       	neg	r22
    4a10:	7f 4f       	sbci	r23, 0xFF	; 255

00004a12 <__divmodhi4_exit>:
    4a12:	08 95       	ret

00004a14 <__divmodhi4_neg1>:
    4a14:	f6 f7       	brtc	.-4      	; 0x4a12 <__divmodhi4_exit>
    4a16:	90 95       	com	r25
    4a18:	81 95       	neg	r24
    4a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a1c:	08 95       	ret

00004a1e <__divmodsi4>:
    4a1e:	97 fb       	bst	r25, 7
    4a20:	09 2e       	mov	r0, r25
    4a22:	05 26       	eor	r0, r21
    4a24:	0e d0       	rcall	.+28     	; 0x4a42 <__divmodsi4_neg1>
    4a26:	57 fd       	sbrc	r21, 7
    4a28:	04 d0       	rcall	.+8      	; 0x4a32 <__divmodsi4_neg2>
    4a2a:	28 d0       	rcall	.+80     	; 0x4a7c <__udivmodsi4>
    4a2c:	0a d0       	rcall	.+20     	; 0x4a42 <__divmodsi4_neg1>
    4a2e:	00 1c       	adc	r0, r0
    4a30:	38 f4       	brcc	.+14     	; 0x4a40 <__divmodsi4_exit>

00004a32 <__divmodsi4_neg2>:
    4a32:	50 95       	com	r21
    4a34:	40 95       	com	r20
    4a36:	30 95       	com	r19
    4a38:	21 95       	neg	r18
    4a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a3c:	4f 4f       	sbci	r20, 0xFF	; 255
    4a3e:	5f 4f       	sbci	r21, 0xFF	; 255

00004a40 <__divmodsi4_exit>:
    4a40:	08 95       	ret

00004a42 <__divmodsi4_neg1>:
    4a42:	f6 f7       	brtc	.-4      	; 0x4a40 <__divmodsi4_exit>
    4a44:	90 95       	com	r25
    4a46:	80 95       	com	r24
    4a48:	70 95       	com	r23
    4a4a:	61 95       	neg	r22
    4a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a4e:	8f 4f       	sbci	r24, 0xFF	; 255
    4a50:	9f 4f       	sbci	r25, 0xFF	; 255
    4a52:	08 95       	ret

00004a54 <__udivmodhi4>:
    4a54:	aa 1b       	sub	r26, r26
    4a56:	bb 1b       	sub	r27, r27
    4a58:	51 e1       	ldi	r21, 0x11	; 17
    4a5a:	07 c0       	rjmp	.+14     	; 0x4a6a <__udivmodhi4_ep>

00004a5c <__udivmodhi4_loop>:
    4a5c:	aa 1f       	adc	r26, r26
    4a5e:	bb 1f       	adc	r27, r27
    4a60:	a6 17       	cp	r26, r22
    4a62:	b7 07       	cpc	r27, r23
    4a64:	10 f0       	brcs	.+4      	; 0x4a6a <__udivmodhi4_ep>
    4a66:	a6 1b       	sub	r26, r22
    4a68:	b7 0b       	sbc	r27, r23

00004a6a <__udivmodhi4_ep>:
    4a6a:	88 1f       	adc	r24, r24
    4a6c:	99 1f       	adc	r25, r25
    4a6e:	5a 95       	dec	r21
    4a70:	a9 f7       	brne	.-22     	; 0x4a5c <__udivmodhi4_loop>
    4a72:	80 95       	com	r24
    4a74:	90 95       	com	r25
    4a76:	bc 01       	movw	r22, r24
    4a78:	cd 01       	movw	r24, r26
    4a7a:	08 95       	ret

00004a7c <__udivmodsi4>:
    4a7c:	a1 e2       	ldi	r26, 0x21	; 33
    4a7e:	1a 2e       	mov	r1, r26
    4a80:	aa 1b       	sub	r26, r26
    4a82:	bb 1b       	sub	r27, r27
    4a84:	fd 01       	movw	r30, r26
    4a86:	0d c0       	rjmp	.+26     	; 0x4aa2 <__udivmodsi4_ep>

00004a88 <__udivmodsi4_loop>:
    4a88:	aa 1f       	adc	r26, r26
    4a8a:	bb 1f       	adc	r27, r27
    4a8c:	ee 1f       	adc	r30, r30
    4a8e:	ff 1f       	adc	r31, r31
    4a90:	a2 17       	cp	r26, r18
    4a92:	b3 07       	cpc	r27, r19
    4a94:	e4 07       	cpc	r30, r20
    4a96:	f5 07       	cpc	r31, r21
    4a98:	20 f0       	brcs	.+8      	; 0x4aa2 <__udivmodsi4_ep>
    4a9a:	a2 1b       	sub	r26, r18
    4a9c:	b3 0b       	sbc	r27, r19
    4a9e:	e4 0b       	sbc	r30, r20
    4aa0:	f5 0b       	sbc	r31, r21

00004aa2 <__udivmodsi4_ep>:
    4aa2:	66 1f       	adc	r22, r22
    4aa4:	77 1f       	adc	r23, r23
    4aa6:	88 1f       	adc	r24, r24
    4aa8:	99 1f       	adc	r25, r25
    4aaa:	1a 94       	dec	r1
    4aac:	69 f7       	brne	.-38     	; 0x4a88 <__udivmodsi4_loop>
    4aae:	60 95       	com	r22
    4ab0:	70 95       	com	r23
    4ab2:	80 95       	com	r24
    4ab4:	90 95       	com	r25
    4ab6:	9b 01       	movw	r18, r22
    4ab8:	ac 01       	movw	r20, r24
    4aba:	bd 01       	movw	r22, r26
    4abc:	cf 01       	movw	r24, r30
    4abe:	08 95       	ret

00004ac0 <__prologue_saves__>:
    4ac0:	2f 92       	push	r2
    4ac2:	3f 92       	push	r3
    4ac4:	4f 92       	push	r4
    4ac6:	5f 92       	push	r5
    4ac8:	6f 92       	push	r6
    4aca:	7f 92       	push	r7
    4acc:	8f 92       	push	r8
    4ace:	9f 92       	push	r9
    4ad0:	af 92       	push	r10
    4ad2:	bf 92       	push	r11
    4ad4:	cf 92       	push	r12
    4ad6:	df 92       	push	r13
    4ad8:	ef 92       	push	r14
    4ada:	ff 92       	push	r15
    4adc:	0f 93       	push	r16
    4ade:	1f 93       	push	r17
    4ae0:	cf 93       	push	r28
    4ae2:	df 93       	push	r29
    4ae4:	cd b7       	in	r28, 0x3d	; 61
    4ae6:	de b7       	in	r29, 0x3e	; 62
    4ae8:	ca 1b       	sub	r28, r26
    4aea:	db 0b       	sbc	r29, r27
    4aec:	0f b6       	in	r0, 0x3f	; 63
    4aee:	f8 94       	cli
    4af0:	de bf       	out	0x3e, r29	; 62
    4af2:	0f be       	out	0x3f, r0	; 63
    4af4:	cd bf       	out	0x3d, r28	; 61
    4af6:	09 94       	ijmp

00004af8 <__epilogue_restores__>:
    4af8:	2a 88       	ldd	r2, Y+18	; 0x12
    4afa:	39 88       	ldd	r3, Y+17	; 0x11
    4afc:	48 88       	ldd	r4, Y+16	; 0x10
    4afe:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b00:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b02:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b04:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b06:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b08:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b0a:	b9 84       	ldd	r11, Y+9	; 0x09
    4b0c:	c8 84       	ldd	r12, Y+8	; 0x08
    4b0e:	df 80       	ldd	r13, Y+7	; 0x07
    4b10:	ee 80       	ldd	r14, Y+6	; 0x06
    4b12:	fd 80       	ldd	r15, Y+5	; 0x05
    4b14:	0c 81       	ldd	r16, Y+4	; 0x04
    4b16:	1b 81       	ldd	r17, Y+3	; 0x03
    4b18:	aa 81       	ldd	r26, Y+2	; 0x02
    4b1a:	b9 81       	ldd	r27, Y+1	; 0x01
    4b1c:	ce 0f       	add	r28, r30
    4b1e:	d1 1d       	adc	r29, r1
    4b20:	0f b6       	in	r0, 0x3f	; 63
    4b22:	f8 94       	cli
    4b24:	de bf       	out	0x3e, r29	; 62
    4b26:	0f be       	out	0x3f, r0	; 63
    4b28:	cd bf       	out	0x3d, r28	; 61
    4b2a:	ed 01       	movw	r28, r26
    4b2c:	08 95       	ret

00004b2e <_exit>:
    4b2e:	f8 94       	cli

00004b30 <__stop_program>:
    4b30:	ff cf       	rjmp	.-2      	; 0x4b30 <__stop_program>
